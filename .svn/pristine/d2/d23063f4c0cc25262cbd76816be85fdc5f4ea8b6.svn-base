//
//  UIControllerCollectAndHistory.m
//  ChinaBrowser
//
//  Created by HHY on 14/11/7.
//  Copyright (c) 2014年 KOTO Inc. All rights reserved.
//

#import "UIControllerBookmarkHistory.h"
#import "UIControllerCreateBookmark.h"
#import "UIControllerLogin.h"

#import "UICellBookmarkHisoty.h"
#import "UIViewHeader.h"

#import "UserManager.h"
#import "ModelUser.h"
#import "ModelHistory.h"
#import "ModelSyncDelete.h"
#import "ADOSyncDelete.h"

#import "SIAlertView.h"
#import "UIImageView+UIActivityIndicatorForSDWebImage.h"

#import "Math.h"

NSString * const KNotificationDidAddItemToMianBookmark = @"KNotificationDidAddItemToMianBookmark";

@interface UIControllerBookmarkHistory ()<UIActionSheetDelegate, UIControllerCreateBookmarkDelegate>
{
    //书签数据源
    NSMutableArray *_arrAllBookmark;
    //历史数据源
    NSMutableArray *_arrAllHistory;
    //最近二十条历史数据
//    NSMutableArray *_arrLastHistory;
    
    //历史抽屉区头
    NSMutableArray *_arrViewHeader;
    //当前选中区头
    NSInteger _currSectionIndex;
    
    //导航栏 右边按钮
    UIButton *_btnRight;
    
    //导航栏 选择器
    UIView *_viewSegment;
    UIButton *_btnSegmentBookmark;
    UIButton *_btnSegmentHistory;
    //本次所在文件夹
    NSInteger _myParen_pkid;
}
@end

@implementation UIControllerBookmarkHistory

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
        _urlType = UrlTypeBookmark;
    }
    return self;
}


- (void)viewDidLoad
{
    [super viewDidLoad];
    
    //登录后调用该通知
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(didLoginNotification:) name:KNotificationDidLogin object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(didLogoutNotification:) name:KNotificationDidLogout object:nil];
    
    //如果在子文件夹中,给主文件增加书签  调用该通知
    if (self.urlType == UrlTypeBookmark) {
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(didAddItemToMianBookmarkNotification:) name:KNotificationDidAddItemToMianBookmark object:nil];
    }
    
    _arrAllBookmark = [[NSMutableArray alloc]init];
    _arrViewHeader = [[NSMutableArray alloc]init];
    
    _tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    _tableView.allowsSelectionDuringEditing = YES;
    _tableView.layer.edgeAntialiasingMask = 3;
    
    
    if (self.urlType == UrlTypeBookmark)
        _myParen_pkid = 0;
    else if(self.urlType == urlTypeFolder && self.model)
        _myParen_pkid = self.model.pkid;
    
    [self initUI];
    
    //判断有没有登录
    [self didLoginNotification:nil];
}

//创建UI
-(void)initUI
{
    self.title = self.model.title;
    _viewNav = [UIViewNav viewNav];
    _viewNav.title = self.title;
    [self.view addSubview:_viewNav];
    
    self.view.layer.masksToBounds = YES;
    //导航栏
    UIButton *btnBack =[UIButton buttonWithType:UIButtonTypeCustom];
    [btnBack setImage:[UIImage imageWithBundleFile:@"iPhone/back_0.png"] forState:UIControlStateNormal];
    [btnBack setImage:[UIImage imageWithBundleFile:@"iPhone/back_1.png"] forState:UIControlStateHighlighted];
    [btnBack addTarget:self action:@selector(onTouchBtnback) forControlEvents:UIControlEventTouchUpInside];
    [btnBack sizeToFit];
    _viewNav.leftBarButtonItem = [[UIBarButtonItem alloc]initWithCustomView:btnBack];
    UIButton *btnRight =[UIButton buttonWithType:UIButtonTypeCustom];
    _btnRight = btnRight;
    [btnRight setTitle:LocalizedString(@"bianji") forState:UIControlStateNormal];
    [btnRight setTitle:LocalizedString(@"wancheng") forState:UIControlStateSelected];
    [btnRight setTitleColor:[UIColor lightGrayColor] forState:UIControlStateHighlighted];
    [btnRight sizeToFit];
    [btnRight addTarget:self action:@selector(onTouchRightBarButtonItem) forControlEvents:UIControlEventTouchUpInside];
    _viewNav.rightBarButtonItem = [[UIBarButtonItem alloc]initWithCustomView:btnRight];
    
    [_btnSynchro setTitleColor:[UIColor colorWithRed:9.0/255 green:108.0/255 blue:161.0/255 alpha:1] forState:UIControlStateNormal];
    [_btnSynchro setTitleColor:[UIColor colorWithRed:80.0/255 green:130.0/255 blue:191.0/255 alpha:1] forState:UIControlStateHighlighted];
    [_btnSynchro setBackgroundImage:[[UIImage imageWithBundleFile:@"iPhone/Settings/Bookmark/synchronous_1.png"] stretchableImageWithLeftCapWidth:4 topCapHeight:4] forState:UIControlStateNormal];
    [_btnSynchro setBackgroundImage:[[UIImage imageWithBundleFile:@"iPhone/Settings/Bookmark/synchronous_0.png"] stretchableImageWithLeftCapWidth:4 topCapHeight:4] forState:UIControlStateHighlighted];
    
    //底部编辑状态
    [_btnNewBookmark setTitle:LocalizedString(@"xinjianshuqian") forState:UIControlStateNormal];
    [_btnNewFolder setTitle:LocalizedString(@"xinjianwenjianjia") forState:UIControlStateNormal];
    [_btnSynchro setTitle:LocalizedString(@"tongbu") forState:UIControlStateNormal];
    
    _viewBotton.backgroundColor = [UIColor colorWithHexString:@"#f0f0f0"];
    
    //更新数据源
    //书签的
    _arrAllBookmark = [NSMutableArray arrayWithArray:[ADOBookmark queryWithParent_pkid:_myParen_pkid userId:[UserManager shareUserManager].currUser.uid]];
    
    //如果没有书签 显示图片
    if( _arrAllBookmark.count == 0)
    {
        [_tableView removeFromSuperview];
        _lableNil.text = LocalizedString(@"zanwushuqian");
    }
    else
    {
        [_viewNil removeFromSuperview];
    }
    
    if (!(self.urlType == urlTypeFolder)) {
        
        //顶部选择器
        _viewSegment = [[UIView alloc]initWithFrame:CGRectMake(96, 22, 140, 24 )];
        _viewSegment.backgroundColor = [UIColor clearColor];
        [_viewNav addSubview:_viewSegment];
        
        _btnSegmentBookmark = [UIButton buttonWithType:UIButtonTypeCustom];
        _btnSegmentBookmark.frame = CGRectMake(0, 0, 70, 24);
        _btnSegmentBookmark.titleLabel.font = [UIFont systemFontOfSize:15];
        [_btnSegmentBookmark setTitle:LocalizedString(@"shuqian") forState:UIControlStateNormal];
        [_btnSegmentBookmark setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [_btnSegmentBookmark setTitleColor:[UIColor blackColor] forState:UIControlStateDisabled];
        [_btnSegmentBookmark setBackgroundImage:[[UIImage imageWithBundleFile:@"iPhone/segment_left_0.png"] stretchableImageWithLeftCapWidth:10 topCapHeight:10] forState:UIControlStateNormal];
        [_btnSegmentBookmark setBackgroundImage:[[UIImage imageWithBundleFile:@"iPhone/segment_left_1.png"] stretchableImageWithLeftCapWidth:10 topCapHeight:10] forState:UIControlStateHighlighted];
         [_btnSegmentBookmark setBackgroundImage:[[UIImage imageWithBundleFile:@"iPhone/segment_left_2.png"] stretchableImageWithLeftCapWidth:10 topCapHeight:10] forState:UIControlStateDisabled];
        [_btnSegmentBookmark addTarget:self action:@selector(onTouchSegment:) forControlEvents:UIControlEventTouchUpInside];
        _btnSegmentBookmark.enabled = NO;
        
        _btnSegmentHistory = [UIButton buttonWithType:UIButtonTypeCustom];
        _btnSegmentHistory.frame = CGRectMake(70, 0, 70, 24);
        _btnSegmentHistory.titleLabel.font = [UIFont systemFontOfSize:15];
        [_btnSegmentHistory setTitle:LocalizedString(@"lishi") forState:UIControlStateNormal];
        [_btnSegmentHistory setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [_btnSegmentHistory setTitleColor:[UIColor blackColor] forState:UIControlStateDisabled];
        [_btnSegmentHistory setBackgroundImage:[[UIImage imageWithBundleFile:@"iPhone/segment_right_0.png"] stretchableImageWithLeftCapWidth:10 topCapHeight:10] forState:UIControlStateNormal];
        [_btnSegmentHistory setBackgroundImage:[[UIImage imageWithBundleFile:@"iPhone/segment_right_1.png"] stretchableImageWithLeftCapWidth:10 topCapHeight:10] forState:UIControlStateHighlighted];
        [_btnSegmentHistory setBackgroundImage:[[UIImage imageWithBundleFile:@"iPhone/segment_right_2.png"] stretchableImageWithLeftCapWidth:10 topCapHeight:10] forState:UIControlStateDisabled];
        [_btnSegmentHistory addTarget:self action:@selector(onTouchSegment:) forControlEvents:UIControlEventTouchUpInside];
        
        [_viewSegment addSubview:_btnSegmentBookmark];
        [_viewSegment addSubview:_btnSegmentHistory];
        
        
        //历史 区头
        for (NSInteger i=0; i<4; i++) {
            UIViewHeader *viewHeader = [UIViewHeader viewHeaderFromXib];
            if (i==0) {
                viewHeader.labelTitle.text = LocalizedString(@"zueijinfangwen");
            }
            else if (i==1) {
                viewHeader.labelTitle.text = LocalizedString(@"jintian");
                //缺省时 默认点击展开
                viewHeader.selected = YES;
            }
            else if (i==2) {
                viewHeader.labelTitle.text = LocalizedString(@"zuotian");
            }
            else {
                viewHeader.labelTitle.text = LocalizedString(@"gengzao");
            }
            viewHeader.imageViewAccessory.image = [UIImage imageWithBundleFile:@"iPhone/FM/expansion_2.png"];
            viewHeader.colorNor = [UIColor colorWithHexString:@"#f0f0f0"];;
            viewHeader.colorSelect = [UIColor colorWithHexString:@"#f5f5f5"];;
            viewHeader.labelSubTitle.text = nil;
            viewHeader.labelTitle.textColor = [UIColor blackColor];
            viewHeader.tag = i;
            [viewHeader addTarget:self action:@selector(onTouchHeader:) forControlEvents:UIControlEventTouchUpInside];
            
            [_arrViewHeader addObject:viewHeader];
        }

    }
    else
    {
        
        [_btnNewFolder setTitleColor:[UIColor grayColor] forState:UIControlStateNormal];
        _btnNewFolder.userInteractionEnabled = NO;
    }

}

- (void)viewWillAppear:(BOOL)animated
{
    //在viewdidlocd 写了layoutSubView  方法.  这里注掉 就不会再调用一次了.
    [super viewWillAppear:animated];
    
}

/**
 *  更新数据历史数据源
 */
-(void)upDateHistory
{

    for (NSMutableArray* arrHistory in _arrAllHistory) {
        [arrHistory removeAllObjects];
    }
    // 历史记录
    NSArray *arrHistoryOrigin = [ADOHistory queryAllWithUserId:[UserManager shareUserManager].currUser.uid];
    NSCalendar *calendar = [NSCalendar currentCalendar];
    NSDateComponents *dateComponents = [calendar components:NSYearCalendarUnit|NSMonthCalendarUnit|NSDayCalendarUnit fromDate:[NSDate date]];
    dateComponents.hour = 0;
    dateComponents.minute = 0;
    dateComponents.second = 0;
    NSDate *dateToday = [calendar dateFromComponents:dateComponents];
    
    NSTimeInterval tiToday = [dateToday timeIntervalSince1970];
    NSTimeInterval tiYesterday = tiToday-86400;
    for (ModelHistory *model in arrHistoryOrigin) {
        if (model.time>=tiToday) {
            // 今天
            NSMutableArray *arrHistory = _arrAllHistory[1];
            [arrHistory addObject:model];
        }
        else if (model.time>=tiYesterday) {
            // 昨天
            NSMutableArray *arrHistory = _arrAllHistory[2];
            [arrHistory addObject:model];
        }
        else {
            // 更早
            NSMutableArray *arrHistory = _arrAllHistory[3];
            [arrHistory addObject:model];
        }
    }
    
    [self getLastHistroy];
}

/**
 *  获得最后20条历史记录
 */
-(void)getLastHistroy
{
    int j = 0;
    
    for (int i = 1; i<_arrAllHistory.count; i++) {
        NSMutableArray *arrHistroy = _arrAllHistory[i];
        for (ModelHistory *model in arrHistroy) {
            if (j == 20)
            {
                return;
            }
            [_arrAllHistory[0] addObject:model];
            j++;
        }
    }
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

/**
 *  屏幕旋转
 *
 *  @param toInterfaceOrientation
 *  @param duration
 */
-(void)layoutSubViewsWithInterfaceOrientation:(UIInterfaceOrientation)orientation
{

    if (UIUserInterfaceIdiomPad==UI_USER_INTERFACE_IDIOM()) return;
    
    [_viewNav resizeWithOrientation:orientation];
    
    CGRect rc ;
    rc.origin.x = 0;
    rc.origin.y = _viewNav.bottom;
    rc.size.height = self.view.height-rc.origin.y-_viewBotton.height;
    rc.size.width = _viewNav.frame.size.width;
    if ([_tableView superview])
        _tableView.frame = rc;
    else
        _viewNil.frame = rc;
    
    rc = _viewBotton.frame;
    rc.size.width = self.view.width;
    rc.origin.y = self.view.height-rc.size.height;
    _viewBotton.frame = rc;
    
    rc = _viewSegment.frame;
    rc.size.height = 24;

    if (_viewNav.frame.size.height>44) {
        rc.origin.y = _viewNav.frame.origin.y + 20 + (_viewNav.frame.size.height -20 - rc.size.height)*0.5;
    }
    else
    {
       rc.origin.y = _viewNav.top + (_viewNav.frame.size.height - rc.size.height)*0.5;
    }
    
    rc.origin.x = _viewNav.left + (_viewNav.frame.size.width - rc.size.width)*0.5;
    
    _viewSegment.frame = rc;
    
}

//登录通知方法
-(void)didLoginNotification:(NSNotification *)notification
{
    //更新历史和书签数据源
    _arrAllBookmark = [NSMutableArray arrayWithArray:[ADOBookmark queryWithParent_pkid:_myParen_pkid userId:[UserManager shareUserManager].currUser.uid]];
    [self upDateHistory];
    
    //更新tableview页面状态
    [self onTouchSegment:_btnSegmentBookmark.enabled?_btnSegmentHistory:_btnSegmentBookmark];
    
    if (_tableView.editing == NO && [UserManager shareUserManager].currUser && ![_viewUser superview]) {
        //在编辑状态下 有用户信息 则显示用户信息
        [_viewBotton addSubview:_viewUser];
        _viewUser.frame = _btnNewFolder.frame;
        _viewUser.hidden = NO;
    }
    else if(![UserManager shareUserManager].currUser && [_viewUser superview])
        [_viewUser removeFromSuperview];
    
    //底部 用户状态
    if ([_viewUser superview] && [UserManager shareUserManager].currUser)
    {
        
        if([UserManager shareUserManager].currUser.syncBookmarkTime == 0)
            _labelSynchro.text = LocalizedString(@"ninhaiweitongbu");
        else
            _labelSynchro.text = [NSString stringWithFormat:@"%@%@",LocalizedString(@"shangcitongbu_"),[NSString stringWithTimeInterval:[UserManager shareUserManager].currUser.syncBookmarkTime]];
        _labelNick.text = [UserManager shareUserManager].currUser.nickname;
        if ([UserManager shareUserManager].currUser.avatar>0  ) {
            [_imageIcon setImageWithURL:[NSURL URLWithString:[UserManager shareUserManager].currUser.avatar] usingActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];
        }
    }
}

//登出通知
-(void)didLogoutNotification:(NSNotification *)notification
{
    _arrAllBookmark = [NSMutableArray arrayWithArray:[ADOBookmark queryWithParent_pkid:_myParen_pkid userId:[UserManager shareUserManager].currUser.uid]];
    [self upDateHistory];
    
    //更新tableview页面状态
    [self onTouchSegment:_btnSegmentBookmark.enabled?_btnSegmentHistory:_btnSegmentBookmark];
    if (_viewUser.superview) {
        [_viewUser removeFromSuperview];
    }
}

-(void)didAddItemToMianBookmarkNotification:(NSNotification *)notification
{
    if (self.urlType == UrlTypeBookmark)
    {
        ModelBookmark *model = notification.object;
        [_arrAllBookmark addObject:model];
        [_tableView reloadData];
    }
    
}

/**
 *  返回按钮
 */
- (void)onTouchBtnback
{
    if(self.navigationController)
    {
         [self.navigationController popViewControllerAnimated:YES];
    }else
    {
        [self dismissModalViewControllerAnimated:YES];
       
    }
}

/**
 *  点击_nav右边按钮事件.  书签下为编辑,历史下为清除
 */
-(void)onTouchRightBarButtonItem
{
    if (_urlType == UrlTypeBookmark|| _urlType == urlTypeFolder) {
        if(_tableView.editing)
        {
            //点击完成
            if([UserManager shareUserManager].currUser)
            {
                if (![_viewUser superview])
                    [_viewBotton addSubview:_viewUser];
                _viewUser.frame = _btnNewFolder.frame;
            }
            _btnSynchro.hidden = NO;
            
            _btnNewBookmark.hidden = YES;
            _btnNewFolder.hidden = YES;
            
            [_tableView setEditing:NO animated:YES];
        }
        else
        {

                if ([_viewUser superview])
                    [_viewUser removeFromSuperview];
            //点击编辑
            _btnSynchro.hidden = YES;
            
            _btnNewBookmark.hidden = NO;
            _btnNewFolder.hidden = NO;
            
            //_navBar.topItem.rightBarButtonItem.title = LocalizedString(@"wancheng");
//            [_btnRight setTitle:LocalizedString(@"wancheng") forState:UIControlStateNormal] ;
            [_tableView setEditing:YES animated:YES];
        }
    }
    else
    {
        UIActionSheet *as = [[UIActionSheet alloc] initWithTitle:LocalizedString(@"ninquedingyaoqingkongliulanlishima") delegate:self cancelButtonTitle:LocalizedString(@"quxiao") destructiveButtonTitle:nil otherButtonTitles:LocalizedString(@"qingkong"), nil];
        [as showInView:self.view];
    }
    _btnRight.selected = _tableView.editing;
}

/**
 *  点击顶部选择器 书签 和 历史
 */
-(void)onTouchSegment:(UIButton *)btn
{
    _btnRight.selected = NO;
    //书签
    if(_btnSegmentBookmark == btn)
    {
        _urlType = UrlTypeBookmark;
        [_btnRight setTitle:LocalizedString(@"bianji") forState:UIControlStateNormal];
        //如果没有书签
        if (_arrAllBookmark.count==0) {
            if([_tableView superview])
            {
                _viewNil.frame = _tableView.frame;
                [self.view addSubview:_viewNil];
                [_tableView removeFromSuperview];
            }
             _lableNil.text = LocalizedString(@"zanwushuqian");
            
        }
        else
        {
            if(![_tableView superview])
            {
                [self.view addSubview:_tableView];
                _tableView.frame = _viewNil.frame;
                [_viewNil removeFromSuperview];
            }
        }
        _btnSegmentHistory.enabled = YES;
        _btnSegmentBookmark.enabled = NO;
    }
    else
    {
        //历史
        _urlType = UrlTypeHistory;
        [_btnRight setTitle:LocalizedString(@"qingchu") forState:UIControlStateNormal];
        
        //如果历史数组没有初始化  说明是第一次点击历史.  从数据库拿历史数据
        if(!_arrAllHistory)
        {
            
            _arrAllHistory = [NSMutableArray arrayWithObjects:[NSMutableArray array], [NSMutableArray array], [NSMutableArray array], [NSMutableArray array], nil];
            [self upDateHistory];
        }
        
        //如果没有历史记录, 显示图片
        if (![self isHistory]) {
            if([_tableView superview])
            {
                _viewNil.frame = _tableView.frame;
                [self.view addSubview:_viewNil];
                [_tableView removeFromSuperview];
            }
            _lableNil.text = LocalizedString(@"zanwulishi");
        }
        else
        {
            if(![_tableView superview])
            {
                [self.view addSubview:_tableView];
                _tableView.frame = _viewNil.frame;
                [_viewNil removeFromSuperview];
            }
        }
        
        _btnSegmentHistory.enabled = NO;
        _btnSegmentBookmark.enabled = YES;
    }
    
    _btnSynchro.hidden = NO;
    
    _btnNewBookmark.hidden = YES;
    _btnNewFolder.hidden = YES;
    [_tableView setEditing:NO animated:NO];
    
    if([_tableView superview])
        [_tableView reloadData];
    
}

//点击历史头
- (void)onTouchHeader:(UIViewHeader *)viewHeader
{
    [_arrViewHeader enumerateObjectsUsingBlock:^(UIViewHeader* item, NSUInteger idx, BOOL *stop) {
        if (item==viewHeader) {
            viewHeader.selected = !viewHeader.selected;
        }
    }];
    
    [_tableView reloadSections:[NSIndexSet indexSetWithIndex:viewHeader.tag] withRowAnimation:UITableViewRowAnimationFade];
    
    if (viewHeader.selected && ((NSMutableArray *)_arrAllHistory[viewHeader.tag]).count>0) {

            [_tableView scrollToRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:viewHeader.tag] atScrollPosition:UITableViewScrollPositionTop animated:YES];
    }
}

/**
 *  点击同步按钮
 *
 *  未登录 跳转到登陆界面
 */
- (IBAction)onTouchBtnSynchro:(id)sender
{
    if ([UserManager shareUserManager].currUser)
    {
        _labelSynchro.text = LocalizedString(@"zhengzaitongbu_");

        [[SyncHelper shareSync] syncHistoryWithCompletion:^{
            //更新历史数据源
            _labelSynchro.text = [NSString stringWithFormat:@"%@%@",LocalizedString(@"shangcitongbu_"), [NSString stringWithTimeInterval:[[NSDate date] timeIntervalSince1970]]];
            [UserManager shareUserManager].currUser.syncBookmarkTime = (NSInteger)[[NSDate date] timeIntervalSince1970];
            [self upDateHistory];
        } fail:^(NSError *error) {
            _labelSynchro.text = LocalizedString(@"tongbushibai");
            //两秒后恢复
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                if([UserManager shareUserManager].currUser.syncBookmarkTime == 0)
                    _labelSynchro.text = LocalizedString(@"ninhaiweitongbu");
                else
                    _labelSynchro.text = [NSString stringWithFormat:@"%@%@",LocalizedString(@"shangcitongbu_"),[NSString stringWithTimeInterval:[UserManager shareUserManager].currUser.syncBookmarkTime]];
            });
        }];
        //更新书签数据源
        [[SyncHelper shareSync] syncBookmarkWithCompletion:^{
            _arrAllBookmark = [NSMutableArray arrayWithArray:[ADOBookmark queryWithParent_pkid:_myParen_pkid userId:[UserManager shareUserManager].currUser.uid]];
        } fail:^(NSError *error) {
            
        }];
        
        
        //更新tableView状态
        if(self.urlType == UrlTypeHistory) {
            [self onTouchSegment:_btnSegmentHistory];
        }
        else {
            
            [self onTouchSegment:_btnSegmentBookmark];
        }
        
    }
    else
    {
        UIControllerLogin *controllerLogin = [[UIControllerLogin alloc] initWithNibName:@"UIControllerLogin" bundle:nil];
        controllerLogin.fromController = FromControllerBookmarkHistory;
        [self.navigationController pushViewController:controllerLogin animated:YES];
    }
}

//点击新建收藏夹
- (IBAction)onTouchNewFolder:(id)sender {
    [self puthToUIControllerCreateBookmarkForNewType:typeNewFolder model:self.model];
}

//点击新建书签
- (IBAction)onTouchNewBookmark:(id)sender {
    [self puthToUIControllerCreateBookmarkForNewType:typeNewBookmark model:self.model];
}

-(void)puthToUIControllerCreateBookmarkForNewType:(Type)newType model:(ModelBookmark *)model
{
    UIControllerCreateBookmark *controller = [[UIControllerCreateBookmark alloc]initWithNibName:@"UIControllerCreateBookmark" bundle:nil];
    controller.type = newType;
    controller.delegate = self;
    controller.model = model;
    [self.navigationController pushViewController:controller animated:YES];
}

#pragma mark -------CreateBookmartDelegate
-(void)controller:(UIControllerCreateBookmark *)controller createBookmarkTitle:(NSString *)title link:(NSString *)link type:(Type)type modekBookmark:(ModelBookmark *)model selectionParen_pkid:(NSInteger)paren_pkid
{
    
    //新建书签或者是文件夹
    if (type == typeNewBookmark || type == typeNewFolder)
    {
        ModelBookmark *modelNew = [[ModelBookmark alloc]init];
        modelNew.parent_pkid = paren_pkid;
        modelNew.canEdit = YES;
        modelNew.title = title;
        modelNew.userid = [UserManager shareUserManager].currUser.uid;
        modelNew.sortIndex = [ADOBookmark queryMaxSortIndexWithParentPkid:paren_pkid userId:modelNew.userid]+1;
        if (type == typeNewBookmark)
        {
            modelNew.isFolder = NO;
            modelNew.link = link;
//            NSURL *url = [NSURL URLWithString:link];
//            model.icon = [NSString stringWithFormat:@"http://%@/favicon.ico", url.host];
        }
        else
        {
            modelNew.link = nil;
            modelNew.isFolder = YES;
            modelNew.icon = nil;
        }
        
        //如果添加成功
        modelNew.pkid = [ADOBookmark addModel:modelNew];
        if (modelNew.pkid>0)
        {
            
            [SVProgressHUD showSuccessWithStatus:LocalizedString(@"tianjiachenggong")];
            //如果是新增在本级文件夹里, 直接添加到数据源 显示.
            if (_myParen_pkid == paren_pkid){
            
                [_arrAllBookmark addObject:modelNew];
            
                
                //如果_tableview没有添加在视图上 则添加
                if (![_tableView superview]) {
                    _tableView.frame = _viewNil.frame;
                    [self.view addSubview:_tableView];
                    [_viewNil removeFromSuperview];
                }
                [_tableView reloadData];
            }
            //不是添加在本级文件夹,并是添加在了主文件夹里
            else if(modelNew.parent_pkid == 0)
            {
                
                [[NSNotificationCenter defaultCenter] postNotificationName:KNotificationDidAddItemToMianBookmark object:modelNew];
            }
            
        }
        else {
            [SVProgressHUD showSuccessWithStatus:LocalizedString(@"yicunzaixiangtongshuqian")];
        }
        
    }
    else
    {
        model.title = title;
        model.parent_pkid = paren_pkid;
        if (type == typeEditBookmark) {
            model.link = link;
        }
        //编辑成功
        if([ADOBookmark updateTitle:model.title link:model.link parentPkid:model.parent_pkid withPkid:model.pkid])
        {
            //如果修改后书签在本级  替换书签  否则.移除
            NSIndexPath *indexPath = [NSIndexPath indexPathForRow:[_arrAllBookmark indexOfObject:model] inSection:0];
            if(_myParen_pkid == paren_pkid)
            {
                //替换
                [_arrAllBookmark replaceObjectAtIndex:model.sortIndex withObject:model];
                [_tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
            }
            else
            {
                
                //移除
                [_arrAllBookmark removeObject:model];
                [_tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
                //如果移除后没有了数据源,  显示图片
                if(_arrAllBookmark.count == 0)
                {
                    [self.view addSubview:_viewNil];
                    _viewNil.frame = _tableView.frame;
                    _lableNil.text = LocalizedString(@"zanwushuqian");
                    [_tableView removeFromSuperview];
                }
                
                //从子文件夹移动到主文件的情况,要给主目录数据源增加这条目
                if(paren_pkid == 0)
                {
                    [[NSNotificationCenter defaultCenter] postNotificationName:KNotificationDidAddItemToMianBookmark object:model];
                }
                //移动到别的文件夹 还需要更新排序索引
                [ADOBookmark updateSort:[ADOBookmark queryMaxSortIndexWithParentPkid:model.parent_pkid userId:model.userid]+1 withPkid:model.pkid];
            }
        }
    }
}

#pragma mark -------altionSheetDelegate
- (void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex
{
    if (buttonIndex == 0) {
        [ADOHistory clearWithUserId:[UserManager shareUserManager].currUser.uid];
        
        //遍历最近浏览 删除服务器数据
        for (ModelHistory *modelHistory in _arrAllHistory[0]) {
            if(modelHistory.pkid_server)
            {
                [ModelSyncDelete addSyncDeleteWithBookmarkHistory:modelHistory syncDataType:SyncDataTypeHistory];
            }
        }
        
        for (NSMutableArray *arr in _arrAllHistory) {
            [arr removeAllObjects];
        }
        [self onTouchSegment:_btnSegmentHistory];
        [_tableView reloadData];
    }
}


#pragma mark - tableViewDelegate
-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    if (UrlTypeBookmark==_urlType || urlTypeFolder == _urlType) {
        return 1;
    }
    else {
        return _arrAllHistory.count;
    }
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    if (UrlTypeBookmark==_urlType || urlTypeFolder == _urlType) {
        
        return _arrAllBookmark.count;
    }
    else {
        return [_arrAllHistory[section] count];
    }
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *cellIdD = @"UICellBookmarkHisoty";
    
    UICellBookmarkHisoty *cell = [tableView dequeueReusableCellWithIdentifier:cellIdD];
    if (!cell) {
        cell = [[[NSBundle mainBundle] loadNibNamed:@"UICellBookmarkHisoty" owner:self options:nil] lastObject];
    }
    cell.cellSeparatorStyle = CellSeparatorStyleFill;
    //书签
    if (UrlTypeBookmark==_urlType || urlTypeFolder == _urlType) {
        ModelBookmark *model = _arrAllBookmark[indexPath.row];
        if (model.isFolder) {
            //文件夹
            cell.cellStyle = CellStyleFolder;
            cell.backgroundColor = [UIColor colorWithHexString:@"#f0f0f0"];
            cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
        }
        else
        {
            //书签
            cell.cellStyle = CellStyleNone;
            __weak UIImageView *kImageView = cell.imageViewLeftIcon;
            [cell.imageViewLeftIcon setImageWithURL:[NSURL URLWithString:model.icon] placeholderImage:[UIImage imageWithBundleFile:@"iPhone/Settings/Bookmark/ic_bookmark.png"] completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType)
            {
                if (image) {
                    
                    kImageView.image = [UIImage imageWithData:UIImagePNGRepresentation(image) scale:[UIScreen mainScreen].scale];
                }
            }];
        }
        cell.labelBookmarkTitle.text = model.title;
        cell.labelBookmarkDetail.text = model.link;
    }
    else
    {
        //历史
        NSArray *arrHistory = _arrAllHistory[indexPath.section];
        ModelHistory *model = arrHistory[indexPath.row];
        cell.backgroundColor = [UIColor whiteColor];
        cell.accessoryType = UITableViewCellAccessoryNone;
        __weak UIImageView *kImageView = cell.imageViewLeftIcon;
        [cell.imageViewLeftIcon setImageWithURL:[NSURL URLWithString:model.icon] placeholderImage:[UIImage imageWithBundleFile:@"iPhone/Settings/Bookmark/ic_history.png"] completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType)
         {
             if (image) {
                 
                 kImageView.image = [UIImage imageWithData:UIImagePNGRepresentation(image) scale:[UIScreen mainScreen].scale];
             }
         }];
       
        cell.labelBookmarkTitle.text = model.title;
        cell.labelBookmarkDetail.text = model.link;
        cell.clipsToBounds = YES;
        
    }
    
    //调整图片显示模式
    UIImage *imageTemp = cell.imageViewLeftIcon.image;
    if (imageTemp.size.width >= cell.imageViewLeftIcon.frame.size.width || imageTemp.size.height >= cell.imageViewLeftIcon.frame.size.height) {
        cell.imageViewLeftIcon.contentMode = UIViewContentModeCenter;
    }else{
        cell.imageViewLeftIcon.contentMode = UIViewContentModeScaleAspectFit;
    }
    return cell;
    
}

//点击事件
-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    if (self.urlType == UrlTypeBookmark || self.urlType == urlTypeFolder) {
        
        ModelBookmark *model = _arrAllBookmark[indexPath.row];
        
        if(_tableView.editing){
            if (model.isFolder) {
                [self puthToUIControllerCreateBookmarkForNewType:typeEditFolder model:model];
            }
            else
            {
                [self puthToUIControllerCreateBookmarkForNewType:typeEditBookmark model:model];
            }
        }
        else if(model.isFolder)
        {
            //如果点击的是文件夹, 进入次级界面
            UIControllerBookmarkHistory *controller = [[UIControllerBookmarkHistory alloc]initWithNibName:@"UIControllerBookmarkHistory" bundle:nil];
            controller.urlType = urlTypeFolder;
            controller.model = model;
            [self.navigationController pushViewController:controller animated:YES];
        }
        else
        {
           //进入页面
            [self.delegate controllerBookmarkHistory:self reqLink:model.link];
        }
    }
    else
    {
        NSArray *arrHistory = _arrAllHistory[indexPath.section];
        ModelHistory *model = arrHistory[indexPath.row];
        [self.delegate controllerBookmarkHistory:self reqLink:model.link];
    }
}

//编辑
-(void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath
{
    
    if (editingStyle == UITableViewCellEditingStyleDelete) {
        //书签
        if(self.urlType == UrlTypeBookmark || self.urlType == urlTypeFolder)
        {
            ModelBookmark *model = _arrAllBookmark[indexPath.row];
            
            //如果删除成功, 并pkid_server 有值
            if([ADOBookmark deleteWithPkid:model.pkid] && model.pkid_server)
            {
                [ModelSyncDelete addSyncDeleteWithBookmarkHistory:model syncDataType:SyncDataTypeBookmark];
            }
            [_arrAllBookmark removeObjectAtIndex:indexPath.row];
            [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
            //如果没有书签了 显示图片
            if(_arrAllBookmark.count == 0)
            {
                [self.view addSubview:_viewNil];
                _viewNil.frame = _tableView.frame;
                _lableNil.text = LocalizedString(@"zanwushuqian");
                [_tableView removeFromSuperview];
            }
            //如果是删除最后一行, 则不用进行排序.  这是非最后一行的情况
            else if(indexPath.row < _arrAllBookmark.count)
            {
                [self updeteOrderFromIndex:indexPath.row toIndex:_arrAllBookmark.count-1];
            }
            
            return;
        }
        else
        {
            NSMutableArray *arrHistory = _arrAllHistory[indexPath.section];
            ModelHistory *modelDelete = arrHistory[indexPath.row];
            
            BOOL isDelete = [ADOHistory deleteWithPkid:modelDelete.pkid];

            if (indexPath.section == 0) {
                
                if(isDelete && modelDelete.pkid_server)
                {
                    //最近访问 删除服务器历史
                    [ModelSyncDelete addSyncDeleteWithBookmarkHistory:modelDelete syncDataType:SyncDataTypeHistory];
                }
                //如果是在最近访问删除, 则同时删除历史记录.
                for (int i = 1; i<_arrAllHistory.count; i++) {
                    NSMutableArray *arrHistory = _arrAllHistory[i];
                    for (int j = 0 ; j<arrHistory.count; j++) {
                        ModelHistory *model = arrHistory[j];
                        if (modelDelete.pkid == model.pkid) {
                            
                            [arrHistory removeObjectAtIndex:j];
                            NSIndexPath *path = [NSIndexPath indexPathForRow:j inSection:i];
                            
                            [tableView deleteRowsAtIndexPaths:@[path] withRowAnimation:UITableViewRowAnimationFade];
                            //跳出循环
                            i = _arrAllBookmark.count;
                            break;
                        }
                    }
                }
            }
            else
            {
                //如果是删除的历史记录, 则同时删除最近访问.
                for (int i = 0 ; i<((NSMutableArray *)_arrAllHistory[0]).count; i++) {
                    ModelHistory *model = _arrAllHistory[0][i];
                    if (modelDelete.pkid == model.pkid)
                    {
                        if(isDelete && modelDelete.pkid_server)
                        {
                            //最近访问 删除服务器历史
                            [ModelSyncDelete addSyncDeleteWithBookmarkHistory:modelDelete syncDataType:SyncDataTypeHistory];
                        }
                        
                        [_arrAllHistory[0] removeObjectAtIndex:i];
                        
                        NSIndexPath *path = [NSIndexPath indexPathForRow:i inSection:0];
                        [tableView deleteRowsAtIndexPaths:@[path] withRowAnimation:UITableViewRowAnimationFade];
                        break;
                    }
                }
                
            }
            [arrHistory removeObjectAtIndex:indexPath.row];
            [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
            
            //如果有历史数据则结束, 如果没有则显示图片
            if (![self isHistory]) {
                [self.view addSubview:_viewNil];
                _viewNil.frame = _tableView.frame;
                _lableNil.text = LocalizedString(@"zanwulishi");
                [_tableView removeFromSuperview];
            }
           
        }
        
        
    }
    else if (editingStyle == UITableViewCellEditingStyleInsert) {
        // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view

        [tableView insertRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationAutomatic];
    }
}

//能否移动
-(BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath
{
    return YES;
}

//移动排序方法
- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath *)destinationIndexPath
{
    ModelBookmark *model = _arrAllBookmark[sourceIndexPath.row];
    [_arrAllBookmark removeObject:model];
    [_arrAllBookmark insertObject:model atIndex:destinationIndexPath.row];
    
    [self updeteOrderFromIndex:sourceIndexPath.row toIndex:destinationIndexPath.row];
}

//区头view
- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section
{
    if (UrlTypeBookmark==_urlType || urlTypeFolder == _urlType) {
        return nil;
    }
    else {
        return _arrViewHeader[section];
    }
}

//区头高度
- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    if (UrlTypeBookmark==_urlType || urlTypeFolder == _urlType) {
        return 0;
    }
    else {
        return 35;
    }
}

//
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (UrlTypeBookmark==_urlType || urlTypeFolder == _urlType) {
        return 44;
    }
    else {
//        if (indexPath.section==_currSectionIndex) {
//            return 44;
//        }
//        else {
//            return 0;
//        }
        UIViewHeader *viewHeader = _arrViewHeader[indexPath.section];
        if (viewHeader.selected)
            return 44;
        else
            return 0;
    }
}

- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section
{
    return 0;
}

- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath
{
    return YES;
}

//- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath
//{
//    ModelFavorite *model = nil;
//    if (UrlTypeBookmark==_urlType) {
//        model = _arrBookmark[indexPath.row];
//        
//        // TODO:同步操作
//        [[WKSync shareWKSync] syncDelWithDataType:WKSyncDataTypeFavorite fid_server:model.fid_server];
//        
//        [ADOFavorite deleteWithFid:model.fid];
//        [_delegate controllerBookmarkHistoryDidDeleteBookmark:self];
//        
//        [_arrBookmark removeObject:model];
//    }
//    else {
//        model = _arrArrHistory[indexPath.section][indexPath.row];
//        [ADOFavorite deleteWithFid:model.fid];
//        
//        // TODO:同步操作
//        [[WKSync shareWKSync] syncDelWithDataType:WKSyncDataTypeHistory fid_server:model.fid_server];
//        
//        [_arrArrHistory[indexPath.section] removeObject:model];
//    }
//    
//    [_tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationTop];
//    
//}

/**
 *  书签按数组顺序排序
 *
 *  @param from 需要重排序的起始位置
 *  @param to   需要重排序的结束位置
 */
-(void)updeteOrderFromIndex:(NSInteger)from toIndex:(NSInteger)to;
{
    NSInteger start =MIN(from, to);
    NSInteger end = MAX(from, to);
    
    /**
     *  移动过的书签重新设置排序索引
     */
    for (int i = start; i<=end; i++)
    {
        ModelBookmark *model = _arrAllBookmark[i];
        [ADOBookmark updateSort:i withPkid:model.pkid];
    }
    
    _arrAllBookmark = [NSMutableArray arrayWithArray:[ADOBookmark queryWithParent_pkid:_myParen_pkid userId:[UserManager shareUserManager].currUser.uid]];
    //查询重排序过的书签 替换掉原来位置的书签.
//    NSRange range = NSMakeRange(start, end - start + 1);
//    [_arrAllBookmark replaceObjectsInRange:range withObjectsFromArray:[ADOBookmark queryWithParent_pkid:_myParen_pkid fromSort:start toSort:end]];
}

/**
 *  是否有历史记录
 *
 *  @return bool
 */
-(BOOL)isHistory
{
    for (NSMutableArray *arrHhistory in _arrAllHistory) {
        if (arrHhistory.count>0) {
            return YES;
        }
    }
    return NO;
}

@end
