//
//  UIControllerAddProgram.m
//  ChinaBrowser
//
//  Created by David on 14/11/26.
//  Copyright (c) 2014年 KOTO Inc. All rights reserved.
//

#import "UIControllerAddProgram.h"

#import "UIViewNav.h"
#import "UIViewReminderEdit.h"

#import "ModelMode.h"
#import "ModelModeProgram.h"
#import "ModelProgram.h"

#import "ADOMode.h"
#import "ADOModeProgram.h"

#import "UIControllerProgramList.h"

@interface UIControllerAddProgram () <UITableViewDataSource, UITableViewDelegate>
{
    IBOutlet UITableView *_tableView;
    UIViewNav *_viewNav;
    UIViewReminderEdit *_viewReminderEdit;
    
    CGFloat _fMarginBottom;
    
    ModelProgram *_modelProgramSelected;
    ModelModeProgram *_modelModeProgramEdit;
}

@end

@implementation UIControllerAddProgram

- (void)setActionType:(ProgramActionType)actionType
{
    _actionType = actionType;
    
    [self updateWithProgramActionType];
}

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    
    _fMarginBottom = 0;
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillShowNotification:) name:UIKeyboardWillShowNotification object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillHideNotification:) name:UIKeyboardWillHideNotification object:nil];
    
    // ----------------
    _viewNav = [UIViewNav viewNav];
    _viewNav.title = self.title;
    
    UIButton *btnBack = [UIButton buttonWithType:UIButtonTypeCustom];
    [btnBack addTarget:self action:@selector(onTouchBack) forControlEvents:UIControlEventTouchUpInside];
    [btnBack setImage:[UIImage imageWithBundleFile:@"iPhone/back_0.png"] forState:UIControlStateNormal];
    [btnBack setImage:[UIImage imageWithBundleFile:@"iPhone/back_1.png"] forState:UIControlStateHighlighted];
    [btnBack sizeToFit];
    
    UIButton *btnSave = [UIButton buttonWithType:UIButtonTypeCustom];
    [btnSave setTitle:LocalizedString(@"baocun") forState:UIControlStateNormal];
    [btnSave setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    [btnSave setTitleColor:[UIColor grayColor] forState:UIControlStateHighlighted];
    [btnSave addTarget:self action:@selector(onTouchSave) forControlEvents:UIControlEventTouchUpInside];
    [btnSave sizeToFit];
    
    _viewNav.leftBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:btnBack];
    _viewNav.rightBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:btnSave];
    [self.view addSubview:_viewNav];
    
    _viewReminderEdit = [UIViewReminderEdit viewFromXib];
    _tableView.tableFooterView = _viewReminderEdit;
    
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        [self updateWithProgramActionType];
    });
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)layoutSubViewsWithInterfaceOrientation:(UIInterfaceOrientation)orientation
{
    [_viewNav resizeWithOrientation:orientation];
    
    CGRect rc = _tableView.frame;
    rc.origin = CGPointMake(0, _viewNav.bottom);
    rc.size = CGSizeMake(self.view.width, self.view.height-rc.origin.y-_fMarginBottom);
    _tableView.frame = rc;
    
//    if (_fMarginBottom>0) {
//        _tableView.contentOffset = CGPointMake(0, _tableView.contentSize.height-_tableView.height);
//    }
}

#pragma mark - keyboard notification
- (void)keyboardWillShowNotification:(NSNotification *)notifiercation
{
    CGRect rcKeyboard = [notifiercation.userInfo[UIKeyboardFrameEndUserInfoKey] CGRectValue];
    NSTimeInterval duration = [notifiercation.userInfo[UIKeyboardAnimationDurationUserInfoKey] doubleValue];
    UIViewAnimationCurve curve = [notifiercation.userInfo[UIKeyboardAnimationCurveUserInfoKey] integerValue];
    
    [UIView beginAnimations:nil context:nil];
    [UIView setAnimationCurve:curve];;
    [UIView setAnimationDuration:duration];
    
    _fMarginBottom = MIN(rcKeyboard.size.height, rcKeyboard.size.width);
    
    CGRect rc = _tableView.frame;
    rc.size.height = self.view.height-_tableView.top-_fMarginBottom;
    _tableView.frame = rc;
    
    if (_fMarginBottom>0) {
        _tableView.contentOffset = CGPointMake(0, _tableView.contentSize.height-_tableView.height);
    }
    
    [UIView commitAnimations];
}

- (void)keyboardWillHideNotification:(NSNotification *)notifiercation
{
    NSTimeInterval duration = [notifiercation.userInfo[UIKeyboardAnimationDurationUserInfoKey] doubleValue];
    UIViewAnimationCurve curve = [notifiercation.userInfo[UIKeyboardAnimationCurveUserInfoKey] integerValue];
    
    [UIView beginAnimations:nil context:nil];
    [UIView setAnimationCurve:curve];;
    [UIView setAnimationDuration:duration];
    
    _fMarginBottom = 0;
    
    CGRect rc = _tableView.frame;
    rc.size.height = self.view.height-_tableView.top-_fMarginBottom;
    _tableView.frame = rc;
    
    [UIView commitAnimations];
}

#pragma mark - private methods
- (void)onTouchBack
{
    [self.navigationController popViewControllerAnimated:YES];
}

- (void)onTouchSave
{
    [self.view endEditing:YES];
    
    switch (_actionType) {
        case ProgramActionTypeAddMode:
        {
            if (!_modelProgramSelected) {
                [SVProgressHUD showErrorWithStatus:LocalizedString(@"qingxuanzeneirong")];
                return;
            }
            if (_viewReminderEdit.modelName.length<=0) {
                [SVProgressHUD showErrorWithStatus:LocalizedString(@"qingshurumoshiming")];
                return;
            }
            
            ModelMode *mode = [ModelMode model];
            mode.userid = [UserManager shareUserManager].currUser.uid;
            mode.name = _viewReminderEdit.modelName;
            mode.sysRecommend = NO;
            
            NSInteger modePkid = [ADOMode addModel:mode];
            if (modePkid>0) {
                mode.pkid = modePkid;
                
                ModelModeProgram *modeProgram = [ModelModeProgram model];
                modeProgram.modePkid = mode.pkid;
                modeProgram.modelProgram = _modelProgramSelected;
                modeProgram.repeatMode = _viewReminderEdit.repeatMode;
                modeProgram.time = _viewReminderEdit.time;
                modeProgram.on = YES;
                
                NSInteger modeProgramPkid = [ADOModeProgram addModel:modeProgram];
                if (modeProgramPkid>0) {
                    modeProgram.pkid = modeProgramPkid;
                    
                    if (_callbackDidAddMode) {
                        _callbackDidAddMode(mode);
                    }
                    
                    if (_callbackDidAddModeProgram) {
                        _callbackDidAddModeProgram(modeProgram);
                    }
                }
            }
        }break;
        case ProgramActionTypeAddModeProgram:
        {
            if (!_modelProgramSelected) {
                [SVProgressHUD showErrorWithStatus:LocalizedString(@"qingxuanzeneirong")];
                return;
            }
            
            ModelModeProgram *modeProgram= [ADOModeProgram queryWithModePkid:_modePkid programPkidServer:_modelProgramSelected.pkid_server time:_viewReminderEdit.time];
            
            if (modeProgram) {
                modeProgram.modelProgram = _modelProgramSelected;
                modeProgram.repeatMode = _viewReminderEdit.repeatMode;
                modeProgram.time = _viewReminderEdit.time;
                modeProgram.on = YES;
                
                [ADOModeProgram updateProgramPkidServer:modeProgram.modelProgram.pkid_server withPkid:modeProgram.pkid];
                [ADOModeProgram updateRepeatMode:modeProgram.repeatMode time:modeProgram.time on:modeProgram.on withPkid:modeProgram.pkid];
            }
            else {
                modeProgram = [ModelModeProgram model];
                
                modeProgram.modePkid = _modePkid;
                modeProgram.modelProgram = _modelProgramSelected;
                modeProgram.repeatMode = _viewReminderEdit.repeatMode;
                modeProgram.time = _viewReminderEdit.time;
                modeProgram.on = YES;
                
                NSInteger modeProgramPkid = [ADOModeProgram addModel:modeProgram];
                if (modeProgramPkid>0) {
                    modeProgram.pkid = modeProgramPkid;
                    if (_callbackDidAddModeProgram) {
                        _callbackDidAddModeProgram(modeProgram);
                    }
                }
            }
        }break;
        case ProgramActionTypeEditModeProgram:
        {
            if (_modelProgramSelected) {
                ModelModeProgram *modeProgram = [ADOModeProgram queryWithModePkid:_modePkid programPkidServer:_modelProgramSelected.pkid_server time:_viewReminderEdit.time exceptPkid:_modelModeProgramEdit.pkid];
                if (modeProgram) {
                    // 存在重复的=》删除一条记录
                    [ADOModeProgram deleteWithPkid:modeProgram.pkid];
                    
                }
                
                if (_modelModeProgramEdit.modelProgram.pkid_server!=_modelProgramSelected.pkid_server) {
                    /**
                     *  如果改变了 节目 则需要对应更新外键
                     */
                    [ADOModeProgram updateProgramPkidServer:_modelProgramSelected.pkid_server withPkid:_modelModeProgramEdit.pkid];
                }
                
                _modelModeProgramEdit.modelProgram = _modelProgramSelected;
            }
            
            
            _modelModeProgramEdit.repeatMode = _viewReminderEdit.repeatMode;
            _modelModeProgramEdit.time = _viewReminderEdit.time;
            BOOL flag = [ADOModeProgram updateRepeatMode:_modelModeProgramEdit.repeatMode
                                                    time:_modelModeProgramEdit.time
                                                      on:_modelModeProgramEdit.on
                                                withPkid:_modelModeProgramEdit.pkid];
            if (flag) {
                if (_callbackDidEditModeProgram) {
                    _callbackDidEditModeProgram(_modelModeProgramEdit);
                }
            }
        }break;
        default:
            break;
    }
    
    [self.navigationController popViewControllerAnimated:YES];
}

- (void)updateWithProgramActionType
{
    if (ProgramActionTypeNone==_actionType || !_viewReminderEdit) {
        return;
    }
    
    _viewReminderEdit.actionType = _actionType;
    
    switch (_actionType) {
        case ProgramActionTypeAddMode:
        case ProgramActionTypeAddModeProgram:
        {
            NSDateComponents *dateComp = [[NSCalendar currentCalendar] components:NSHourCalendarUnit|NSMinuteCalendarUnit|NSSecondCalendarUnit fromDate:[NSDate date]];
            NSInteger time = dateComp.hour*3600+dateComp.minute*60+dateComp.second;
            [_viewReminderEdit setTime:time];
            [_viewReminderEdit setRepeatMode:RemindRepeatModeEveryDay];
        }break;
        case ProgramActionTypeEditModeProgram:
        {
            if (_modelModeProgramEdit) {
                [_viewReminderEdit setRepeatMode:_modelModeProgramEdit.repeatMode];
                [_viewReminderEdit setTime:_modelModeProgramEdit.time];
                [_viewReminderEdit setCanSelectTime:_modelModeProgramEdit.modelProgram.parent_pkid_server==0];
            }
        }break;
        default:
            break;
    }
}

#pragma mark - public methos
- (void)setEditModelModeProgram:(ModelModeProgram *)modelModeProgram
{
    _modePkid = modelModeProgram.modePkid;
    _modelModeProgramEdit = modelModeProgram;
    UITableViewCell *cell = [_tableView cellForRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:0]];
    cell.detailTextLabel.text = _modelModeProgramEdit.modelProgram.title;
    
    if (_viewReminderEdit) {
        [_viewReminderEdit setRepeatMode:_modelModeProgramEdit.repeatMode];
        [_viewReminderEdit setTime:_modelModeProgramEdit.time];
        [_viewReminderEdit setCanSelectTime:_modelModeProgramEdit.modelProgram.parent_pkid_server==0];
    }
}

#pragma mark - UITableViewDataSource, UITableViewDelegate
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return 1;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *Identifier = @"UICellAddProgram";
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:Identifier];
    if (!cell) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:Identifier];
        cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
        cell.textLabel.text = LocalizedString(@"diantai_zixun");
        cell.detailTextLabel.textColor = [UIColor darkGrayColor];
    }
    NSString *detailText = _modelModeProgramEdit.modelProgram.title;
    if (_modelProgramSelected) {
        detailText = _modelProgramSelected.title;
    }
    else if (_modelModeProgramEdit) {
        detailText = _modelModeProgramEdit.modelProgram.title;
    }
    else {
        detailText = LocalizedString(@"qingxuanzeneirong");
    }
    cell.detailTextLabel.text = detailText;
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [self.view endEditing:YES];
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    UIControllerProgramList *controllerProgramList = [[UIControllerProgramList alloc] initWithNibName:@"UIControllerProgramList" bundle:nil];
    
    /**
     *  设置 选中的 ModelProgram
     */
    NSInteger programPkidServer = _modelModeProgramEdit.modelProgram.pkid_server;
    if (_modelProgramSelected) {
        programPkidServer = _modelProgramSelected.pkid_server;
    }
    controllerProgramList.selectProgramServerId = programPkidServer;
    [controllerProgramList setCallbackSelectProgram:^(ModelProgram *modelProgram) {
        _modelProgramSelected = modelProgram;
        
        /**
         *  选择后更新 节目名称
         */
        UITableViewCell *cell = [_tableView cellForRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:0]];
        cell.detailTextLabel.text = _modelProgramSelected.title;
        
        // 是否不能选择时间（如果是电台，并且是总频道，则不能选择时间，需要禁用）
        BOOL canNotSelectTime = (ProgramSrcTypeFM == _modelProgramSelected.srcType
                              && 0<_modelProgramSelected.parent_pkid_server);
        [_viewReminderEdit setCanSelectTime:!canNotSelectTime];
        if (canNotSelectTime) {
            [_viewReminderEdit setTime:_modelProgramSelected.time];
        }
//        else {
//            NSDateComponents *dateComp = [[NSCalendar currentCalendar] components:NSHourCalendarUnit|NSMinuteCalendarUnit|NSSecondCalendarUnit fromDate:[NSDate date]];
//            NSInteger time = dateComp.hour*3600+dateComp.minute*60+dateComp.second;
//            [_viewReminderEdit setTime:time];
//        }
    }];
    /**
     *  新增预约和编辑预约的时候需要检查选中的预约是否已经存在
     */
    if (ProgramActionTypeAddModeProgram==_actionType
        || ProgramActionTypeEditModeProgram==_actionType) {
        [controllerProgramList setCallbackCheckIsExist:^BOOL(ModelProgram *modelProgram) {
            BOOL flag = NO;
            if (modelProgram.parent_pkid_server>0) {
                flag = [ADOModeProgram isExistWithModePkid:_modePkid programPkidServer:modelProgram.pkid_server time:modelProgram.time];
            }
            else {
                flag = [ADOModeProgram isExistWithModePkid:_modePkid programPkidServer:modelProgram.pkid_server];
            }
            return flag;
        }];
    }
    
    controllerProgramList.title = LocalizedString(@"diantai_zixun");
    [self.navigationController pushViewController:controllerProgramList animated:YES];
}

@end
