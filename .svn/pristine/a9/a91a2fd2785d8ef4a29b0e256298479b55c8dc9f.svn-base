//
//  UIViewEraserSet.m
//  KTBrowser
//
//  Created by David on 14-2-26.
//  Copyright (c) 2014年 KOTO Inc. All rights reserved.
//

#import "UIViewEraserSet.h"

#import <QuartzCore/QuartzCore.h>

@interface UIViewEraserSet ()

- (void)setup;

@end

@implementation UIViewEraserSet

- (id)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        // Initialization code
        [self setup];
    }
    return self;
}

- (id)initWithCoder:(NSCoder *)aDecoder
{
    self = [super initWithCoder:aDecoder];
    if (self) {
    }
    return self;
}

- (void)awakeFromNib
{
    [super awakeFromNib];
    
    [self setup];
}

+ (UIViewEraserSet *)viewEraserSetFromXib
{
    return [[NSBundle mainBundle] loadNibNamed:@"UIViewEraserSet" owner:self options:nil][0];
}

- (void)setEraserWidth:(CGFloat)width
{
    _slider.value = MAX(width, _slider.minimumValue);
    CGRect rc = _viewWrap.bounds;
    rc.size.width = rc.size.height = _slider.value;
    _viewWrap.bounds = rc;
    _viewWrap.layer.cornerRadius = rc.size.width/2;
}

-(void)animation
{
    CGRect rect =  _viewBottom.frame;
    float heightScreen =  self.frame.size.height;
   

    
    //当没有加入到父视图的时候执行执行显示
    if(!self.superview)
    {
        rect.origin.y = heightScreen;
        _viewBottom.frame = rect;
        
        [UIView animateWithDuration:0.3 animations:^{
            CGRect rect =  _viewBottom.frame;
            rect.origin.y = heightScreen-rect.size.height;
            _viewBottom.frame = rect;
            
            _bgImageVIew.alpha = 0.5;
            
        }];
    }
    else
    {
        //当以及加入到父视图时 执行消失
        [UIView animateWithDuration:0.3 animations:^{
            CGRect rect =  _viewBottom.frame;
            rect.origin.y = heightScreen;
            _viewBottom.frame = rect;
            
            _bgImageVIew.alpha = 0;
        } completion:^(BOOL finished) {
            [self removeFromSuperview];
        }];
    }

}

//横竖屏调整UI rect
-(void)autoLayout
{
    CGRect rect = [UIScreen mainScreen].bounds;
    
//    rect.size.height = [UIScreen mainScreen].bounds.size.width;
//    rect.size.width = [UIScreen mainScreen].bounds.size.height;
    self.frame = rect;
    _bgImageVIew.frame = rect;
    
    rect = _viewBottom.frame;
//    float oldWidth = rect.size.width;
    rect.size.width = self.bounds.size.width;
    _viewBottom.frame = rect;

}

#pragma mark - private
- (void)setup
{
    
    //如果是横屏调整布局
    
    if(!(UIInterfaceOrientationIsPortrait([UIApplication sharedApplication].statusBarOrientation)))
    {
        [self autoLayout];
    }

    //添加动画效果
    [self animation];
    [self bringSubviewToFront:_viewBottom];
    
    //背景添加手势
    _bgImageVIew.userInteractionEnabled = YES;
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(animation)];
    [_bgImageVIew addGestureRecognizer:tap];
    
    CGPoint center = _slider.center;
    center.y = _viewWrap.center.y;
    _slider.center = center;
    
    _viewWrap.layer.cornerRadius = _viewWrap.bounds.size.width/2;
    _viewWrap.layer.borderWidth = 0.5;
    _viewWrap.layer.borderColor = [UIColor lightGrayColor].CGColor;
    
    
    [_slider setMinimumValue:4];
    [_slider setMaximumValue:MIN(_viewWrap.bounds.size.height, _viewWrap.bounds.size.width)];
    [_slider addTarget:self action:@selector(sliderValuechanged:) forControlEvents:UIControlEventValueChanged];
    
}

-(void)sliderValuechanged:(UISlider *)sender
{
    CGRect rc = _viewWrap.bounds;
    rc.size.width = rc.size.height = sender.value;
    _viewWrap.bounds = rc;
    _viewWrap.layer.cornerRadius = rc.size.width / 2;
    
    if ([_delegate respondsToSelector:@selector(viewEraserSetWidth:)]) {
        [_delegate viewEraserSetWidth:_slider.value];
    }
}

@end
