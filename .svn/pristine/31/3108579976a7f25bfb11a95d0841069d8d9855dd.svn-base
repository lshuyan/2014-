//
//  UIViewPreviewTab.m
//  Browser-wzdh
//
//  Created by David on 14-5-30.
//  Copyright (c) 2014å¹´ KOTO Inc. All rights reserved.
//

#import "UIViewPreviewTab.h"

#import "BlockUI.h"

@interface UIViewPreviewTab () <UIGestureRecognizerDelegate>

- (void)panGesture:(UIPanGestureRecognizer *)panGesture;

@end

@implementation UIViewPreviewTab
{
    BOOL _isDirectionX;
    CGAffineTransform _tfOrigin;
}

- (id)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        // Initialization code
        
        UIPanGestureRecognizer *panGesture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(panGesture:)];
        panGesture.delegate = self;
        [self addGestureRecognizer:panGesture];
        
        [self handleControlEvent:UIControlEventTouchUpInside withBlock:^(id sender) {
            if ([_delegate respondsToSelector:@selector(viewPreviewTabWillSelect:)])
                 [_delegate viewPreviewTabWillSelect:self];
        }];
    }
    return self;
}

/*
// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
- (void)drawRect:(CGRect)rect
{
    // Drawing code
}
*/

- (void)panGesture:(UIPanGestureRecognizer *)panGesture
{
    UIScrollView *superScrollView = (UIScrollView *)_viewPreview.superview;
    if (UIGestureRecognizerStateBegan==panGesture.state) {
        CGPoint velocity = [panGesture velocityInView:self];
        _isDirectionX = fabsf(velocity.x)>fabsf(velocity.y);
        _tfOrigin = _viewPreview.transform;
        superScrollView.scrollEnabled = _isDirectionX;
    }
    else if (UIGestureRecognizerStateChanged==panGesture.state) {
        if (!_isDirectionX) {
            _viewPreview.transform = CGAffineTransformTranslate(_tfOrigin, 0, [panGesture translationInView:self].y);
            CGFloat trans = _viewPreview.transform.ty-_tfOrigin.ty;
            _labelTitle.transform = CGAffineTransformMakeTranslation(0, trans);
            _DEBUG_LOG(@"%f", _viewPreview.transform.ty-_tfOrigin.ty);
        }
    }
    else if (UIGestureRecognizerStateEnded==panGesture.state) {
        UIScrollView *superScrollView = (UIScrollView *)_viewPreview.superview;
        superScrollView.scrollEnabled = YES;
        _DEBUG_LOG(@"%f", [panGesture velocityInView:self].y);
        if (fabsf([panGesture velocityInView:self].y)>1500) {
            [UIView animateWithDuration:0.2 animations:^{
                /*
                CGAffineTransform tf = _tfOrigin;
                tf.ty = fabsf([panGesture velocityInView:self].y)/[panGesture velocityInView:self].y*(_viewPreview.superview.height+_viewPreview.height)/2;
                _viewPreview.transform = tf;
                 
                _labelTitle.transform = CGAffineTransformMakeTranslation(0, translate>0?(_labelTitle-_labelTitle.frame.origin.y):(-_labelTitle.frame.origin.y));
                 
                [_delegate viewPreviewTabWillRemove:self];
                */
                _viewPreview.transform = _tfOrigin;
                _labelTitle.transform = CGAffineTransformIdentity;
            }];
        }
        else {
            CGFloat translate = _viewPreview.transform.ty-_tfOrigin.ty;
            if (fabsf(translate)>self.height*0.5) {
                [UIView animateWithDuration:0.2 animations:^{
                    CGAffineTransform tf = _tfOrigin;
                    tf.ty = fabsf(translate)/translate*(_viewPreview.superview.height+_viewPreview.height)/2;
                    _viewPreview.transform = tf;
                    
                    CGFloat labelY = _labelTitle.frame.origin.y-_labelTitle.transform.ty;
                    _labelTitle.transform = CGAffineTransformMakeTranslation(0, translate>0?(_labelTitle.superview.height-labelY):(-labelY-_labelTitle.height));
                } completion:^(BOOL finished) {
                    [_delegate viewPreviewTabWillRemove:self];
                }];
            }
            else {
                [UIView animateWithDuration:0.2 animations:^{
                    _viewPreview.transform = _tfOrigin;
                    _labelTitle.transform = CGAffineTransformIdentity;
                }];
            }
        }
    }
}


+ (instancetype)viewPreviewTabWith:(UIView *)preview
{
    UIViewPreviewTab *viewPreviewTab = [[UIViewPreviewTab alloc] initWithFrame:preview.bounds];
    viewPreviewTab.autoresizingMask = UIViewAutoresizingFlexibleHeight|UIViewAutoresizingFlexibleWidth;
    UILabel *labelTitle = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, preview.bounds.size.width, 30)];
    labelTitle.backgroundColor = [UIColor clearColor];
    labelTitle.textColor = [UIColor darkGrayColor];
    labelTitle.highlightedTextColor = [UIColor whiteColor];
    labelTitle.numberOfLines = 0;
//    labelTitle.layer.cornerRadius = 15;
//    labelTitle.clipsToBounds = YES;
//    labelTitle.backgroundColor = [[UIColor randomColor] colorWithAlphaComponent:0.6];
//    viewPreviewTab.backgroundColor = [[UIColor randomColor] colorWithAlphaComponent:0.6];
    labelTitle.textAlignment = UITextAlignmentCenter;
    labelTitle.font = [UIFont systemFontOfSize:12];
    viewPreviewTab.labelTitle = labelTitle;
    viewPreviewTab.viewPreview = preview;
    [preview addSubview:viewPreviewTab];
    return viewPreviewTab;
}

- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer
{
    return YES;
}

@end
