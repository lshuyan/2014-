//
//  UIControllerMain.m
//  ChinaBrowser
//
//  Created by David on 14-8-30.
//  Copyright (c) 2014年 KOTO Inc. All rights reserved.
//

#import "UIControllerMain.h"

#import "UIViewLaunch.h"

#import "UIViewHome.h"
#import "UIScrollViewHome.h"
#import "UIScrollViewTrans.h"
#import "UIScrollViewTravel.h"
#import "UIScrollViewRecommend.h"
#import "UIScrollViewApp.h"
#import "UITableViewMode.h"

#import "UIViewNews.h"
#import "UIViewRecommendSubCate.h"

#import "UIViewTopBar.h"
#import "UIViewBottomBar.h"
#import "UIViewBarEventDelegate.h"

#import "UIViewMenu.h"
#import "UIViewBookmarkPopAction.h"
#import "UIViewSearchOption.h"
#import "UIViewSearchPanel.h"
#import "UIViewPopSetBrightness.h"
#import "UIViewFindInWebPage.h"
#import "UIViewPopShareOption.h"

#import "UIControlItemApp.h"

#import "UIControllerLanguage.h"
#import "UIControllerTrans.h"
#import "UIControllerQRCode.h"
#import "UIControllerScreenshot.h"
#import "UIControllerDraw.h"
#import "UIControllerDrawView.h"
#import "UIControllerLogin.h"
#import "UIControllerSetSkin.h"
#import "UIControllerTravelDetail.h"
#import "UIControllerUserInfo.h"
#import "UIControllerDesktopStyle.h"
#import "UIControllerBookmarkHistory.h"
#import "UIControllerSysSettings.h"
#import "UIControllerLabelsList.h"
#import "UIControllerManuallyAdd.h"
#import "UIControllerAddProgram.h"
#import "UIControllerRename.h"
#import "UIControllerModeDetail.h"

#import "ModelTravelProvince.h"

#import "QRCodeProtocol.h"
#import "CheckVersion.h"
#import "ADOApp.h"
#import "ADOHistory.h"
#import "ADOBookmark.h"

#import "UserManager.h"

#import "ModelSearchEngine.h"
#import "ModelApp.h"
#import "ModelMode.h"
#import "ModelProgram.h"
#import "ModelPlayItem.h"

#import "UIImage+Resize.h"
#import "UIWebViewAdditions.h"

#import "CBAudioPlayer.h"

#import "UIWebPage.h"
#import "WebPageManage.h"

#import <AGCommon/NSString+Common.h>

@interface UIControllerMain ()
<
UIViewBarEventDelegate,
UIViewMenuDelegate,
UIViewBookmarkPopActionDelegate,
UIViewSearchOptionDelegate,
UIScrollViewTransDelegate,
UIScrollViewTravelDelegate,
UIScrollViewRecommendDelegate,
UIScrollViewAppDelegate,
UITableViewModeDelegate,
UIViewNewsDelegate,
UIViewRecommendSubCateDelegate,
QRCodeProtocol,
UIControllerScreenshotDelegate,
UIControllerSetSkinDelegate,
UIControllerTravelDetailDelegate,
UIControllerBookmarkHistoryDelegate,
UIViewSearchPanelDelegate,
UIViewFindInWebPageDelegate,
AppLaunchDelegate,
WebPageManageDelegate
>

@end

@implementation UIControllerMain
{
    IBOutlet UIViewTopBar *_viewTopBar;
    IBOutlet UIViewBottomBar *_viewBottomBar;
    
    IBOutlet UIViewHome *_viewHome;
    IBOutlet UIScrollViewTrans *_scrollViewTrans;
    IBOutlet UIScrollViewTravel *_scrollViewTravel;
    IBOutlet UIScrollViewRecommend *_scrollViewRecommend;
    IBOutlet UIScrollViewApp *_scrollViewApp;
    IBOutlet UITableViewMode *_tableViewMode;
    
    /**
     *  使用 __weak 的好处：_viewMenu 显示的时候有值，消失后自动变为 nil
     */
    __weak UIViewMenu *_viewMenu;
    __weak UIViewSearchPanel *_viewSearchPanel;
    __weak UIViewFindInWebPage *_viewFindInWebPage;
    
    // 取消编辑
    UIButton *_btnCancelEditApp;
    
    // -------- 网页相关
    WebPageManage *_webManager;
    UIWebPage *_webPage;
}

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    [AppLaunchUtil shareAppLaunch].delegate = self;;
    
    // Do any additional setup after loading the view.
    /**
     *  从服务器下载 搜索引擎配置文件
     */
    [AppSetting fetchSeachEngineWithCompletion:^{
        _viewTopBar.searchEngine = [AppSetting shareAppSetting].searchEngine;
    }];
    /**
     *  从服务器下载 分享选项
     */
    [AppSetting fetchShareItemWithCompletion:nil];
    
    // ----------------------
    [self.view setBgImageWithScaleAspectFillImage:[AppSetting shareAppSetting].skinImage];
    
    _viewTopBar.alpha =
    _viewBottomBar.alpha =
    _viewHome.alpha = 0;
    
    // 注册通知
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(didChangedLanguageNotification:)
                                                 name:kNotificationDidChangedAppLan
                                               object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(didChangedSearchEngineNotification:)
                                                 name:KNotificationDidChangedSearchEngine
                                               object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(didLoginNotification:)
                                                 name:KNotificationDidLogin
                                               object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(didLogoutNotification:)
                                                 name:KNotificationDidLogout
                                               object:nil];
    
    
    _webManager = [[WebPageManage alloc] init];
    _webManager.delegate = self;
    _webPage = [_webManager newWebPageAndReturnWithFrame:[self mainFrame]];
    _webPage.autoresizingMask = _viewHome.autoresizingMask;
    
    [[UIWebPage appearance] setProgressColor:RGBCOLOR(255, 12, 100)];
    
    [_viewTopBar setNumberOfWinds:1 animated:NO];
    [_viewBottomBar setNumberOfWinds:1 animated:NO];
    
    if ([AppLaunchUtil shareAppLaunch].shouldLaunchProgram) {
        // 启动节目(可能是：播放电台、打开新闻列表、打开网站)
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            
            [UIView animateWithDuration:0.5 animations:^{
                _viewTopBar.hidden =
                _viewBottomBar.hidden =
                _viewHome.hidden = NO;
                
                _viewTopBar.alpha =
                _viewBottomBar.alpha =
                _viewHome.alpha = 1;
            } completion:^(BOOL finished) {
                
                switch ([AppLaunchUtil shareAppLaunch].program.srcType) {
                    case ProgramSrcTypeFM:
                    {
                        [CBAudioPlayer playWithItem:[ModelPlayItem modelWithTitle:[AppLaunchUtil shareAppLaunch].program.title
                                                                             link:[AppLaunchUtil shareAppLaunch].program.link
                                                                               fm:[AppLaunchUtil shareAppLaunch].program.fm
                                                                             icon:nil]];
                    }break;
                    case ProgramSrcTypeRecommendCate:
                    {
                        [[AppLaunchUtil shareAppLaunch].delegate appLaunchOpenRecommendCateId:[AppLaunchUtil shareAppLaunch].program.recommendCateId
                                                                                     cateName:[AppLaunchUtil shareAppLaunch].program.title];
                    }break;
                    case ProgramSrcTypeWeb:
                    {
                        [[AppLaunchUtil shareAppLaunch].delegate appLaunchOpenLink:[AppLaunchUtil shareAppLaunch].program.link];
                    }break;
                    default:
                        break;
                }
            }];
        });
    }
    else {
        // 启动显示大图
        UIViewLaunch *viewLaunch = [[UIViewLaunch alloc] init];
        [viewLaunch showInView:self.view duration:4 didDimissCompletion:^{
            
            [UIView animateWithDuration:0.5 animations:^{
                _viewTopBar.hidden =
                _viewBottomBar.hidden =
                _viewHome.hidden = NO;
                
                _viewTopBar.alpha =
                _viewBottomBar.alpha =
                _viewHome.alpha = 1;
            } completion:^(BOOL finished) {
            }];
        }];
    }
}

- (void)dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - private methods
// ---------------------------------- 各种通知 事件 -----------------
- (void)didChangedLanguageNotification:(NSNotification *)notification
{
    [_viewTopBar updateByLanguage];
    [_scrollViewTrans updateByLanguage];
    [_scrollViewTravel updateByLanguage];
    [_scrollViewRecommend updateByLanguage];
    [_scrollViewApp updateByLanguage];
    [_tableViewMode updateByLanguage];
    
    [AppSetting fetchSeachEngineWithCompletion:^{
        _viewTopBar.searchEngine = [AppSetting shareAppSetting].searchEngine;
    }];
    [AppSetting fetchShareItemWithCompletion:nil];
}

- (void)didChangedSearchEngineNotification:(NSNotification *)notification
{
    _viewTopBar.searchEngine = [AppSetting shareAppSetting].searchEngine;
}

- (void)didLoginNotification:(NSNotification *)notification
{
    [_scrollViewApp reloadCustomApp];
    [_tableViewMode reloadCustomMode];
}

- (void)didLogoutNotification:(NSNotification *)notification
{
    [_scrollViewApp reloadCustomApp];
    [_tableViewMode reloadCustomMode];
}

// ---------------------------------- 私有 事件 -----------------
/**
 *  根据电池栏方向 重新 布局视图
 *
 *  @param orientation 电池栏方向
 */
- (void)layoutSubViewsWithInterfaceOrientation:(UIInterfaceOrientation)orientation
{
    // _viewTopBar
    CGRect rc = _viewTopBar.frame;
    rc.origin = CGPointZero;
    rc.size.width = self.view.width;
    rc.size.height = 44;
    if (IsiOS7|IsiOS8) {
        if (![UIApplication sharedApplication].statusBarHidden) {
            CGSize sizeStatusBar = [UIApplication sharedApplication].statusBarFrame.size;
            rc.size.height += MIN(sizeStatusBar.width, sizeStatusBar.height);
        }
    }
    _viewTopBar.frame = rc;
    
    // _btnCancelEditApp
    if (_scrollViewApp.edit) {
        // _viewBottomBar
        rc = _viewBottomBar.frame;
        rc.origin.x = 0;
        rc.size.width = self.view.width;
        rc.origin.y = self.view.height;
        _viewBottomBar.frame = rc;
        
        rc = _btnCancelEditApp.frame;
        rc.origin.x = 0;
        rc.size.height = IsPortrait?_viewBottomBar.height:32;
        rc.size.width = self.view.width;
        rc.origin.y = self.view.height-rc.size.height;
        _btnCancelEditApp.frame = rc;
    }
    else {
        // _viewBottomBar
        rc = _viewBottomBar.frame;
        rc.origin.x = 0;
        rc.size.width = self.view.width;
        rc.origin.y = self.view.height-_viewBottomBar.height;
        if (!IsPortrait || _viewFindInWebPage) {
            // 横屏状态、页内查找功能启用 时，底部工具栏在屏幕底部，不在可视区
            rc.origin.y = self.view.height;
        }
        _viewBottomBar.frame = rc;
    }
    
    if (_viewHome.superview) {
        _viewHome.frame = [self mainFrame];
    }
    else {
        _webPage.frame = [self mainFrame];
    }
    
    if (_viewSearchPanel) {
        _viewSearchPanel.frame = [self mainFrame];
    }
}

/**
 *  得到主体内容的显示区域
 *
 *  @return CGRect
 */
- (CGRect)mainFrame
{
    CGRect rc = CGRectZero;
    if (_scrollViewApp.edit) {
        rc = CGRectMake(0, _viewTopBar.bottom, self.view.width, _btnCancelEditApp.top-_viewTopBar.bottom);
    }
    else {
        rc = CGRectMake(0, _viewTopBar.bottom, self.view.width, _viewBottomBar.top-_viewTopBar.bottom);
    }
    return rc;
}

- (void)recordHistory
{
    if ([AppSetting shareAppSetting].noSaveHistory) return;
    
}

- (void)recordHistoryWithLink:(NSString *)link
{
#warning TODO: 测试浏览网页产生历史记录
    ModelHistory *model = [ADOHistory queryWithLink:link userId:[UserManager shareUserManager].currUser.uid];
    NSURL *url = [NSURL URLWithString:link];
    if (model) {
        model.link = link;
        model.time = [[NSDate date] timeIntervalSince1970];
        model.times++;
        model.title = [NSString stringWithFormat:@"“%@“已浏览%d次，最后访问时间戳为：%d", [url host], model.times, model.time];
        [ADOHistory updateTime:model.time times:model.times title:model.title withPkid:model.pkid];
    }
    else
    {
        model = [ModelHistory model];
        model.userid = [UserManager shareUserManager].currUser.uid;
        model.link = link;
        model.time = [[NSDate date] timeIntervalSince1970];
        model.times = 1;
        model.title = [NSString stringWithFormat:@"“%@“已浏览%d次，最后访问时间戳为：%d", [url host], model.times, model.time];
        [ADOHistory addModel:model];
    }
}

- (void)recordHistoryWithURL:(NSURL *)url
{
    [self recordHistoryWithLink:url.absoluteString];
}

- (void)handleLink:(NSString *)link urlOpenStyle:(UrlOpenStyle)style;
{
    [self backToWebPage];
    
    _viewTopBar.textField.text = link;
    _DEBUG_LOG(@"%s:%@", __FUNCTION__, link);
    [self recordHistoryWithLink:link];
    
    switch (style) {
        case UrlOpenStyleCurrent:
        {
            [_webPage load:link];
        }break;
        case UrlOpenStyleNewTab:
        {
            [_webPage removeFromSuperview];
            _webPage = [_webManager newWebPageAndReturnWithFrame:[self mainFrame]];
            [_webPage load:link];
            [self.view insertSubview:_webPage belowSubview:_viewBottomBar];
            
            _viewBottomBar.numberOfWinds++;
            _viewTopBar.numberOfWinds++;
        }break;
        case UrlOpenStyleBackground:
        {
            UIWebPage *webPage = [_webManager newWebPageAndReturnWithFrame:[self mainFrame]];
            [webPage load:link];
        }break;
            
        default:
            break;
    }
}

- (void)backToHome
{
    _viewTopBar.viewTopBarStatus = ViewTopBarStatusHome;
    
    [_webPage removeFromSuperview];
    _viewHome.frame = [self mainFrame];
    [self.view insertSubview:_viewHome belowSubview:_viewBottomBar];
}

- (void)backToWebPage
{
    _viewTopBar.viewTopBarStatus = ViewTopBarStatusWeb;
    
    [_viewHome removeFromSuperview];
    _webPage.frame = [self mainFrame];
    [self.view insertSubview:_webPage belowSubview:_viewBottomBar];
}

/**
 *  是否 网页模式（是否正在浏览网页）
 *
 *  @return
 */
- (BOOL)isWebPageMode
{
    return nil==_viewHome.superview;
}

// ---------------------------------- 工具栏事件 -----------------
#pragma mark - UIViewBarEventDelegate
- (void)view:(UIView *)view barEvent:(BarEvent)barEvent barItem:(UIView *)barItem
{
    _scrollViewApp.edit = NO;
    
    switch (barEvent) {
        // --------- _viewTopBar、_viewBottomBar公共事件
        case BarEventGoBack:
        {
            if ([self isWebPageMode]) {
                if (_webPage.canBack) {
                    [_webPage goBack];
                }
                else {
                    [self backToHome];
                }
            }
            else {
                [_viewHome popToRootWithCompletion:nil];
            }
        }break;
        case BarEventGoForward:
        {
            if ([self isWebPageMode]) {
                [_webPage goForward];
            }
        }break;
        case BarEventHome:
        {
            if ([self isWebPageMode]) {
                [self backToHome];
            }
            else if([_viewHome canPop]) {
                [_viewHome popToRootWithCompletion:nil];
            }
            else {
                
            }
        }break;
        case BarEventMenu:
        {
            UIViewMenu *viewMenu = [UIViewMenu viewFromXib];
            _viewMenu = viewMenu;
            viewMenu.delegate = self;
            CGRect rc = [barItem convertRect:barItem.bounds toView:barItem.window.rootViewController.view];
            CGPoint point;
            DockDirection dockDirection;
            if (IsPortrait) {
                point = CGPointMake(CGRectGetMidX(rc), _viewBottomBar.top);
                dockDirection = DockDirectionBottom;
            }
            else {
                point = CGPointMake(CGRectGetMidX(rc), _viewTopBar.bottom);
                dockDirection = DockDirectionTop;
            }
            [viewMenu showInView:self.view centerOfDock:point dockDirection:dockDirection];
            
            [viewMenu updateStateWithLink:_webPage.superview?[_webPage link]:nil];
        }break;
        case BarEventWindows:
        {
            
        }break;
            
        // ------------------------
        case BarEventRefresh:
        {
            [_webPage reload];
        }break;
        case BarEventStop:
        {
            [_webPage stop];
        }break;
        case BarEventQRCode:
        {
            UIControllerQRCode *controller = [self.storyboard instantiateViewControllerWithIdentifier:@"UIControllerQRCode"];
            controller.title = LocalizedString(@"saoerweima");
            controller.delegateQRCode = self;
            [self presentModalViewController:controller animated:YES];
        }break;
        case BarEventBookmark:
        {
            UIViewBookmarkPopAction *viewBookmarkPopAction = [UIViewBookmarkPopAction viewFromXib];
            viewBookmarkPopAction.delegate = self;
            [viewBookmarkPopAction updateStateWithLink:_webPage.link];
            CGRect rc = [barItem convertRect:barItem.bounds toView:barItem.window.rootViewController.view];
            CGPoint point  = CGPointMake(CGRectGetMidX(rc), _viewTopBar.bottom);
            [viewBookmarkPopAction showInView:self.view centerOfDock:point];
        }break;
        case BarEventSearchOption:
        {
            [_viewTopBar.textField resignFirstResponder];
            
            UIViewSearchOption *viewSearchOption = [UIViewSearchOption viewFromXib];
            viewSearchOption.delegate = self;
            CGRect rc = [barItem convertRect:barItem.bounds toView:barItem.window.rootViewController.view];
            CGPoint point  = CGPointMake(CGRectGetMidX(rc), _viewTopBar.bottom);
            [viewSearchOption showInView:self.view centerOfDock:point];
        }break;
        
        // ---------- 地址栏输入框事件
        case BarEventDidBeginInputUrl:
        {
            _viewTopBar.viewTopBarStatus = ViewTopBarStatusInput;
            
            if (_viewSearchPanel) return;
            
            CGRect rc = [self mainFrame];
            rc.size.height+=_viewBottomBar.height;
            _viewSearchPanel = [UIViewSearchPanel viewFromXib];
            _viewSearchPanel.delegate = self;
            _viewSearchPanel.frame = rc;
            // 防止动画未结束就点击取消
            _viewTopBar.btnCancel.userInteractionEnabled = NO;
            [_viewSearchPanel showInView:self.view completion:^{
                _viewTopBar.btnCancel.userInteractionEnabled = YES;
                [_viewHome removeFromSuperview];
                [_webPage removeFromSuperview];
            }];
        }break;
        case BarEventDidEndInputUrl:
        {
            _viewTopBar.viewTopBarStatus = ViewTopBarStatusWeb;
            [_viewSearchPanel dismiss];
            
            [self backToWebPage];
            
            NSString *link = _viewTopBar.textField.text;
            if ([link isURLString]) {
                link = [link urlEncodeNormal];
                if (![[link lowercaseString] hasPrefix:@"http://"] && ![[link lowercaseString] hasPrefix:@"https://"]) {
                    link = [@"http://" stringByAppendingString:link];
                }
                [self handleLink:link urlOpenStyle:UrlOpenStyleCurrent];
            }
            else {
                link = [_viewTopBar.searchEngine.link stringByAppendingString:[link urlEncodeNormal]];
            }
            
            [self handleLink:link urlOpenStyle:UrlOpenStyleCurrent];
        }break;
        case BarEventCancelInputUrl:
        {
            // 将搜索面板给隐藏了
            _viewTopBar.viewTopBarStatus = _viewTopBar.viewTopBarStatusBeforeInput;
            [_viewTopBar.textField resignFirstResponder];
            [_viewSearchPanel dismiss];
            
            if (ViewTopBarStatusHome==_viewTopBar.viewTopBarStatus) {
                [self backToHome];
            }
            else if (ViewTopBarStatusWeb==_viewTopBar.viewTopBarStatus) {
                [self backToWebPage];
            }
        }break;
            
        default:
            break;
    }
}

// ---------------------------------- 菜单事件 -----------------
#pragma mark - UIViewMenuDelegate
- (void)viewMenu:(UIViewMenu *)viewMenu seletedMenuItem:(MenuItem)menuItem
{
    switch (menuItem) {
        case MenuItemBookmark:
        {
            if (viewMenu.viewMenuItemBookmark.selected) {
                
            }
            else {
                
            }
        }break;
        case MenuItemBookmarkHistory:
        {
            UIControllerBookmarkHistory * controller = [[UIControllerBookmarkHistory alloc]initWithNibName:@"UIControllerBookmarkHistory" bundle:nil];
            controller.delegate = self;
            [self.navigationController pushViewController:controller animated:YES];
        }break;
        case MenuItemLanguage:
        {
            UIControllerLanguage *controller = [[UIControllerLanguage alloc] initWithNibName:@"UIControllerLanguage" bundle:nil];
            controller.title = LocalizedString(@"yuyanshezhi");
            [self.navigationController pushViewController:controller animated:YES];
        }break;
        case MenuItemRefresh:
        {
            [_webPage reload];
        }break;
        case MenuItemStop:
        {
            [_webPage stop];
        }break;
        case MenuItemScreenshot:
        {
            UIControllerScreenshot *controller = [UIControllerScreenshot controllerFromXib];
            controller.delegate = self;
            controller.screenshotType = ScreenshotDraw;
            controller.imageOriginal = [UIImage imageFromView:self.view];
            [self.navigationController pushViewController:controller animated:NO];
        }break;
        case MenuItemFindInPage:
        {
            UIViewFindInWebPage *viewFindInWebPage = [UIViewFindInWebPage viewFromXib];
            viewFindInWebPage.delegate = self;
            [viewFindInWebPage showInView:_viewTopBar completion:^{
                [viewFindInWebPage.textField becomeFirstResponder];
            }];
            _viewFindInWebPage = viewFindInWebPage;
        }break;
        case MenuItemShare:
        {
            UIViewPopShareOption *viewPop = [UIViewPopShareOption viewFromXib];
            viewPop.labelTitle.text = LocalizedString(@"fenxiangdao");
            [viewPop setCallbackSelectShareType:^(ShareType shareType) {
                NSString *content = _webPage.superview?[_webPage title]:@"苦逼程序员 测试内容";
                content = [content stringByAppendingFormat:@" 时间戳:%d", (NSInteger)[[NSDate date] timeIntervalSince1970]];
                SendShareContent(shareType,
                                 [UIImage imageFromView:_webPage.superview?_webPage:self.view opaque:YES],
                                 content,
                                 content,
                                 _webPage.superview?[_webPage link]:nil);
            }];
            [viewPop showInView:self.view completion:nil];
        }break;
        case MenuItemProfile:
        {
            //个人中心
            //如果有用户信息 直接跳转到个人中心 否则进入登陆
            if ([UserManager shareUserManager].currUser) {
               
                UIControllerUserInfo *controllerUserInfo = [[UIControllerUserInfo alloc] initWithNibName:@"UIControllerUserInfo" bundle:nil];
                controllerUserInfo.fromController = FromControllerRoot;
                if(IsiPad)
                {
                    controllerUserInfo.modalPresentationStyle = UIModalPresentationFormSheet;
                    UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:controllerUserInfo];
                    nav.modalPresentationStyle = UIModalPresentationFormSheet;
                    nav.navigationBarHidden = YES;
                    
                    [self presentViewController:nav animated:YES completion:nil];
                }
                else
                {
                    self.navigationController.navigationBarHidden = YES;
                    [self.navigationController pushViewController:controllerUserInfo animated:YES];
                    
                }
            }
            else
            {
                UIControllerLogin *ccontrollerLogin = [[UIControllerLogin alloc] initWithNibName:@"UIControllerLogin" bundle:nil];
                ccontrollerLogin.fromController = FromControllerRoot;
                if(IsiPad) {
                    ccontrollerLogin.modalPresentationStyle = UIModalPresentationFormSheet;
                    UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:ccontrollerLogin];
                    nav.modalPresentationStyle = UIModalPresentationFormSheet;
                    nav.navigationBarHidden = YES;
                    [self presentViewController:nav animated:YES completion:nil];
                    
                }
                else
                {
                    [self.navigationController pushViewController:ccontrollerLogin animated:YES];
                }
            }
        }break;
        case MenuItemNoImageMode:
        {
            BOOL noImageMode = [AppSetting shareAppSetting].noImageMode;
            [AppSetting shareAppSetting].noImageMode = !noImageMode;
        }break;
        case MenuItemFullscreenMode:
        {
            BOOL fullscreenMode = [AppSetting shareAppSetting].fullscreenMode;
            [AppSetting shareAppSetting].fullscreenMode = !fullscreenMode;
        }break;
        case MenuItemSetBrightness:
        {
            UIViewPopSetBrightness *viewPop = [UIViewPopSetBrightness viewFromXib];
            viewPop.labelTitle.text = LocalizedString(@"liangdutiaojie");
            [viewPop showInView:self.view completion:nil];
        }break;
        case MenuItemNoSaveHistory:
        {
            BOOL noSaveHistory = [AppSetting shareAppSetting].noSaveHistory;
            [AppSetting shareAppSetting].noSaveHistory = !noSaveHistory;
        }break;
        case MenuItemQRCode:
        {
            UIControllerQRCode *controller = [self.storyboard instantiateViewControllerWithIdentifier:@"UIControllerQRCode"];
            controller.delegateQRCode = self;
            controller.title = LocalizedString(@"saoerweima");
            [self presentModalViewController:controller animated:YES];
        }break;
        case MenuItemSkinManage:
        {
            UIControllerSetSkin *controller = [self.storyboard instantiateViewControllerWithIdentifier:@"UIControllerSetSkin"];
            controller.title = LocalizedString(@"pifuguanli");
            controller.delegate = self;
            [self.navigationController pushViewController:controller animated:YES];
        }break;
        case MenuItemDesktopStyle:
        {
            UIControllerDesktopStyle *controller = [self.storyboard instantiateViewControllerWithIdentifier:@"UIControllerDesktopStyle"];
            controller.title = LocalizedString(@"zhuomianyangshi");
            
            [self.navigationController pushViewController:controller animated:YES];
        }break;
        case MenuItemSystemSettings:
        {
            UIControllerSysSettings *controller = [self.storyboard instantiateViewControllerWithIdentifier:@"UIControllerSysSettings"];
            controller.title = LocalizedString(@"xitongshezhi");
            [self.navigationController pushViewController:controller animated:YES];
        }break;
        case MenuItemDownload:
        {
            
        }break;
        case MenuItemFeedback:
        {
            
        }break;
        case MenuItemSaveTraffic:
        {
            
        }break;
        case MenuItemCheckVersion:
        {
            [CheckVersion checkVersionAtLaunch:NO];
        }break;
        case MenuItemExit:
        {
            
        }break;
            
        default:
            break;
    }
    
    _DEBUG_LOG(@"%s:%d", __FUNCTION__, menuItem);
}

// ---------------------------------- 点击地址栏书签按钮 事件 -----------------
#pragma mark - UIViewBookmarkPopActionDelegate
- (void)viewBookmarkPopAction:(UIViewBookmarkPopAction *)viewBookmarkPopAction bookmarkPopAction:(BookmarkPopAction)bookmarkPopAction
{
    switch (bookmarkPopAction) {
        case BookmarkPopActionAddBookmark:
        {
            ModelBookmark *model = [ModelBookmark model];
            model.userid = [UserManager shareUserManager].currUser.uid;
            model.lan = [LocalizationUtil currLanguage];
            model.title = _webPage.title;
            model.link = _webPage.link;
            model.isFolder = NO;
            model.parent_pkid = 0;
            /**
             *  放在根目录
             */
            model.sortIndex = [ADOBookmark queryMaxSortIndexWithParentPkid:model.parent_pkid userId:[UserManager shareUserManager].currUser.uid]+1;
            NSURL *url = [NSURL URLWithString:model.link];
            model.icon = [NSString stringWithFormat:@"http://%@/favicon.ico", url.host];
            
            NSInteger pkid = [ADOBookmark addModel:model];
            if (pkid>0) {
                model.pkid = pkid;
                
                [SVProgressHUD showSuccessWithStatus:LocalizedString(@"yitianjiadaoshuqian")];
            }
        }break;
        case BookmarkPopActionRemoveBookmark:
        {
            if ([ADOApp deleteWithWebAppWithLink:_webPage.link userId:[UserManager shareUserManager].currUser.uid]) {
                [SVProgressHUD showSuccessWithStatus:LocalizedString(@"yicongshuqianyichu")];
            }
        }break;
        case BookmarkPopActionAddHomeApp:
        {
            if ([_scrollViewApp canAdd]) {
                ModelApp *model = [ModelApp model];
                model.title = _webPage.title;
                model.link = _webPage.link;
                model.appType = AppTypeWeb;
                NSInteger pkid = [ADOApp addModel:model];
                if (pkid>0) {
                    model.pkid = pkid;
                    [_scrollViewApp addAppWithModel:model animated:YES];
                    
                    [SVProgressHUD showSuccessWithStatus:LocalizedString(@"yitianjiadaoshouyeyingyongping")];
                }
            }
            else {
                [SVProgressHUD showErrorWithStatus:LocalizedString(@"shouyeyingyongshuliangyidadaoshangxian")];
            }
        }break;
        case BookmarkPopActionRemoveHome:
        {
            if ([ADOApp deleteWithWebAppWithLink:_webPage.link userId:[UserManager shareUserManager].currUser.uid]) {
                [SVProgressHUD showSuccessWithStatus:LocalizedString(@"yicongshouyeyingyongpingshanchu")];
            }
        }break;
        default:
            break;
    }
}

// ---------------------------------- 搜索选项相关 事件 -----------------
#pragma mark - UIViewSearchOptionDelegate
- (void)viewSearchOption:(UIViewSearchOption *)viewSearchOption didSelectSearchEngine:(ModelSearchEngine *)searchEngine
{
    [_viewTopBar setSearchEngine:searchEngine];
    [_viewTopBar.textField becomeFirstResponder];
    _viewTopBar.viewTopBarStatus = ViewTopBarStatusInput;
}

// ---------------------------------- 情景翻译分类 事件 -----------------
#pragma mark - UIScrollViewTransDelegate
- (void)scrollViewTrans:(UIScrollViewTrans *)scrollViewTrans onTouchCate:(ModelSentenceCate *)modelCate
{
    UIControllerTrans *controllerTrans = [UIControllerTrans controllerFromXib];
    controllerTrans.title = LocalizedString(@"qingjingfanyi");
    controllerTrans.modelCate = modelCate;
    [self.navigationController pushViewController:controllerTrans animated:YES];
}

- (void)scrollViewTrans:(UIScrollViewTrans *)scrollViewTrans reqLink:(NSString *)link
{
    [self handleLink:link urlOpenStyle:UrlOpenStyleCurrent];
}

// ---------------------------------- 旅游模块 -----------------
#pragma mark - UIScrollViewTravelDelegate
- (void)scrollViewTravel:(UIScrollViewTravel *)scrollViewTravel reqLink:(NSString *)link
{
    [self handleLink:link urlOpenStyle:UrlOpenStyleCurrent];
}

- (void)scrollViewTravel:(UIScrollViewTravel *)scrollViewTravel selectProvince:(ModelTravelProvince *)province
{
    UIControllerTravelDetail *controller = [UIControllerTravelDetail controllerFromXib];
    controller.delegate = self;
    controller.provinceId = province.provinceId;
    controller.imageUrl = province.image;
    controller.imageSize = province.imageSize;
    controller.title = province.name;
    [self.navigationController pushViewController:controller animated:YES];
}

// ---------------------------------- 旅游模块 -----------------
#pragma mark - UIControllerTravelDetailDelegate
- (void)controllerTravelDetail:(UIControllerTravelDetail *)controllerTravelDetail reqLink:(NSString *)link
{
    [self handleLink:link urlOpenStyle:UrlOpenStyleCurrent];
}

// -------------------------------- 书签历史记录
#pragma mark - UIControllerBookmarkHistoryDelegate
- (void)controllerBookmarkHistory:(UIControllerBookmarkHistory *)controllerBookmarkHistory reqLink:(NSString *)link
{
    [self.navigationController popToRootViewControllerAnimated:YES];
    [self handleLink:link urlOpenStyle:UrlOpenStyleCurrent];
}

// ---------------------------------- 推荐屏 -----------------
#pragma mark - UIScrollViewRecommendDelegate
- (void)scrollViewRecommend:(UIScrollViewRecommend *)scrollViewRecommend reqLink:(NSString *)link
{
    [self handleLink:link urlOpenStyle:UrlOpenStyleCurrent];
}

- (void)scrollViewRecommend:(UIScrollViewRecommend *)scrollViewRecommend reqNewsWithCateId:(NSInteger)cateId cateName:(NSString *)cateName;
{
    UIViewNews *viewNews = [UIViewNews viewFromXib];
    viewNews.cateId = cateId;
    viewNews.cateName = cateName;
    viewNews.delegate = self;
    [_viewHome pushView:viewNews completion:^{
        [viewNews refreshData];
    }];
}

- (void)scrollViewRecommend:(UIScrollViewRecommend *)scrollViewRecommend reqSubCateWithCateId:(NSInteger)cateId
{
    UIViewRecommendSubCate *viewRecommendSubCate = [UIViewRecommendSubCate viewFromXib];
    viewRecommendSubCate.cateId = cateId;
    viewRecommendSubCate.delegate = self;
    [_viewHome pushView:viewRecommendSubCate completion:^{
        [viewRecommendSubCate refreshData];
    }];
}

// ---------------------------------- 推荐屏 新闻列表 -----------------
#pragma mark - UIViewNewsDelegate
- (void)viewNews:(UIViewNews *)viewNews reqLink:(NSString *)link
{
    [self handleLink:link urlOpenStyle:UrlOpenStyleCurrent];
}

// ---------------------------------- 推荐屏 子分类 -----------------
#pragma mark - UIViewRecommendSubCateDelegate
- (void)viewRecommendSubCate:(UIViewRecommendSubCate *)viewRecommendSubCate reqLink:(NSString *)link
{
    [self handleLink:link urlOpenStyle:UrlOpenStyleCurrent];
}

// ---------------------------------- 应用屏 -----------------
#pragma mark - UIScrollViewAppDelegate
- (void)scrollViewApp:(UIScrollViewApp *)scrollViewApp openModel:(ModelApp *)model
{
    switch (model.appType) {
        case AppTypeWeb:
        {
            [self handleLink:model.link urlOpenStyle:UrlOpenStyleCurrent];
        }break;
        case AppTypeNative:
        {
            
        }break;
        case AppTypeFunc:
        {
            
        }break;
            
        default:
            break;
    }
}

- (void)scrollViewApp:(UIScrollViewApp *)scrollViewApp edit:(BOOL)edit
{
    [_viewHome setScrollEnable:!edit];
    [_viewTopBar setEditingApp:edit];
    
    if (edit) {
        _btnCancelEditApp = [UIButton buttonWithType:UIButtonTypeCustom];
        [_btnCancelEditApp setTitle:LocalizedString(@"wancheng") forState:UIControlStateNormal];
        [_btnCancelEditApp setTitleColor:[UIColor darkGrayColor] forState:UIControlStateNormal];
        [_btnCancelEditApp setTitleColor:[UIColor grayColor] forState:UIControlStateHighlighted];
        _btnCancelEditApp.backgroundColor = [UIColor colorWithWhite:1 alpha:1];
        [_btnCancelEditApp addTarget:self action:@selector(onTouchCancelEditApp) forControlEvents:UIControlEventTouchUpInside];
        CGRect rc = _viewBottomBar.frame;
        if (!IsPortrait) {
            rc.size.height = 32;
        }
        rc.origin.y = self.view.height-rc.size.height;
        
        _btnCancelEditApp.frame = rc;
        _btnCancelEditApp.transform = CGAffineTransformMakeTranslation(0, _btnCancelEditApp.height);
        [self.view addSubview:_btnCancelEditApp];
        
        [UIView animateWithDuration:0.3 animations:^{
            _btnCancelEditApp.transform = CGAffineTransformIdentity;
            CGRect rc = _viewBottomBar.frame;
            rc.origin.y = self.view.height;
            _viewBottomBar.frame = rc;
            
            _viewHome.frame = [self mainFrame];
        }];
    }
    else {
        [UIView animateWithDuration:0.3 animations:^{
            _btnCancelEditApp.transform = CGAffineTransformMakeTranslation(0, _btnCancelEditApp.height);
            
            CGRect rc = _viewBottomBar.frame;
            rc.origin.y = self.view.height-(IsPortrait?_viewBottomBar.height:0);
            _viewBottomBar.frame = rc;
            
            _viewHome.frame = [self mainFrame];
        } completion:^(BOOL finished) {
            [_btnCancelEditApp removeFromSuperview];
            _btnCancelEditApp = nil;
        }];
    }
}

- (void)scrollViewAppWillAddItem:(UIScrollViewApp *)scrollViewAp
{
    UIControllerLabelsList *controller = [[UIControllerLabelsList alloc] initWithNibName:@"UIControllerLabelsList" bundle:[NSBundle mainBundle]];
    controller.callbackAddApp = ^(ModelApp *model){
        
        [_scrollViewApp addAppWithModel:model animated:NO];
    };
    controller.callbackIsExistApp = ^(ModelApp *model) {
        return [_scrollViewApp isExistWithType:model.appType link:model.link urlSchemes:model.urlSchemes];
    };
    controller.callbackCanAddApp = ^{
        return [_scrollViewApp canAdd];
    };
    controller.callbackOpen = ^(ModelApp *model) {
        [self.navigationController popToRootViewControllerAnimated:YES];
        [self scrollViewApp:_scrollViewApp openModel:model];
    };
    [self.navigationController pushViewController:controller animated:YES];
}

- (void)scrollViewApp:(UIScrollViewApp *)scrollViewApp willEditItem:(ModelApp *)model viewAppItem:(UIControlItemApp *)viewAppItem
{
    UIControllerManuallyAdd *manuallyAdd = [[UIControllerManuallyAdd alloc] init];
    manuallyAdd.callbackDidEdit = ^(ModelApp *editModel){
        if ([ADOApp updateModel:editModel]) {
            viewAppItem.labelTitle.text = model.title;
        }
    };
    manuallyAdd.editApp = model;
    manuallyAdd.title = LocalizedString(@"bianji");
    [self.navigationController pushViewController:manuallyAdd animated:YES];
    
    _DEBUG_LOG(@"%s", __FUNCTION__);
}

- (void)onTouchCancelEditApp
{
    _scrollViewApp.edit = NO;
}

// ---------------------------------- 个性化定制(定时提醒) -----------------
#pragma mark - UITableViewModeDelegate
- (void)tableViewModeWillAdd:(UITableViewMode *)tableViewMode
{
    // 新增的模式，一定不是 当前选中的模式，所以不用操作 FM通知 模块，如果需求是新建模式后就选择该模式，则必须要 操作 FM通知 模块
    UIControllerAddProgram *controller = [[UIControllerAddProgram alloc] initWithNibName:NSStringFromClass([UIControllerAddProgram class]) bundle:nil];
    controller.title = LocalizedString(@"xinjianmoshi");
    controller.actionType = ProgramActionTypeAddMode;
    [controller setCallbackDidAddMode:^(ModelMode *modelMode) {
        [_tableViewMode addMode:modelMode];
    }];
    [self.navigationController pushViewController:controller animated:YES];
}

- (void)tableViewMode:(UITableViewMode *)tableViewMode willRenameName:(NSString *)name
{
    UIControllerRename *controllerRename = [[UIControllerRename alloc] initWithNibName:@"UIControllerRename" bundle:nil];
    controllerRename.title = LocalizedString(@"chongmingming");
    controllerRename.text = name;
    [controllerRename setCallbackDidEdit:^(NSString *text) {
        [_tableViewMode setEditingModeName:text];
    }];
    [self.navigationController pushViewController:controllerRename animated:YES];
}

- (void)tableViewMode:(UITableViewMode *)tableViewMode showDetailMode:(ModelMode *)modelMode
{
    UIControllerModeDetail *controllerModeDetail = [[UIControllerModeDetail alloc] initWithNibName:@"UIControllerModeDetail" bundle:nil];
    controllerModeDetail.modelMode = modelMode;
    controllerModeDetail.title = modelMode.name;
    [controllerModeDetail setCallbackGetCurrModePkid:^NSInteger{
        return _tableViewMode.currModePkid;
    }];
    [controllerModeDetail setCallbackDidUpdateMode:^(NSInteger modePkid) {
        [_tableViewMode updatePListIfNeedWithModePkid:modePkid];
    }];
    [self.navigationController pushViewController:controllerModeDetail animated:YES];
}

// ---------------------------------- 二维码扫描结果 事件 -----------------
#pragma mark - QRCodeProtocol
- (void)controller:(UIViewController *)controller didReadContent:(NSString *)content
{
    [controller dismissViewControllerAnimated:YES completion:^{
        NSString *link = content;
        if ([link isURLString]) {
            link = [link urlEncodeNormal];
            if (![[link lowercaseString] hasPrefix:@"http://"] && ![[link lowercaseString] hasPrefix:@"https://"]) {
                link = [@"http://" stringByAppendingString:link];
            }
            [self handleLink:link urlOpenStyle:UrlOpenStyleCurrent];
        }
        else {
            link = [_viewTopBar.searchEngine.link stringByAppendingString:[link urlEncodeNormal]];
        }
        
        [self handleLink:link urlOpenStyle:UrlOpenStyleCurrent];
    }];
}

// ---------------------------------- 截图 --------
#pragma mark - UIControllerScreenshotDelegate
- (void)controller:(UIControllerScreenshot *)controller didCaptureImage:(UIImage *)image
{
    UIControllerDrawView *vc = [UIControllerDrawView UIControllerDrawViewFromXib];
    vc.bgImge = image;
    [self.navigationController pushViewController:vc animated:NO];
}

- (void)image:(UIImage *)image didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo
{
    if (error) {
        [SVProgressHUD showErrorWithStatus:error.localizedRecoverySuggestion];
    }
    else {
        [SVProgressHUD showSuccessWithStatus:LocalizedString(@"tupianbaocunchenggong")];
    }
}

// ---------------------------------- 皮肤设置 --------
#pragma mark - UIControllerSetSkinDelegate
- (void)controllerSetSkinDidChanageSkin:(UIControllerSetSkin *)controllerSetSkin
{
    [self.view setBgImageWithScaleAspectFillImage:[AppSetting shareAppSetting].skinImage];
    _DEBUG_LOG(@"%s", __FUNCTION__);
}

// ---------------------------------- 搜索面板 --------
#pragma mark - UIViewSearchPanelDelegate
- (void)viewSearchPanel:(UIViewSearchPanel *)viewSearchPanel reqLink:(NSString *)link
{
    [self handleLink:link urlOpenStyle:UrlOpenStyleCurrent];
}

- (void)viewSearchPanelWillDismiss:(UIViewSearchPanel *)viewSearchPanel
{
    _viewTopBar.viewTopBarStatus = _viewTopBar.viewTopBarStatusBeforeInput;
    [_viewTopBar.textField resignFirstResponder];
    
    if (ViewTopBarStatusHome==_viewTopBar.viewTopBarStatus) {
        [_webPage removeFromSuperview];
        _viewHome.frame = [self mainFrame];
        [self.view insertSubview:_viewHome belowSubview:_viewBottomBar];
    }
    else if (ViewTopBarStatusWeb==_viewTopBar.viewTopBarStatus) {
        [_viewHome removeFromSuperview];
        _webPage.frame = [self mainFrame];
        [self.view insertSubview:_webPage belowSubview:_viewBottomBar];
    }
    
    _viewTopBar.userInteractionEnabled = NO;
    [_viewSearchPanel dismissWithCompletion:^{
        _viewTopBar.userInteractionEnabled = YES;
    }];
}

// ---------------------------------- 页内查找 --------
#pragma mark - UIViewFindInWebPageDelegate
- (void)viewFindInWebPageDidBegin:(UIViewFindInWebPage *)viewFindInWebPage
{
    CGRect rc = _viewBottomBar.frame;
    rc.origin.y = self.view.height;
    [UIView animateWithDuration:0.35 animations:^{
        _viewBottomBar.frame = rc;
        _webPage.frame = [self mainFrame];
    }];
}

- (void)viewFindInWebPageDidEnd:(UIViewFindInWebPage *)viewFindInWebPage
{
    CGRect rc = _viewBottomBar.frame;
    rc.origin.y = self.view.height-(IsPortrait?_viewBottomBar.height:0);
    [UIView animateWithDuration:0.35 animations:^{
        _viewBottomBar.frame = rc;
        _webPage.frame = [self mainFrame];
    }];
}

- (void)viewFindInWebPage:(UIViewFindInWebPage *)viewFindInWebPage findWithKeyword:(NSString *)keyword
{
    viewFindInWebPage.number = 10+rand()%11;
    viewFindInWebPage.currIndex = rand()%viewFindInWebPage.number;
}

- (void)viewFindInWebPageFindPrev:(UIViewFindInWebPage *)viewFindInWebPage
{
    
}

- (void)viewFindInWebPageFindNext:(UIViewFindInWebPage *)viewFindInWebPage
{
    
}

// ------------------------------ 处理启动操作 操作 AppLaunchDelegate
#pragma mark - AppLaunchDelegate
- (void)appLaunchOpenRecommendCateId:(NSInteger)cateid cateName:(NSString *)cateName
{
    [_viewHome popToRootWithCompletion:^{
        UIViewNews *viewNews = [UIViewNews viewFromXib];
        viewNews.cateId = cateid;
        viewNews.cateName = cateName;
        viewNews.delegate = self;
        [_viewHome pushView:viewNews completion:^{
            [viewNews refreshData];
        }];
    }];
}

- (void)appLaunchOpenLink:(NSString *)link
{
    _viewTopBar.textField.text = link;
    _DEBUG_LOG(@"%s:%@", __FUNCTION__, link);
    [self recordHistoryWithLink:link];
}

// ------------------------------ 网页回调处理 WebPageManageDelegate
#pragma mark - WebPageManageDelegate
/**
 *  请求打开链接
 *
 *  @param webPageManage WebPageManage
 *  @param link        链接地址
 *  @param UrlOpenStyle 链接打开方式
 */
- (void)webPageManage:(WebPageManage *)webPageManage reqLink:(NSString *)link UrlOpenStyle:(UrlOpenStyle)UrlOpenStyle
{
    [self handleLink:link urlOpenStyle:UrlOpenStyle];
}

/**
 *  开始加载, 外部接受此事件后 要显示 停止按钮
 *
 *  @param webPageManage WebPageManage
 *  @param index       索引
 */
- (void)webPageManageDidStartLoad:(WebPageManage *)webPageManage atIndex:(NSInteger)index
{
    if (index==_webManager.currWebPageIndex) {
        _viewTopBar.btnRefresh.hidden = YES;
        _viewTopBar.btnStop.hidden = NO;
    }
}

/**
 *  结束加载, 外部接受此事件后 要显示 刷新按钮
 *
 *  @param webPageManage WebPageManage
 *  @param index       索引
 */
- (void)webPageManageDidEndLoad:(WebPageManage *)webPageManage atIndex:(NSInteger)index
{
    if (index==_webManager.currWebPageIndex) {
        _viewTopBar.btnRefresh.hidden = NO;
        _viewTopBar.btnStop.hidden = YES;
    }
}

/**
 *  标题已更新
 *
 *  @param webPageManage WebPageManage
 *  @param title       网页标题
 *  @param index       索引
 */
- (void)webPageManage:(WebPageManage *)webPageManage didUpdateTitle:(NSString *)title atIndex:(NSInteger)index
{
    
}

/**
 *  网页链接
 *
 *  @param webPageManage WebPageManage
 *  @param link        网页链接
 *  @param index       索引
 */
- (void)webPageManage:(WebPageManage *)webPageManage didUpdateLink:(NSString *)link atIndex:(NSInteger)index
{
    if ([self isWebPageMode] && index==_webManager.currWebPageIndex) {
        _viewTopBar.textField.text = link;
    }
}

/**
 *  松手回到首页
 *
 *  @param webPageManage WebPageManage
 */
- (void)webPageManageWillEndDragBackHome:(WebPageManage *)webPageManage atInex:(NSInteger)index
{
    [self backToHome];
}

@end
