//
//  UIControllerCollectAndHistory.m
//  ChinaBrowser
//
//  Created by HHY on 14/11/7.
//  Copyright (c) 2014年 KOTO Inc. All rights reserved.
//

#import "UIControllerBookmarkHistory.h"
#import "UIControllerCreateBookmark.h"
#import "UIControllerLogin.h"

#import "UICellBookmarkHisoty.h"
#import "UIViewHeader.h"

#import "UserManager.h"
#import "ModelUser.h"
#import "ModelHistory.h"
#import "ModelSyncDelete.h"
#import "ADOSyncDelete.h"

#import "SIAlertView.h"
#import "UIImageView+UIActivityIndicatorForSDWebImage.h"

#import "BlockUI.h"

#import "UIViewBookmarkAction.h"
#import "UIViewSync.h"

NSString * const KNotificationDidAddItemToMianBookmark = @"KNotificationDidAddItemToMianBookmark";

@interface UIControllerBookmarkHistory ()<UIActionSheetDelegate>
{
    //书签数据源
    NSMutableArray *_arrAllBookmark;
    //历史数据源
    NSMutableArray *_arrAllHistory;
    
    //历史抽屉区头
    NSMutableArray *_arrViewHeader;
    //当前选中区头
    NSInteger _currSectionIndex;
    
    //导航栏 右边按钮
    UIButton *_btnRight;
    
    // 底部同步视图
    UIViewSync *_viewSync;
    // 地图书签操作视图
    UIViewBookmarkAction *_viewBookmarkAction;
    
    //导航栏 选择器
    UIView *_viewSegment;
    UIButton *_btnSegmentBookmark;
    UIButton *_btnSegmentHistory;
}

@end

@implementation UIControllerBookmarkHistory

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    //登录后调用该通知
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(didLoginNotification:) name:KNotificationDidLogin object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(didLogoutNotification:) name:KNotificationDidLogout object:nil];
    
    //如果在子文件夹中,给主文件增加书签  调用该通知
    if (_contentType == BHContentTypeBookmark) {
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(didAddItemToMianBookmarkNotification:) name:KNotificationDidAddItemToMianBookmark object:nil];
    }
    
    _arrAllBookmark = [[NSMutableArray alloc] init];
    _arrViewHeader = [[NSMutableArray alloc] init];
    
    _tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    _tableView.allowsSelectionDuringEditing = YES;
    _tableView.layer.edgeAntialiasingMask = 3;
    
    [self initUI];
    
    //判断有没有登录
    [self didLoginNotification:nil];
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

/**
 *  屏幕旋转
 *
 *  @param toInterfaceOrientation
 *  @param duration
 */
-(void)layoutSubViewsWithInterfaceOrientation:(UIInterfaceOrientation)orientation
{

    if (UIUserInterfaceIdiomPad==UI_USER_INTERFACE_IDIOM()) return;
    
    [_viewNav resizeWithOrientation:orientation];
    
    CGRect rc ;
    rc.origin.x = 0;
    rc.origin.y = _viewNav.bottom;
    rc.size.height = self.view.height-_viewSync.height-_viewNav.bottom;
    rc.size.width = _viewNav.frame.size.width;
    if ([_tableView superview])
        _tableView.frame = rc;
    else
        _viewNil.frame = rc;
    
    if (_tableView.editing) {
        _viewBookmarkAction.frame = CGRectMake(0, self.view.height-_viewSync.height, self.view.width, _viewSync.height);
    }
    else {
        _viewSync.frame = CGRectMake(0, self.view.height-_viewSync.height, self.view.width, _viewSync.height);
    }
}


#pragma mark - 各种通知
// ------------------------------ 各种通知
//登录通知方法
-(void)didLoginNotification:(NSNotification *)notification
{
    //更新历史和书签数据源
    _arrAllBookmark = [NSMutableArray arrayWithArray:[ADOBookmark queryWithParent_pkid:_parentPkid userId:[UserManager shareUserManager].currUser.uid]];
    [self updateHistory];
    
    //更新tableview页面状态
    [self onTouchSegment:_btnSegmentBookmark.enabled?_btnSegmentHistory:_btnSegmentBookmark];
    
    /**
     *  更新用户数据
     */
    [_viewSync updateUserStatus];
}

//登出通知
-(void)didLogoutNotification:(NSNotification *)notification
{
    _arrAllBookmark = [NSMutableArray arrayWithArray:[ADOBookmark queryWithParent_pkid:_parentPkid userId:[UserManager shareUserManager].currUser.uid]];
    [self updateHistory];
    
    //更新tableview页面状态
    [self onTouchSegment:_btnSegmentBookmark.enabled?_btnSegmentHistory:_btnSegmentBookmark];
    
    [_viewSync updateUserStatus];
}

-(void)didAddItemToMianBookmarkNotification:(NSNotification *)notification
{
    if (_contentType == BHContentTypeBookmark)
    {
        ModelBookmark *model = notification.object;
        [_arrAllBookmark addObject:model];
        [_tableView reloadData];
    }
    
}

#pragma mark - private methods
// -----------------------------
//创建UI
-(void)initUI
{
    _viewNav = [UIViewNav viewNav];
    _viewNav.title = self.title;
    [self.view addSubview:_viewNav];
    
    self.view.layer.masksToBounds = YES;
    //导航栏
    UIButton *btnBack =[UIButton buttonWithType:UIButtonTypeCustom];
    [btnBack setImage:[UIImage imageWithBundleFile:@"iPhone/back_0.png"] forState:UIControlStateNormal];
    [btnBack setImage:[UIImage imageWithBundleFile:@"iPhone/back_1.png"] forState:UIControlStateHighlighted];
    [btnBack addTarget:self action:@selector(onTouchBtnback) forControlEvents:UIControlEventTouchUpInside];
    [btnBack sizeToFit];
    _viewNav.leftBarButtonItem = [[UIBarButtonItem alloc]initWithCustomView:btnBack];
    UIButton *btnRight =[UIButton buttonWithType:UIButtonTypeCustom];
    _btnRight = btnRight;
    [btnRight setTitle:LocalizedString(@"bianji") forState:UIControlStateNormal];
    [btnRight setTitle:LocalizedString(@"wancheng") forState:UIControlStateSelected];
    [btnRight setTitleColor:[UIColor lightGrayColor] forState:UIControlStateHighlighted];
    [btnRight sizeToFit];
    [btnRight addTarget:self action:@selector(onTouchRightBarButtonItem) forControlEvents:UIControlEventTouchUpInside];
    _viewNav.rightBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:btnRight];
    
    _imageNil.image = [UIImage imageWithBundleFile:@"iPhone/Settings/Bookmark/no_history.png"];
    
    __weak typeof(self) wSelf = self;
    
    _viewSync = [UIViewSync viewFromXib];
    _viewSync.controllerRoot = self;
    _viewSync.callbackSyncBegin = ^{
        
    };
    _viewSync.callbackSyncCompletion = ^{
        [wSelf refreshData];
        
        if (wSelf.callbackShouldUpdate) {
            wSelf.callbackShouldUpdate();
        }
    };
    _viewSync.callbackSyncFail = ^{
        
    };
    
    _viewBookmarkAction = [UIViewBookmarkAction viewFromXib];
    _viewBookmarkAction.callbackNewBookmark = ^{
        UIControllerCreateBookmark *controller = [UIControllerCreateBookmark controllerFromXib];
        controller.type = BookmarkActionTypeNewBookmark;
        controller.parentPkidOfNew = wSelf.parentPkid;
        controller.callbackDidNewBookmark = ^(ModelBookmark *modelBookmark) {
            [wSelf refreshData];
        };
        [wSelf.navigationController pushViewController:controller animated:YES];
    };
    _viewBookmarkAction.callbackNewFolder = ^{
        UIControllerCreateBookmark *controller = [UIControllerCreateBookmark controllerFromXib];
        controller.type = BookmarkActionTypeNewFolder;
        controller.parentPkidOfNew = wSelf.parentPkid;
        controller.callbackDidNewBookmark = ^(ModelBookmark *modelBookmark) {
            [wSelf refreshData];
        };
        [wSelf.navigationController pushViewController:controller animated:YES];
    };
    
    [self.view addSubview:_viewSync];
    
    //更新数据源
    //书签的
    _arrAllBookmark = [NSMutableArray arrayWithArray:[ADOBookmark queryWithParent_pkid:_parentPkid userId:[UserManager shareUserManager].currUser.uid]];
    
    //如果没有书签 显示图片
    if( _arrAllBookmark.count == 0) {
        [_tableView removeFromSuperview];
        _lableNil.text = LocalizedString(@"zanwushuqian");
    }
    else {
        [_viewNil removeFromSuperview];
    }
    
    if (BHContentTypeSubBookmark!=_contentType) {
        //顶部选择器
        _viewSegment = [[UIView alloc]initWithFrame:CGRectMake(96, 22, 140, 24 )];
        _viewSegment.backgroundColor = [UIColor clearColor];
        _viewNav.titleView = _viewSegment;
        
        _btnSegmentBookmark = [UIButton buttonWithType:UIButtonTypeCustom];
        _btnSegmentBookmark.frame = CGRectMake(0, 0, 70, 24);
        _btnSegmentBookmark.titleLabel.font = [UIFont systemFontOfSize:15];
        [_btnSegmentBookmark setTitle:LocalizedString(@"shuqian") forState:UIControlStateNormal];
        [_btnSegmentBookmark setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [_btnSegmentBookmark setTitleColor:[UIColor blackColor] forState:UIControlStateDisabled];
        [_btnSegmentBookmark setBackgroundImage:[[UIImage imageWithBundleFile:@"iPhone/segment_left_0.png"] stretchableImageWithLeftCapWidth:10 topCapHeight:10] forState:UIControlStateNormal];
        [_btnSegmentBookmark setBackgroundImage:[[UIImage imageWithBundleFile:@"iPhone/segment_left_1.png"] stretchableImageWithLeftCapWidth:10 topCapHeight:10] forState:UIControlStateHighlighted];
        [_btnSegmentBookmark setBackgroundImage:[[UIImage imageWithBundleFile:@"iPhone/segment_left_2.png"] stretchableImageWithLeftCapWidth:10 topCapHeight:10] forState:UIControlStateDisabled];
        [_btnSegmentBookmark addTarget:self action:@selector(onTouchSegment:) forControlEvents:UIControlEventTouchUpInside];
        _btnSegmentBookmark.enabled = NO;
        
        _btnSegmentHistory = [UIButton buttonWithType:UIButtonTypeCustom];
        _btnSegmentHistory.frame = CGRectMake(70, 0, 70, 24);
        _btnSegmentHistory.titleLabel.font = [UIFont systemFontOfSize:15];
        [_btnSegmentHistory setTitle:LocalizedString(@"lishi") forState:UIControlStateNormal];
        [_btnSegmentHistory setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [_btnSegmentHistory setTitleColor:[UIColor blackColor] forState:UIControlStateDisabled];
        [_btnSegmentHistory setBackgroundImage:[[UIImage imageWithBundleFile:@"iPhone/segment_right_0.png"] stretchableImageWithLeftCapWidth:10 topCapHeight:10] forState:UIControlStateNormal];
        [_btnSegmentHistory setBackgroundImage:[[UIImage imageWithBundleFile:@"iPhone/segment_right_1.png"] stretchableImageWithLeftCapWidth:10 topCapHeight:10] forState:UIControlStateHighlighted];
        [_btnSegmentHistory setBackgroundImage:[[UIImage imageWithBundleFile:@"iPhone/segment_right_2.png"] stretchableImageWithLeftCapWidth:10 topCapHeight:10] forState:UIControlStateDisabled];
        [_btnSegmentHistory addTarget:self action:@selector(onTouchSegment:) forControlEvents:UIControlEventTouchUpInside];
        
        [_viewSegment addSubview:_btnSegmentBookmark];
        [_viewSegment addSubview:_btnSegmentHistory];
        
        
        //历史 区头
        for (NSInteger i=0; i<4; i++) {
            UIViewHeader *viewHeader = [UIViewHeader viewHeaderFromXib];
            if (i==0) {
                viewHeader.labelTitle.text = LocalizedString(@"zueijinfangwen");
                //缺省时 默认点击展开
                viewHeader.selected = YES;
            }
            else if (i==1) {
                viewHeader.labelTitle.text = LocalizedString(@"jintian");
            }
            else if (i==2) {
                viewHeader.labelTitle.text = LocalizedString(@"zuotian");
            }
            else {
                viewHeader.labelTitle.text = LocalizedString(@"gengzao");
            }
            viewHeader.imageViewAccessory.image = [UIImage imageWithBundleFile:@"iPhone/FM/expansion_2.png"];
            viewHeader.colorNor = [UIColor colorWithHexString:@"#f0f0f0"];;
            viewHeader.colorSelect = [UIColor colorWithHexString:@"#f5f5f5"];;
            viewHeader.labelSubTitle.text = nil;
            viewHeader.labelTitle.textColor = [UIColor blackColor];
            viewHeader.tag = i;
            [viewHeader addTarget:self action:@selector(onTouchHeader:) forControlEvents:UIControlEventTouchUpInside];
            
            [_arrViewHeader addObject:viewHeader];
        }
        
    }
    else {
        // 文件夹操作是，不许新建文件夹
        _viewBookmarkAction.canNewFolder = NO;
    }
}

/**
 *  更新数据历史数据源
 */
-(void)updateHistory
{
    for (NSMutableArray* arrHistory in _arrAllHistory) {
        [arrHistory removeAllObjects];
    }
    
    // 历史记录
    NSArray *arrHistoryOrigin = [ADOHistory queryAllWithUserId:[UserManager shareUserManager].currUser.uid];
    
    if (arrHistoryOrigin.count>0) {
        // 筛选出最近浏览
        NSRange rangLastVisit = NSMakeRange(0, MIN(kLastVisitNumber, arrHistoryOrigin.count));
        [_arrAllHistory[0] addObjectsFromArray:[arrHistoryOrigin subarrayWithRange:rangLastVisit]];
    }
    
    NSCalendar *calendar = [NSCalendar currentCalendar];
    NSDateComponents *dateComponents = [calendar components:NSYearCalendarUnit|NSMonthCalendarUnit|NSDayCalendarUnit fromDate:[NSDate date]];
    dateComponents.hour = 0;
    dateComponents.minute = 0;
    dateComponents.second = 0;
    NSDate *dateToday = [calendar dateFromComponents:dateComponents];
    
    NSTimeInterval tiToday = [dateToday timeIntervalSince1970];
    NSTimeInterval tiYesterday = tiToday-86400;
    for (ModelHistory *model in arrHistoryOrigin) {
        if (model.time>=tiToday) {
            // 今天
            NSMutableArray *arrHistory = _arrAllHistory[1];
            [arrHistory addObject:model];
        }
        else if (model.time>=tiYesterday) {
            // 昨天
            NSMutableArray *arrHistory = _arrAllHistory[2];
            [arrHistory addObject:model];
        }
        else {
            // 更早
            NSMutableArray *arrHistory = _arrAllHistory[3];
            [arrHistory addObject:model];
        }
    }
}

/**
 *  重新刷新数据
 */
- (void)refreshData
{
    switch (_viewSync.syncDataType) {
        case SyncDataTypeBookmark:
        {
            _arrAllBookmark = [NSMutableArray arrayWithArray:[ADOBookmark queryWithParent_pkid:_parentPkid userId:[UserManager shareUserManager].currUser.uid]];
            [self onTouchSegment:_btnSegmentBookmark];
        }break;
        case SyncDataTypeHistory:
        {
            [self updateHistory];
            [self onTouchSegment:_btnSegmentHistory];
        }break;
        default:
            break;
    }
}

/**
 *  删除书签文件夹的子项（递归函数，支持 多级文件夹 操作）
 *
 *  @param parentPkid    文件夹id
 *  @param arrSyncDelete 需要删除的项
 */
- (void)deleteBookmarkWithParentPkid:(NSInteger)parentPkid arrSyncDelete:(NSMutableArray *)arrSyncDelete
{
    NSArray *arrBookmark = [ADOBookmark queryWithParent_pkid:parentPkid userId:[UserManager shareUserManager].currUser.uid];
    for (ModelBookmark *modelBookmark in arrBookmark) {
        // 本地数据库中删除
        [ADOBookmark deleteWithPkid:modelBookmark.pkid];
        if (modelBookmark.pkid_server>0) {
            ModelSyncDelete *modelSyncDelete = [ModelSyncDelete modelWithPkidServer:modelBookmark.pkid_server syncDataType:SyncDataTypeBookmark userId:modelBookmark.userid];
            modelSyncDelete.pkid = [ADOSyncDelete addModel:modelSyncDelete];
            if (modelSyncDelete.pkid>0) {
                [arrSyncDelete addObject:modelSyncDelete];
            }
        }
        
        if (modelBookmark.isFolder) {
            [self deleteBookmarkWithParentPkid:modelBookmark.pkid arrSyncDelete:arrSyncDelete];
        }
    }
}

// ---------------------------- touch
/**
 *  返回按钮
 */
- (void)onTouchBtnback
{
    if(self.navigationController)
    {
        [self.navigationController popViewControllerAnimated:YES];
    }else
    {
        [self dismissModalViewControllerAnimated:YES];
        
    }
}

/**
 *  点击_nav右边按钮事件.  书签下为编辑,历史下为清除
 */
-(void)onTouchRightBarButtonItem
{
    if (_contentType == BHContentTypeBookmark|| _contentType == BHContentTypeSubBookmark) {
        if(_tableView.editing)
        {
            //点击完成
            [_tableView setEditing:NO animated:YES];
            
            [_viewBookmarkAction removeFromSuperview];
            _viewSync.frame = CGRectMake(0, self.view.height-_viewSync.height, self.view.width, _viewSync.height);
            [self.view addSubview:_viewSync];
        }
        else
        {
            [_tableView setEditing:YES animated:YES];
            
            [_viewSync removeFromSuperview];
            _viewBookmarkAction.frame = CGRectMake(0, self.view.height-_viewSync.height, self.view.width, _viewSync.height);
            [self.view addSubview:_viewBookmarkAction];
        }
    }
    else
    {
        UIActionSheet *as = [[UIActionSheet alloc] initWithTitle:LocalizedString(@"ninquedingyaoqingkongliulanlishima") delegate:self cancelButtonTitle:LocalizedString(@"quxiao") destructiveButtonTitle:LocalizedString(@"qingkong") otherButtonTitles:nil];
        [as showInView:self.view withCompletionHandler:^(NSInteger buttonIndex) {
            if (as.cancelButtonIndex==buttonIndex) {
                return;
            }
            
            [ADOHistory clearWithUserId:[UserManager shareUserManager].currUser.uid];
            
            //遍历最近浏览 删除服务器数据
            NSMutableArray *arrSyncDelete = [NSMutableArray array];
            for (ModelHistory *modelHistory in _arrAllHistory[0]) {
                if(modelHistory.pkid_server)
                {
                    ModelSyncDelete *modelSyncDelete = [ModelSyncDelete modelWithPkidServer:modelHistory.pkid_server syncDataType:SyncDataTypeHistory userId:modelHistory.userid];
                    modelSyncDelete.pkid = [ADOSyncDelete addModel:modelSyncDelete];
                    if (modelSyncDelete.pkid>0) {
                        // 添加删除项
                        [arrSyncDelete addObject:modelSyncDelete];
                    }
                }
            }
            
            if (arrSyncDelete.count>0 && [SyncHelper shouldAutoSync]) {
                // 同步删除服务器数据
                [[SyncHelper shareSync] syncDeleteHistoryWithArrSyncDelete:arrSyncDelete completion:^{
                    
                } fail:^(NSError *error) {
                    
                }];
            }
            
            for (NSMutableArray *arr in _arrAllHistory) {
                [arr removeAllObjects];
            }
            [self onTouchSegment:_btnSegmentHistory];
            [_tableView reloadData];
        }];
    }
    _btnRight.selected = _tableView.editing;
}

/**
 *  点击顶部选择器 书签 和 历史
 */
-(void)onTouchSegment:(UIButton *)btn
{
    _btnRight.selected = NO;
    if (_tableView.editing) {
        [_tableView setEditing:NO animated:NO];
        [_viewBookmarkAction removeFromSuperview];
        [self.view addSubview:_viewSync];
        _viewSync.frame = CGRectMake(0, self.view.height-_viewSync.height, self.view.width, _viewSync.height);
    }
    
    //书签
    if(_btnSegmentBookmark == btn) {
        _viewSync.syncDataType = SyncDataTypeBookmark;
        _contentType = BHContentTypeBookmark;
        
        _btnSegmentHistory.enabled = YES;
        _btnSegmentBookmark.enabled = NO;
        
        [_btnRight setTitle:LocalizedString(@"bianji") forState:UIControlStateNormal];
        //如果没有书签
        if (_arrAllBookmark.count==0) {
            [_tableView removeFromSuperview];
            [self.view addSubview:_viewNil];
            _viewNil.frame = CGRectMake(0, _viewNav.bottom, self.view.width, self.view.height-_viewSync.height-_viewNav.bottom);
            _lableNil.text = LocalizedString(@"zanwushuqian");
        }
        else
        {
            [_viewNil removeFromSuperview];
            [self.view addSubview:_tableView];
            _tableView.frame = CGRectMake(0, _viewNav.bottom, self.view.width, self.view.height-_viewSync.height-_viewNav.bottom);
        }
    }
    else {
        //历史
        _viewSync.syncDataType = SyncDataTypeHistory;
        _contentType = BHContentTypeHistory;
        
        _btnSegmentHistory.enabled = NO;
        _btnSegmentBookmark.enabled = YES;
        
        [_btnRight setTitle:LocalizedString(@"qingchu") forState:UIControlStateNormal];
        
        //如果历史数组没有初始化  说明是第一次点击历史.  从数据库拿历史数据
        if(!_arrAllHistory) {
            
            _arrAllHistory = [NSMutableArray arrayWithObjects:
                              [NSMutableArray array],   // 最近访问
                              [NSMutableArray array],   // 今天
                              [NSMutableArray array],   // 昨天
                              [NSMutableArray array],   // 更早
                              nil];
            [self updateHistory];
        }
        
        //如果没有历史记录, 显示图片
        if (![self isHistory]) {
            [_tableView removeFromSuperview];
            [self.view addSubview:_viewNil];
            _viewNil.frame = CGRectMake(0, _viewNav.bottom, self.view.width, self.view.height-_viewSync.height-_viewNav.bottom);
            _lableNil.text = LocalizedString(@"zanwulishi");
        }
        else
        {
            [_viewNil removeFromSuperview];
            [self.view addSubview:_tableView];
            _tableView.frame = CGRectMake(0, _viewNav.bottom, self.view.width, self.view.height-_viewSync.height-_viewNav.bottom);
        }
    }
    
    if([_tableView superview])
        [_tableView reloadData];
    
}

//点击历史头
- (void)onTouchHeader:(UIViewHeader *)viewHeader
{
    [_arrViewHeader enumerateObjectsUsingBlock:^(UIViewHeader* item, NSUInteger idx, BOOL *stop) {
        if (item==viewHeader) {
            viewHeader.selected = !viewHeader.selected;
        }
    }];
    
    [_tableView reloadSections:[NSIndexSet indexSetWithIndex:viewHeader.tag] withRowAnimation:UITableViewRowAnimationFade];
    
    if (viewHeader.selected && ((NSMutableArray *)_arrAllHistory[viewHeader.tag]).count>0) {
        
        [_tableView scrollToRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:viewHeader.tag] atScrollPosition:UITableViewScrollPositionTop animated:YES];
    }
}

#pragma mark - tableViewDelegate
-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    if (BHContentTypeBookmark==_contentType || BHContentTypeSubBookmark == _contentType) {
        return 1;
    }
    else {
        return _arrAllHistory.count;
    }
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    if (BHContentTypeBookmark==_contentType || BHContentTypeSubBookmark == _contentType) {
        
        return _arrAllBookmark.count;
    }
    else {
        return [_arrAllHistory[section] count];
    }
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *cellIdD = @"UICellBookmarkHisoty";
    
    UICellBookmarkHisoty *cell = [tableView dequeueReusableCellWithIdentifier:cellIdD];
    if (!cell) {
        cell = [[[NSBundle mainBundle] loadNibNamed:@"UICellBookmarkHisoty" owner:self options:nil] lastObject];
    }
    cell.cellSeparatorStyle = CellSeparatorStyleFill;
    if (BHContentTypeBookmark==_contentType || BHContentTypeSubBookmark == _contentType) {
        //书签
        ModelBookmark *model = _arrAllBookmark[indexPath.row];
        if (model.isFolder) {
            //文件夹
            cell.cellStyle = CellStyleFolder;
            cell.backgroundColor = [UIColor colorWithHexString:@"#f0f0f0"];
            cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
        }
        else {
            //书签
            cell.cellStyle = CellStyleNone;
            __weak UIImageView *kImageView = cell.imageViewLeftIcon;
            [cell.imageViewLeftIcon setImageWithURL:[NSURL URLWithString:model.icon] placeholderImage:[UIImage imageWithBundleFile:@"iPhone/Settings/Bookmark/ic_bookmark.png"] completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType)
             {
                 if (!image) {
                     kImageView.image = [UIImage imageWithBundleFile:@"iPhone/Settings/Bookmark/ic_bookmark.png"];
                 }
             }];
        }
        cell.labelBookmarkTitle.text = model.title;
        cell.labelBookmarkDetail.text = model.link;
    }
    else {
        //历史
        NSArray *arrHistory = _arrAllHistory[indexPath.section];
        ModelHistory *model = arrHistory[indexPath.row];
        cell.backgroundColor = [UIColor whiteColor];
        cell.accessoryType = UITableViewCellAccessoryNone;
        __weak UIImageView *kImageView = cell.imageViewLeftIcon;
        [cell.imageViewLeftIcon setImageWithURL:[NSURL URLWithString:model.icon] placeholderImage:[UIImage imageWithBundleFile:@"iPhone/Settings/Bookmark/ic_history.png"] completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType)
         {
             if (!image) {
                 kImageView.image = [UIImage imageWithBundleFile:@"iPhone/Settings/Bookmark/ic_history.png"];
             }
         }];
       
        cell.labelBookmarkTitle.text = model.title;
        cell.labelBookmarkDetail.text = model.link;
        cell.clipsToBounds = YES;
    }
    return cell;
    
}

//点击事件
-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    if (_contentType == BHContentTypeBookmark || _contentType == BHContentTypeSubBookmark) {
        
        ModelBookmark *model = _arrAllBookmark[indexPath.row];
        
        if(_tableView.editing){
            
            UIControllerCreateBookmark *controller = [UIControllerCreateBookmark controllerFromXib];
            controller.modelEdit = model;
            controller.type = model.isFolder?BookmarkActionTypeEditFolder:BookmarkActionTypeEditBookmark;
            controller.callbackDidEditBookmark = ^(ModelBookmark *modelBookmark) {
                // 完成编辑，刷新列表数据
                [self refreshData];
                
                if (_callbackShouldUpdate) {
                    _callbackShouldUpdate();
                }
            };
            [self.navigationController pushViewController:controller animated:YES];
        }
        else if(model.isFolder) {
            // 如果点击的是文件夹, 进入次级界面
            UIControllerBookmarkHistory *controller = [UIControllerBookmarkHistory controllerFromXib];
            controller.contentType = BHContentTypeSubBookmark;
            controller.parentPkid = model.pkid;
            controller.callbackShouldUpdate = ^{
                [self refreshData];
            };
            controller.title = model.title;
            [self.navigationController pushViewController:controller animated:YES];
        }
        else {
           //进入页面
            [_delegate controllerBookmarkHistory:self reqLink:model.link];
            [self.navigationController popToRootViewControllerAnimated:YES];
        }
    }
    else {
        // 点击历史记录
        NSArray *arrHistory = _arrAllHistory[indexPath.section];
        ModelHistory *model = arrHistory[indexPath.row];
        [_delegate controllerBookmarkHistory:self reqLink:model.link];
        [self.navigationController popToRootViewControllerAnimated:YES];
    }
}

//编辑
-(void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath
{
    
    switch (_contentType) {
        case BHContentTypeSubBookmark:     // 删除书签文件夹
        case BHContentTypeBookmark:   // 删除书签
        {
            // 删除文件夹下所有的内容，不要break，还得往下上除书签
            ModelBookmark *modelBookmarkDelete = _arrAllBookmark[indexPath.row];
            
            // 本地数据库中删除
            [ADOBookmark deleteWithPkid:modelBookmarkDelete.pkid];
            
            NSMutableArray *arrSyncDelete = [NSMutableArray array];
            if (modelBookmarkDelete.pkid_server>0) {
                ModelSyncDelete *modelSyncDelete = [ModelSyncDelete modelWithPkidServer:modelBookmarkDelete.pkid_server syncDataType:SyncDataTypeBookmark userId:modelBookmarkDelete.userid];
                modelSyncDelete.pkid = [ADOSyncDelete addModel:modelSyncDelete];
                if (modelSyncDelete.pkid>0) {
                    [arrSyncDelete addObject:modelSyncDelete];
                }
            }
            
            if (modelBookmarkDelete.isFolder) {
                /**
                 *  删除文件夹，需要删除文件夹中的所有子项(***** 重要)
                 */
                [self deleteBookmarkWithParentPkid:modelBookmarkDelete.pkid arrSyncDelete:arrSyncDelete];
            }
            
            if (arrSyncDelete.count>0 && [SyncHelper shouldAutoSync] && [SyncHelper shouldSyncWithType:SyncDataTypeBookmark]) {
                // 同步删除操作
                [[SyncHelper shareSync] syncDeleteBookmarkWithArrSyncDelete:arrSyncDelete completion:^{
                    
                } fail:^(NSError *error) {
                    
                }];
            }
            
            [_arrAllBookmark removeObjectAtIndex:indexPath.row];
            [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
            
            if(_arrAllBookmark.count == 0) {
                //如果没有书签了 显示图片
                [self.view addSubview:_viewNil];
                _viewNil.frame = _tableView.frame;
                _lableNil.text = LocalizedString(@"zanwushuqian");
                [_tableView removeFromSuperview];
            }
            else if(indexPath.row < _arrAllBookmark.count) {
                //如果是删除最后一行, 则不用进行排序.  这是非最后一行的情况
                [self updeteOrderFromIndex:indexPath.row toIndex:_arrAllBookmark.count-1];
            }
            
        }break;
        case BHContentTypeHistory:    // 删除历史记录
        {
            /**
             *  删除历史记录，需要对应的更新 最近浏览 的分组
             */
            // ---------------------------
            // 即将删除的历史分组
            NSMutableArray *arrHistorySection = _arrAllHistory[indexPath.section];
            ModelHistory *modelHistoryDelete = arrHistorySection[indexPath.row];
            
            // 从本地数据库中删除
            [ADOHistory deleteWithPkid:modelHistoryDelete.pkid];
            
            if (modelHistoryDelete.pkid_server>0) {
                // 记录需要上除的服务器id
                ModelSyncDelete *modelSyncDelete = [ModelSyncDelete modelWithPkidServer:modelHistoryDelete.pkid_server syncDataType:SyncDataTypeHistory userId:modelHistoryDelete.userid];
                modelSyncDelete.pkid = [ADOSyncDelete addModel:modelSyncDelete];
                if (modelSyncDelete.pkid>0 && [SyncHelper shouldAutoSync]) {
                    [[SyncHelper shareSync] syncDeleteHistoryWithArrSyncDelete:@[modelHistoryDelete] completion:^{
                        
                    } fail:^(NSError *error) {
                        
                    }];
                }
            }
            
            // 删除 最近浏览
            [arrHistorySection removeObjectAtIndex:indexPath.row];
            [_tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
            
            if (0==indexPath.section) {
                // 删除的是 最近浏览，在【今天】【昨天】【更早】3个分组中查找是否包含最近浏览的数据，
                for (NSInteger i=1; i<_arrAllHistory.count; i++) {
                    NSMutableArray *arrHistory = _arrAllHistory[i];
                    if ([arrHistory containsObject:modelHistoryDelete]) {
                        NSInteger indexInSection = [arrHistory indexOfObject:modelHistoryDelete];
                        [arrHistory removeObject:modelHistoryDelete];
                        NSIndexPath *indexPathOtherSection = [NSIndexPath indexPathForRow:indexInSection inSection:i];
                        [_tableView deleteRowsAtIndexPaths:@[indexPathOtherSection] withRowAnimation:UITableViewRowAnimationFade];
                        break;
                    }
                }
            }
            else {
                // 删除的是 其他分组（【今天】【昨天】【更早】其中之一）
                NSMutableArray *arrHistory = _arrAllHistory[0];
                if ([arrHistory containsObject:modelHistoryDelete]) {
                    NSInteger indexInSection = [arrHistory indexOfObject:modelHistoryDelete];
                    [arrHistory removeObject:modelHistoryDelete];
                    NSIndexPath *indexPathOtherSection = [NSIndexPath indexPathForRow:indexInSection inSection:0];
                    [_tableView deleteRowsAtIndexPaths:@[indexPathOtherSection] withRowAnimation:UITableViewRowAnimationFade];
                }
            }
            
            /**
             *  更新 最近访问的历史分组，如果少于20个则要从其他分组中 copy 到最近访问;
             */
            NSMutableArray *arrHistoryLastVisit = _arrAllHistory[0];
            NSInteger total = 0;
            for (NSInteger section=1; section<_arrAllHistory.count; section++) {
                NSMutableArray *arrHistory = _arrAllHistory[section];
                NSInteger currTotal = arrHistory.count;
                if (total+currTotal>=kLastVisitNumber) {
                    [arrHistoryLastVisit addObject:arrHistory[kLastVisitNumber-total-1]];
                    break;
                }
                total += currTotal;
            }
            
            //如果有历史数据则结束, 如果没有则显示图片
            if (![self isHistory]) {
                [self.view addSubview:_viewNil];
                _viewNil.frame = _tableView.frame;
                _lableNil.text = LocalizedString(@"zanwulishi");
                [_tableView removeFromSuperview];
            }
        }break;
        default:
            break;
    }
}

//能否移动
-(BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath
{
    return YES;
}

//移动排序方法
- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath *)destinationIndexPath
{
    ModelBookmark *model = _arrAllBookmark[sourceIndexPath.row];
    [_arrAllBookmark removeObject:model];
    [_arrAllBookmark insertObject:model atIndex:destinationIndexPath.row];
    
    [self updeteOrderFromIndex:sourceIndexPath.row toIndex:destinationIndexPath.row];
}

//区头view
- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section
{
    if (BHContentTypeBookmark==_contentType || BHContentTypeSubBookmark == _contentType) {
        return nil;
    }
    else {
        return _arrViewHeader[section];
    }
}

//区头高度
- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    if (BHContentTypeBookmark==_contentType || BHContentTypeSubBookmark == _contentType) {
        return 0;
    }
    else {
        return 40;
    }
}

//
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (BHContentTypeBookmark==_contentType || BHContentTypeSubBookmark == _contentType) {
        return 44;
    }
    else {
        UIViewHeader *viewHeader = _arrViewHeader[indexPath.section];
        return viewHeader.selected?44.0f:0.0f;
    }
}

/**
 *  书签按数组顺序排序
 *
 *  @param from 需要重排序的起始位置
 *  @param to   需要重排序的结束位置
 */
-(void)updeteOrderFromIndex:(NSInteger)from toIndex:(NSInteger)to;
{
    NSInteger start =MIN(from, to);
    NSInteger end = MAX(from, to);
    
    /**
     *  移动过的书签重新设置排序索引
     */
    for (int i = start; i<=end; i++)
    {
        ModelBookmark *model = _arrAllBookmark[i];
        [ADOBookmark updateSort:i withPkid:model.pkid];
    }
    
    _arrAllBookmark = [NSMutableArray arrayWithArray:[ADOBookmark queryWithParent_pkid:_parentPkid userId:[UserManager shareUserManager].currUser.uid]];
    //查询重排序过的书签 替换掉原来位置的书签.
//    NSRange range = NSMakeRange(start, end - start + 1);
//    [_arrAllBookmark replaceObjectsInRange:range withObjectsFromArray:[ADOBookmark queryWithParent_pkid:_parentPkid fromSort:start toSort:end]];
}

/**
 *  是否有历史记录
 *
 *  @return bool
 */
-(BOOL)isHistory
{
    for (NSMutableArray *arrHhistory in _arrAllHistory) {
        if (arrHhistory.count>0) {
            return YES;
        }
    }
    return NO;
}

@end
