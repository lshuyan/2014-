//
//  UIControllerProgramList.m
//  ChinaBrowser
//
//  Created by David on 14/11/27.
//  Copyright (c) 2014年 KOTO Inc. All rights reserved.
//

#import "UIControllerProgramList.h"

#import "UIViewNav.h"
#import "UIViewFMHeader.h"
#import "UICellProgram.h"

#import "ModelProgram.h"

#import "BlockUI.h"

typedef enum {
    /**
     *  电台
     */
    ProgramTypeFM,
    /**
     *  资讯
     */
    ProgramTypeNews
} ProgramType;

@interface UIControllerProgramList () <UITableViewDataSource, UITableViewDelegate>
{
    UIViewNav *_viewNav;
    UIButton *_btnFM;
    UIButton *_btnNews;
    
    IBOutlet UITableView *_tabelView;
    
    /**
     *  存放 节目的 数组 [[ModelProgram]]
     */
    NSArray *_arrDataSource;
    NSArray *_arrViewHeader;
    ProgramType _programType;
    AFJSONRequestOperation *_afReqProgram;
    
    ModelProgram *_modelProgramSelect;
    NSIndexPath *_indexPathFM;
    NSIndexPath *_indexPathNews;
}

@end

@implementation UIControllerProgramList

#pragma mark - property
- (void)setSelectProgramServerId:(NSInteger)selectProgramServerId
{
    _selectProgramServerId = selectProgramServerId;
}

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)dealloc
{
    [_afReqProgram cancel];
    _afReqProgram = nil;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    
    _viewNav = [UIViewNav viewNav];
    {
        UIView *titleView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 140, 24)];
        titleView.backgroundColor = [UIColor clearColor];
        
        _btnFM = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, titleView.width/2, titleView.height)];
        [_btnFM setTitle:LocalizedString(@"diantai") forState:UIControlStateNormal];
        _btnFM.titleLabel.font = [UIFont systemFontOfSize:15];
        [_btnFM setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [_btnFM setTitleColor:[UIColor blackColor] forState:UIControlStateDisabled];
        [_btnFM setBackgroundImage:[[UIImage imageWithBundleFile:@"iPhone/segment_left_0.png"] stretchableImageWithLeftCapWidth:10 topCapHeight:10]
                          forState:UIControlStateNormal];
        [_btnFM setBackgroundImage:[[UIImage imageWithBundleFile:@"iPhone/segment_left_1.png"] stretchableImageWithLeftCapWidth:10 topCapHeight:10]
                          forState:UIControlStateHighlighted];
        [_btnFM setBackgroundImage:[[UIImage imageWithBundleFile:@"iPhone/segment_left_2.png"] stretchableImageWithLeftCapWidth:10 topCapHeight:10]
                          forState:UIControlStateDisabled];
        [_btnFM addTarget:self action:@selector(onTouchFM) forControlEvents:UIControlEventTouchUpInside];
        
        _btnNews = [[UIButton alloc] initWithFrame:CGRectMake(_btnFM.right, _btnFM.top, _btnFM.width, _btnFM.height)];
        _btnNews.titleLabel.font = [UIFont systemFontOfSize:15];
        [_btnNews setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [_btnNews setTitleColor:[UIColor blackColor] forState:UIControlStateDisabled];
        [_btnNews setTitle:LocalizedString(@"zixun") forState:UIControlStateNormal];
        [_btnNews setBackgroundImage:[[UIImage imageWithBundleFile:@"iPhone/segment_right_0.png"] stretchableImageWithLeftCapWidth:10 topCapHeight:10]
                            forState:UIControlStateNormal];
        [_btnNews setBackgroundImage:[[UIImage imageWithBundleFile:@"iPhone/segment_right_1.png"] stretchableImageWithLeftCapWidth:10 topCapHeight:10]
                            forState:UIControlStateHighlighted];
        [_btnNews setBackgroundImage:[[UIImage imageWithBundleFile:@"iPhone/segment_right_2.png"] stretchableImageWithLeftCapWidth:10 topCapHeight:10]
                            forState:UIControlStateDisabled];
        [_btnNews addTarget:self action:@selector(onTouchNews) forControlEvents:UIControlEventTouchUpInside];
        
        [titleView addSubview:_btnFM];
        [titleView addSubview:_btnNews];
        
        _viewNav.titleView = titleView;
    }
    
    {
        UIButton *btnBack = [UIButton buttonWithType:UIButtonTypeCustom];
        [btnBack addTarget:self action:@selector(onTouchBack) forControlEvents:UIControlEventTouchUpInside];
        [btnBack setImage:[UIImage imageWithBundleFile:@"iPhone/back_0.png"] forState:UIControlStateNormal];
        [btnBack setImage:[UIImage imageWithBundleFile:@"iPhone/back_1.png"] forState:UIControlStateHighlighted];
        [btnBack sizeToFit];
        
        UIButton *btnSave = [UIButton buttonWithType:UIButtonTypeCustom];
        [btnSave setTitle:LocalizedString(@"queding") forState:UIControlStateNormal];
        [btnSave setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [btnSave setTitleColor:[UIColor grayColor] forState:UIControlStateHighlighted];
        [btnSave addTarget:self action:@selector(onTouchOK) forControlEvents:UIControlEventTouchUpInside];
        [btnSave sizeToFit];
        
        _viewNav.leftBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:btnBack];
        _viewNav.rightBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:btnSave];
    }
    
    [self.view addSubview:_viewNav];
    [self onTouchFM];
    
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        [self loadCache];
    });
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)layoutSubViewsWithInterfaceOrientation:(UIInterfaceOrientation)orientation
{
    [_viewNav resizeWithOrientation:orientation];
    
    CGRect rc = CGRectMake(0, _viewNav.bottom, self.view.width, self.view.height-_viewNav.bottom);
    _tabelView.frame = rc;
}

#pragma mark - private methods
- (void)onTouchBack
{
    [self.navigationController popViewControllerAnimated:YES];
}

- (void)onTouchOK
{
    if (!_modelProgramSelect) {
        // 没选择
        [self.navigationController popViewControllerAnimated:YES];
        return;
    }
    
    if (_modelProgramSelect.parent_pkid_server>0 && _callbackCheckIsExistTime) {
        /**
         *  parent_pkid_server>0 时，节目有具体时间，预约时间就是节目时间，这时候需要检查是否存在 同一时间 的节目，并提醒是否替换
         */
        if (_callbackCheckIsExistTime(_modelProgramSelect.time)) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:LocalizedString(@"gaishijianyijingcunzaiyuyue_shifoutihuan") delegate:nil cancelButtonTitle:LocalizedString(@"quxiao") otherButtonTitles:LocalizedString(@"tihuan"), nil];
            [alert showWithCompletionHandler:^(NSInteger buttonIndex) {
                if (alert.cancelButtonIndex==buttonIndex) {
                    return;
                }
                
                if (_callbackSelectProgram) {
                    _callbackSelectProgram(_modelProgramSelect);
                }
                
                [self.navigationController popViewControllerAnimated:YES];
            }];
            return;
        }
    }
    
    if (_callbackSelectProgram) {
        _callbackSelectProgram(_modelProgramSelect);
    }
    
    [self.navigationController popViewControllerAnimated:YES];
}

- (void)onTouchFM
{
    _btnFM.enabled = NO;
    _btnNews.enabled = YES;
    _programType = ProgramTypeFM;
    
    [_tabelView reloadData];
    
    if (_indexPathFM) {
        [_tabelView selectRowAtIndexPath:_indexPathFM animated:NO scrollPosition:UITableViewScrollPositionNone];
    }
}

- (void)onTouchNews
{
    _btnNews.enabled = NO;
    _btnFM.enabled = YES;
    _programType = ProgramTypeNews;
    
    [_tabelView reloadData];
    
    if (_indexPathNews) {
        [_tabelView selectRowAtIndexPath:_indexPathNews animated:NO scrollPosition:UITableViewScrollPositionNone];
    }
}

- (void)onTouchFMHeader:(UIViewFMHeader *)viewHeader
{
    [viewHeader setSelected:!viewHeader.selected animated:YES];
    [_tabelView reloadSections:[NSIndexSet indexSetWithIndex:viewHeader.tag] withRowAnimation:UITableViewRowAnimationFade];
    
    if (_indexPathFM) {
        [_tabelView selectRowAtIndexPath:_indexPathFM animated:NO scrollPosition:UITableViewScrollPositionNone];
    }
}

- (void)onTouchRadio:(UIButton *)btnRadio
{
    _indexPathFM = nil;
    _selectProgramServerId = 0;
    
    if (btnRadio.selected) {
        return;
    }
    
    btnRadio.selected = !btnRadio.selected;
    
    for (NSInteger i=0; i<_arrViewHeader.count; i++) {
        UIViewFMHeader *header = _arrViewHeader[i];
        if (header.btnRadio==btnRadio) {
            if (btnRadio.selected) {
                _modelProgramSelect = _arrDataSource[0][header.tag];
                
                // 清除选择cell
                [_tabelView deselectRowAtIndexPath:[_tabelView indexPathForSelectedRow] animated:YES];
            }
            else {
                _modelProgramSelect = nil;
            }
        }
        else {
            header.btnRadio.selected = NO;
        }
    }
}

- (BOOL)loadCache
{
    BOOL flag = NO;
    AFHTTPClient *client = [AFHTTPClient clientWithBaseURL:[NSURL URLWithString:@""]];
    NSMutableURLRequest *req = [client requestWithMethod:@"GET" path:GetApiWithName(API_ProgramList) parameters:nil];
    NSString *filepath = [GetCacheDataDir()  stringByAppendingPathComponent:[req.URL.absoluteString fileNameMD5WithExtension:@"json"]];
    NSData *data = [NSData dataWithContentsOfFile:filepath];
    if (data) {
        flag = [self resolve:[NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:nil]];
    }
    _viewNav.titleView.alpha = 1;
    _viewNav.titleView.userInteractionEnabled = YES;
    
    if (flag) {
        [_tabelView reloadData];
    }
    else {
        [self reqProgramList];
    }
    
    return flag;
}

- (void)reqProgramList
{
    [_afReqProgram cancel];
    _afReqProgram = nil;
    
    _viewNav.titleView.alpha = 0.8;
    _viewNav.titleView.userInteractionEnabled = NO;
    
    AFHTTPClient *client = [AFHTTPClient clientWithBaseURL:[NSURL URLWithString:@""]];
    NSMutableURLRequest *req = [client requestWithMethod:@"GET" path:GetApiWithName(API_ProgramList) parameters:nil];
    NSString *filepath = [GetCacheDataDir()  stringByAppendingPathComponent:[req.URL.absoluteString fileNameMD5WithExtension:@"json"]];
    _afReqProgram = [AFJSONRequestOperation JSONRequestOperationWithRequest:req success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {
        if ([self resolve:JSON]) {
            [_afReqProgram.responseData writeToFile:filepath atomically:YES];
        }
        _viewNav.titleView.alpha = 1;
        _viewNav.titleView.userInteractionEnabled = YES;
        
        [_tabelView reloadData];
    } failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError *error, id JSON) {
        NSData *data = [NSData dataWithContentsOfFile:filepath];
        if (data) {
            [self resolve:[NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:nil]];
        }
        else {
            [self resolve:nil];
        }
        _viewNav.titleView.alpha = 1;
        _viewNav.titleView.userInteractionEnabled = YES;
        
        [_tabelView reloadData];
    }];
    [_afReqProgram start];
}

- (BOOL)resolve:(NSDictionary *)dicResult
{
    _arrDataSource = nil;
    
    BOOL retVal = NO;
    do {
        if (![dicResult isKindOfClass:[NSDictionary class]]) break;
        NSArray *arrDicCate = dicResult[@"data"];
        if (![arrDicCate isKindOfClass:[NSArray class]]||arrDicCate.count<=0) break;
        
        NSMutableArray *arrCate = [NSMutableArray arrayWithCapacity:arrDicCate.count];
        for (NSInteger i=0; i<arrDicCate.count; i++) {
            NSDictionary *dicCate = arrDicCate[i];
            NSArray *arrProgramDict = dicCate[@"list"];
            NSMutableArray *arrProgram = [NSMutableArray arrayWithCapacity:arrProgramDict.count];
            NSMutableArray *arrViewHeader = nil;
            if (i==0) {
                // 只有FM 才有 SectionHeaderView
                arrViewHeader = [NSMutableArray array];
            }
            for (NSInteger j=0; j<arrProgramDict.count; j++) {
                NSDictionary *dicProgram = arrProgramDict[j];
                ModelProgram *model = [ModelProgram modelWithDict:dicProgram];
                if (arrViewHeader) {
                    if (model.arrSubProgram.count>0) {
                        [arrProgram addObject:model];
                        UIViewFMHeader *viewHeader = [UIViewFMHeader viewFromXib];
                        [viewHeader addTarget:self action:@selector(onTouchFMHeader:) forControlEvents:UIControlEventTouchUpInside];
                        [viewHeader.btnRadio addTarget:self action:@selector(onTouchRadio:) forControlEvents:UIControlEventTouchUpInside];
                        viewHeader.labelTitle.text = model.title;
                        viewHeader.tag = arrViewHeader.count;
                        viewHeader.btnRadio.tag = arrViewHeader.count;
                        
                        [arrViewHeader addObject:viewHeader];
                        
                        if (_selectProgramServerId>0) {
                            if (_selectProgramServerId==model.pkid_server) {
                                viewHeader.btnRadio.selected = YES;
                            }
                            else {
                                for (ModelProgram *modelProgramLocal in model.arrSubProgram) {
                                    if (_selectProgramServerId==modelProgramLocal.pkid_server) {
                                        viewHeader.selected = YES;
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    [arrProgram addObject:model];
                }
            }
            [arrCate addObject:arrProgram];
            /**
             *  设置分组头部视图
             */
            if (arrViewHeader) {
                _arrViewHeader = arrViewHeader;
            }
        }
        _arrDataSource = arrCate;
        
        retVal  = YES;
    } while (NO);
    return retVal;
}

#pragma mark - UITableViewDataSource, UITableViewDelegate
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    if (_arrDataSource.count<=0) {
        return 0;
    }
    
    if (ProgramTypeFM==_programType) {
        return [_arrDataSource[0] count];
    }
    else {
        return 1;
    }
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    if (_arrDataSource.count<=0) {
        return 0;
    }
    
    if (ProgramTypeFM==_programType) {
        ModelProgram *model = _arrDataSource[0][section];
//        UIViewFMHeader *viewHeader = _arrViewHeader[section];
//        return viewHeader.selected?model.arrSubProgram.count:0;
        return model.arrSubProgram.count;
    }
    else {
        return [_arrDataSource[1] count];
    }
}

- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section
{
    if (ProgramTypeFM==_programType) {
        return _arrViewHeader[section];
    }
    else {
         return nil;
    }
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    if (ProgramTypeFM==_programType) {
        return 45.0f;
    }
    else {
        return 0.0f;
    }
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (ProgramTypeFM==_programType) {
        UIViewFMHeader *viewHeader = _arrViewHeader[indexPath.section];
        return viewHeader.selected?44.0f:0;
    }
    else {
        return 44.0f;
    }
}

- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section
{
    ModelProgram *modelProgram = nil;
    if (ProgramTypeFM==_programType) {
        modelProgram = _arrDataSource[0][section];
        return modelProgram.title;
    }
    else {
        return nil;
    }
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *Identifier = @"UICellProgram";
    UICellProgram *cell = (UICellProgram *)[tableView dequeueReusableCellWithIdentifier:Identifier];
    if (!cell) {
        cell = [UICellProgram cellFromXib];
        cell.backgroundColor = [UIColor clearColor];
        cell.contentView.backgroundColor = [UIColor clearColor];
        cell.selectionStyle = UITableViewCellStyleDefault;
    }
    
    ModelProgram *modelProgram = nil;
    if (ProgramTypeFM==_programType) {
        modelProgram = _arrDataSource[0][indexPath.section];
        modelProgram = modelProgram.arrSubProgram[indexPath.row];
        
        cell.labelTitle.text = [NSString stringWithFormat:@"%02d:%02d    %@", modelProgram.time/3600, modelProgram.time%3600/60, modelProgram.title];
    }
    else {
        modelProgram = _arrDataSource[1][indexPath.row];
        
        cell.labelTitle.text = modelProgram.title;
    }
    
    if (_selectProgramServerId>0 && modelProgram.pkid_server==_selectProgramServerId) {
        [tableView selectRowAtIndexPath:indexPath animated:NO scrollPosition:UITableViewScrollPositionNone];
    }
    
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    _selectProgramServerId = 0;
    
    // 清除 分组头 的选择
    for (UIViewFMHeader *viewHeader in _arrViewHeader) {
        viewHeader.btnRadio.selected = NO;
    }
    
    if (ProgramTypeFM==_programType) {
        _indexPathFM = indexPath;
        ModelProgram *modelProgram = _arrDataSource[0][indexPath.section];
        _modelProgramSelect = modelProgram.arrSubProgram[indexPath.row];
    }
    else {
        _indexPathNews = indexPath;
        _modelProgramSelect = _arrDataSource[1][indexPath.row];
    }
}

@end
