//
//  ADOBookmark.m
//  ChinaBrowser
//
//  Created by David on 14/11/3.
//  Copyright (c) 2014年 KOTO Inc. All rights reserved.
//

#import "ADOBookmark.h"

#import "DBHelper.h"

@implementation ADOBookmark

/**
 *  判断是否存在
 *
 *  @param link 连接地址/功能模块的地址
 *  @param urlSchemes urlSchemes
 *
 *  @return BOOL
 */
+ (BOOL)isExistWithLink:(NSString *)link userId:(NSInteger)userId
{
    NSInteger pkid = [[DBHelper shareDBHelper].db intForQuery:@"select pkid from tab_bookmark where link=? and lan=? and user_id=?", link?:@"", [LocalizationUtil currLanguage], @(userId)];
    return pkid>0;
}

/**
 *  判断同名文件夹是否存在
 *
 *  @param title  文件夹名
 *  @param userId 用户id
 *
 *  @return bool
 */
+ (BOOL)isExistFolderWithTitil:(NSString *)title userId:(NSInteger)userId
{
    NSInteger pkid = [[DBHelper shareDBHelper].db intForQuery:@"select pkid from tab_bookmark where is_folder = 1 and title=? and lan=? and user_id=?", title?:@"", [LocalizationUtil currLanguage], @(userId)];
    return pkid>0;
}

/**
 *  添加
 *
 *  @param model Model
 *
 *  @return NSInteger  最后添加的id； <= 0，表示错误； > 0 表示添加成功
 */
+ (NSInteger)addModel:(ModelBookmark *)model
{
    NSInteger lastInsertId = -1;
    
    if (0>=model.title.length || 0>=model.link.length) {
        return lastInsertId;
    }
    
    if ([ADOBookmark isExistWithLink:model.link userId:model.userid]) {
        return lastInsertId;
    }
    
    BOOL flag = [[DBHelper shareDBHelper].db executeUpdate:@"insert into tab_bookmark (user_id, lan, parent_pkid, sort, title, link, icon, is_folder, can_edit, pkid_server, update_time, update_time_server) values (?,?,?,?,?,?,?,?,?,?,?,?)", @(model.userid), model.lan?:@"", @(model.parent_pkid), @(model.sortIndex), model.title?:@"", model.link?:@"", model.icon?:@"", @(model.isFolder), @(model.canEdit), @(model.pkid_server), @(model.updateTime), @(model.updateTimeServer)];
    if (flag) {
        lastInsertId = (NSInteger)[[DBHelper shareDBHelper].db lastInsertRowId];
    }
    return lastInsertId;
}

/**
 *  删除
 *
 *  @param aid 本地数据库
 *
 *  @return BOOL
 */
+ (BOOL)deleteWithPkid:(NSInteger)pkid
{
    return [[DBHelper shareDBHelper].db executeUpdate:@"delete from tab_bookmark where pkid = ?", @(pkid)];
}

/**
 *  根据链接地址和用户id删除一条书签
 *
 *  @param link   链接地址
 *  @param userId 所属用户id
 *
 *  @return BOOL 是否成功
 */
+ (BOOL)deleteWithLink:(NSString *)link userId:(NSInteger)userId
{
    return [[DBHelper shareDBHelper].db executeUpdate:@"delete from tab_bookmark where link=? and user_id=? and lan=?", link, @(userId), [LocalizationUtil currLanguage]];
}

/**
 *  清空数据表
 *
 *  @return BOOL 是否成功
 */
+ (BOOL)clear
{
    return [[DBHelper shareDBHelper].db executeUpdate:@"delete from tab_bookmark where lan=?", [LocalizationUtil currLanguage]];
}

+ (BOOL)clearWithUserId:(NSInteger)userId
{
    return [[DBHelper shareDBHelper].db executeUpdate:@"delete from tab_bookmark where lan=? and user_id=?", [LocalizationUtil currLanguage], @(userId)];
}

/**
 *  通过唯一键更新排序索引
 *
 *  @param orderIndex 排序索引
 *  @param pkid       唯一键id
 *
 *  @return BOOL 是否成功
 */
+ (BOOL)updateSort:(NSInteger)sort withPkid:(NSInteger)pkid
{
    return [[DBHelper shareDBHelper].db executeUpdate:@"update tab_bookmark set sort=? where pkid=?", @(sort), @(pkid)];
}

/**
 *  通过唯一键更新 标题，链接地址
 *
 *  @param title 标题
 *  @param link  链接地址
 *  @param parentPkid 父级id(文件夹id)
 *  @param pkid  pkid
 *
 *  @return BOOL
 */
+ (BOOL)updateTitle:(NSString *)title link:(NSString *)link parentPkid:(NSInteger)parentPkid withPkid:(NSInteger)pkid
{
    return [[DBHelper shareDBHelper].db executeUpdate:@"update tab_bookmark set title=?, link=?, parent_pkid=? where pkid=?", title, link, @(parentPkid), @(pkid)];
}

/**
 *  查询所有书签及文件夹
 *
 *  @return NSArray 所有
 */
+ (NSArray *)queryWithUserId:(NSInteger)userId
{
    NSMutableArray *arrResult = [NSMutableArray array];
    FMResultSet *set = [[DBHelper shareDBHelper].db executeQuery:@"select * from tab_bookmark where lan=? and user_id=? order by time desc", [LocalizationUtil currLanguage], @(userId)];
    while ([set next]) {
        ModelBookmark *model = [ModelBookmark modelWithResultSetDict:[set resultDictionary]];
        [arrResult addObject:model];
    }
    return arrResult;
}

/**
 *  查询所有文件夹
 *
 *  @return NSArray 所有文件夹
 */
+ (NSArray *)queryAllFolderWithUserId:(NSInteger)userId
{
    NSMutableArray *arrResult = [NSMutableArray array];
    FMResultSet *set = [[DBHelper shareDBHelper].db executeQuery:@"select * from tab_bookmark where is_folder = 1 and lan=? and user_id=? order by sort", [LocalizationUtil currLanguage], @(userId)];
    while ([set next]) {
        ModelBookmark *model = [ModelBookmark modelWithResultSetDict:[set resultDictionary]];
        [arrResult addObject:model];
    }
    return arrResult;
}

/**
 *  按文件夹查询书签
 *
 *  @param parent_pkid 文件夹编号
 *
 *  @return NSArray bookmark
 */
+ (NSArray *)queryWithParent_pkid:(NSInteger )parent_pkid
{
    NSMutableArray *arrResult = [NSMutableArray array];
    FMResultSet *set = [[DBHelper shareDBHelper].db executeQuery:@"select * from tab_bookmark where parent_pkid = ? order by sort", @(parent_pkid)];
    while ([set next]) {
        ModelBookmark *model = [ModelBookmark modelWithResultSetDict:[set resultDictionary]];
        [arrResult addObject:model];
    }
    return arrResult;
}

/**
 *  按文件夹查询  索引内书签
 *
 *  @param parent_pkid 文件夹编号
 *  @param fromSort    起始索引
 *  @param toSort      结束索引
 *
 *  @return nsarray bookmark
 */
+ (NSArray *)queryWithParent_pkid:(NSInteger )parent_pkid fromSort:(NSInteger)fromSort toSort:(NSInteger)toSort
{
    NSMutableArray *arrResult = [NSMutableArray array];
    FMResultSet *set = [[DBHelper shareDBHelper].db executeQuery:@"select * from tab_bookmark where parent_pkid = ? and sort >= ? and sort <= ? order by sort", @(parent_pkid),@(fromSort),@(toSort)];
    while ([set next]) {
        ModelBookmark *model = [ModelBookmark modelWithResultSetDict:[set resultDictionary]];
        [arrResult addObject:model];
    }
    return arrResult;
}

/**
 *  按唯一ID查询某一条数据
 *
 *  @param pkid 唯一ID
 *
 *  @return
 */
+ (ModelBookmark *)queryWithPkid:(NSInteger)pkid
{
    ModelBookmark *model = nil;
    FMResultSet *set = [[DBHelper shareDBHelper].db executeQuery:@"select * from tab_bookmark where pkid=?", @(pkid)];
    while ([set next]) {
        model= [ModelBookmark modelWithResultSetDict:[set resultDictionary]];
        break;
    }
    return model;
}

+ (NSInteger)queryMaxSortIndexWithParentPkid:(NSInteger)parentPkid userId:(NSInteger)userId
{
    return [[DBHelper shareDBHelper].db intForQuery:@"select max(sort) from tab_bookmark where parent_pkid=? and user_id=? and lan=?", @(parentPkid), @(userId), [LocalizationUtil currLanguage]];
}

@end
