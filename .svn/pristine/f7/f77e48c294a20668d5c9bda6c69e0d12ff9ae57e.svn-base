//
//  UIScrollViewTrans.m
//  ChinaBrowser
//
//  Created by David on 14-9-10.
//  Copyright (c) 2014年 KOTO Inc. All rights reserved.
//

#import "UIScrollViewTrans.h"

#import "UIControlItem.h"
#import "UIImageView+WebCache.h"
#import "UIViewBanner.h"
#import "ModelBanner.h"

#define kHWRate (150.0f/320.0f)

@interface UIScrollViewTrans () <UIViewBannerDelegate>

@end

@implementation UIScrollViewTrans
{
    NSInteger _colCount;
    CGFloat _paddingLR;
    CGFloat _itemNewW;
    
    NSArray *_arrViewCate;
    NSArray *_arrModel;
    NSArray *_arrDicBanner;
    
    UIViewBanner *_viewBanner;
    AFJSONRequestOperation *_afJsonReq;
}

- (void)dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}

- (void)awakeFromNib
{
    [super awakeFromNib];
    
    _itemW =
    _itemH = 80;
    _spaceX =
    _spaceY = 0;
    _paddingTB = 0;
    _minPaddingLR = 0;
    
    _arrModel = [ADOSentenceCate queryWithPcid:0];
    
    NSMutableArray *arrView = [NSMutableArray arrayWithCapacity:_arrModel.count];
    for (NSInteger i=0; i<_arrModel.count; i++) {
        ModelSentenceCate *modelCate = _arrModel[i];
        UIControlItem *viewCate = [UIControlItem viewFromXibWithType:ControlItemTypeTrans];
        [viewCate addTarget:self action:@selector(onTouchItem:) forControlEvents:UIControlEventTouchUpInside];
        viewCate.labelTitle.text = LocalizedString(modelCate.name);
        [self addSubview:viewCate];
        [arrView addObject:viewCate];
        viewCate.tag = i;
        
        UIImage *image = [UIImage imageWithBundleFile:[NSString stringWithFormat:@"trans/iPhone/%@.png", modelCate.name]];
        [viewCate setImageNormal:image highlighted:nil selected:nil];
        [viewCate setBgColorNormal:[UIColor colorWithWhite:1 alpha:1] highlighted:[UIColor colorWithWhite:0.93 alpha:1]];
        [viewCate setTextColorNormal:[UIColor darkGrayColor] highlighted:[UIColor colorWithWhite:0.4 alpha:1]];
        
        viewCate.layer.allowsEdgeAntialiasing = NO;
        viewCate.layer.borderWidth = 0.5;
        viewCate.layer.borderColor = [UIColor colorWithWhite:0.85 alpha:1].CGColor;
    }
    _arrViewCate = arrView;
    
    _viewBanner = [[UIViewBanner alloc] initWithFrame:CGRectMake(0, _paddingTB, self.bounds.size.width, self.bounds.size.width*kHWRate)];
    _viewBanner.delegate = self;
    _viewBanner.shouldShowCloseBtn = NO;
    _viewBanner.shouldShowPageControl = NO;
    [_viewBanner startAutoScroll:7];
    [self addSubview:_viewBanner];
    
    [self reqImage];
}

/*
- (void)layoutSubviews
{
    [super layoutSubviews];
    
    [self setNeedsDisplay];
}
 */

-  (void)setFrame:(CGRect)frame
{
    [super setFrame:frame];
    
    _viewBanner.frame = CGRectMake(0, _paddingTB, self.bounds.size.width, self.bounds.size.width*kHWRate);
    
    [self resizeItem];
}

/*
- (void)drawRect:(CGRect)rect
{
    [super drawRect:rect];
    
    return;
    if (_colCount<=0) return;
    
    CGContextRef context = UIGraphicsGetCurrentContext();
    CGContextSetLineWidth(context, 0.1);
    CGContextSetAllowsAntialiasing(context, false);
    CGContextSetShouldAntialias(context, false);
    CGContextSetStrokeColorWithColor(context, [UIColor colorWithWhite:0.7 alpha:1].CGColor);
    NSInteger columnMore = _arrViewCate.count % _colCount;
    NSInteger rowAll = GetPageWithTotalPagesize(_arrViewCate.count, _colCount);
    
    // 竖线
    for (NSInteger i=0; i<_colCount+1; i++) {
        CGContextMoveToPoint(context, floorf(_paddingLR+(i)*_itemNewW), floorf(_viewBanner.bottom));
        CGContextAddLineToPoint(context, floorf(_paddingLR+(i)*_itemNewW), floorf(_viewBanner.bottom+(columnMore==0?rowAll:(rowAll-1))*_itemH));
    }
    
    for (NSInteger i=0; i<columnMore+1; i++) {
        CGContextMoveToPoint(context, floorf(_paddingLR+(i)*_itemNewW), floorf(_viewBanner.bottom+(rowAll-1)*_itemH));
        CGContextAddLineToPoint(context, floorf(_paddingLR+(i)*_itemNewW), floorf(_viewBanner.bottom+(rowAll)*_itemH));
    }
    
    // 横线
    for (NSInteger i=0; i<(columnMore==0?rowAll:(rowAll-1))+1; i++) {
        CGContextMoveToPoint(context, floorf(_paddingLR), floorf(_viewBanner.bottom+(i)*_itemH));
        CGContextAddLineToPoint(context, floorf(self.bounds.size.width-_paddingLR), floorf(_viewBanner.bottom+(i)*_itemH));
    }
    
    if (columnMore>0) {
        CGContextMoveToPoint(context, floorf(_paddingLR), floorf(_viewBanner.bottom+(rowAll)*_itemH));
        CGContextAddLineToPoint(context, floorf(_paddingLR+columnMore*_itemNewW), floorf(_viewBanner.bottom+(rowAll)*_itemH));
    }
    
    CGContextStrokePath(context);
}
 */

#pragma mark AppLanguageProtocol
- (void)updateByLanguage
{
    // 切换语言
    for (NSInteger i=0; i<_arrModel.count; i++) {
        ModelSentenceCate *modelCate = _arrModel[i];
        UIControlItem *viewCate = _arrViewCate[i];
        viewCate.labelTitle.text = LocalizedString(modelCate.name);
    }
    
    [self reqImage];
}
// ------------------------

- (void)reqImage
{
    [_afJsonReq cancel];
    
    BOOL (^showImage)(NSDictionary *dicResult)= ^(NSDictionary *dicResult){
        if (![dicResult isKindOfClass:[NSDictionary class]]) return NO;
        
        NSArray *arrDicBanner = dicResult[@"data"];
        if ([arrDicBanner isKindOfClass:[NSArray class]] && arrDicBanner.count>0) {
            _arrDicBanner = arrDicBanner;
            
            [self updateBanner];
            
            return YES;
        }
        else {
            return NO;
        }
    };
    
    NSString *device = IsiPad?@"ipad":@"iphone";
    NSDictionary *dicParam = @{@"device":device};
    AFHTTPClient *client = [AFHTTPClient clientWithBaseURL:[NSURL URLWithString:@""]];
    NSMutableURLRequest *req = [client requestWithMethod:@"GET" path:GetApiWithName(API_TransTopImg) parameters:dicParam];
    NSString *filepath = [GetCacheDataDir() stringByAppendingPathComponent:[req.URL.absoluteString fileNameMD5WithExtension:@"json"]];
    
    _afJsonReq = [AFJSONRequestOperation JSONRequestOperationWithRequest:req success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {
        if (showImage(JSON)) {
            [_afJsonReq.responseData writeToFile:filepath atomically:YES];
        }
    } failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError *error, id JSON) {
        NSData *data = [NSData dataWithContentsOfFile:filepath];
        if (data) {
            showImage([NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:nil]);
        }
        
        _DEBUG_LOG(@"%s:%@", __FUNCTION__, error);
    }];
    [_afJsonReq start];
}

- (void)updateBanner
{
    NSMutableArray *arrModelBanner = [NSMutableArray arrayWithCapacity:_arrDicBanner.count];
    for (NSDictionary *dicBanner in _arrDicBanner) {
        ModelBanner *model = [ModelBanner model];
        model.image = dicBanner[@"img"];
        model.link = dicBanner[@"link"];
        [arrModelBanner addObject:model];
    }
    
    [_viewBanner setArrBanner:arrModelBanner];
}

- (void)onTouchItem:(UIView *)item
{
    [_delegateTrans scrollViewTrans:self onTouchCate:_arrModel[item.tag]];
}

- (void)resizeItem
{
    if (0==_itemW || 0==_itemH) {
        return;
    }
    NSInteger colCount = [self getColCount];
    if (colCount==0) {
        return;
    }
    _colCount = colCount;
    CGFloat itemW = self.bounds.size.width/colCount;
    CGFloat paddingLR = (self.bounds.size.width-(colCount-1)*_spaceX-colCount*itemW)/2;
    _paddingLR = paddingLR;
    _itemNewW = itemW;
    
    NSInteger itemCount = _arrViewCate.count;
    
    CGFloat originY = IsPortrait?(_viewBanner.frame.origin.y+_viewBanner.bounds.size.height+_spaceY):_paddingTB;
    originY = (_viewBanner.frame.origin.y+_viewBanner.bounds.size.height+_spaceY);
    
    for (NSInteger i=0; i<itemCount; i++) {
        NSInteger col = GetColWithIndexCol(i, colCount);
        NSInteger row = GetRowWithIndexCol(i, colCount);
        CGRect rc = CGRectMake(paddingLR+(itemW+_spaceX)*col,
                               originY+(_itemH+_spaceY)*row,
                               itemW,
                               _itemH);
        UIControlItem *viewCate = _arrViewCate[i];
        viewCate.frame = CGRectIntegral(rc);
    }
    
    UIControlItem *viewLast = [_arrViewCate lastObject];
    self.contentSize = CGSizeMake(self.bounds.size.width, viewLast.frame.origin.y+viewLast.bounds.size.height+_paddingTB);
}

- (NSInteger)getColCount {
    if (0==_itemW || 0==_itemH) {
        return 2;
    }
    CGFloat w = _minPaddingLR+_itemW;
    NSInteger colCount = 0;
    while (w+_minPaddingLR<=self.bounds.size.width) {
        colCount++;
        w+=_itemW+_spaceX;
    }
    return colCount;
}

- (void)setItemW:(CGFloat)itemW
{
    _itemW = itemW;
    [self resizeItem];
}

- (void)setItemH:(CGFloat)itemH
{
    _itemH = itemH;
    [self resizeItem];
}

- (void)setSpaceX:(CGFloat)spaceX
{
    _spaceX = spaceX;
    [self resizeItem];
}

- (void)setSpaceY:(CGFloat)spaceY
{
    _spaceY = spaceY;
    [self resizeItem];
}

- (void)setMinPaddingLR:(CGFloat)minPaddingLR
{
    _minPaddingLR = minPaddingLR;
    [self resizeItem];
}

- (void)setPaddingTB:(CGFloat)paddingTB
{
    _paddingTB = paddingTB;
    [self resizeItem];
}

#pragma mark - UIViewBannerDelegate
- (void)viewBannerDidClick:(NSInteger)index
{
    NSDictionary *dicBanner = _arrDicBanner[index];
    [_delegateTrans scrollViewTrans:self reqLink:dicBanner[@"link"]];
}

@end
