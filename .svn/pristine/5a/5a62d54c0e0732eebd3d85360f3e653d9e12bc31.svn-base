//
//  UITableViewMode.m
//  ChinaBrowser
//
//  Created by David on 14/11/18.
//  Copyright (c) 2014年 KOTO Inc. All rights reserved.
//

#import "UITableViewMode.h"

#import "UIViewFMPlayer.h"

#import "UICellFMMode.h"
#import "BlockUI.h"

#import "ModelMode.h"
#import "ModelModeProgram.h"
#import "ModelProgram.h"
#import "ModelUser.h"

#import "ADOMode.h"
#import "ADOModeProgram.h"
#import "ADOProgram.h"

@interface UITableViewMode () <UITableViewDataSource, UITableViewDelegate>
{
    UIViewFMPlayer *_viewFMPlayer;
    
    NSMutableArray *_arrMode;
    NSInteger _currIndex;
    
    AFJSONRequestOperation *_afReqDefaultMode;
    AFJSONRequestOperation *_afReqProgram;
    
    ModelMode *_modeEditing;
}

@end

@implementation UITableViewMode

- (void)awakeFromNib
{
    [super awakeFromNib];
    
    _arrMode = [NSMutableArray array];
    
    self.dataSource = self;
    self.delegate = self;
    
    CGRect rc = self.bounds;
    _viewFMPlayer = [UIViewFMPlayer viewFromXib];
    rc.size.height = _viewFMPlayer.height;
    _viewFMPlayer.frame = rc;
    _viewFMPlayer.backgroundColor = [UIColor colorWithWhite:1 alpha:0.0];
    self.tableHeaderView = _viewFMPlayer;
    self.backgroundView = nil;
    self.backgroundColor = [UIColor clearColor];
    
    __weak typeof(self) wSelf = self;
    [_viewFMPlayer setCallbackWillAdd:^{
        if ([wSelf.delegateMode respondsToSelector:@selector(tableViewModeWillAdd:)]) {
            [wSelf.delegateMode tableViewModeWillAdd:wSelf];
        }
    }];
    
    _currIndex = -1;
    
    [self reqProgramList:^{
        [self reqDefaultMode];
    }];
}

#pragma mark - UITableViewDataSource, UITableViewDelegate
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return _arrMode.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    UICellFMMode *cell = (UICellFMMode *)[tableView dequeueReusableCellWithIdentifier:@"UICellFMMode"];
    if (!cell) {
        cell = [UICellFMMode cellFromXib];
        [cell.btnRadio addTarget:self action:@selector(onTouchRadio:) forControlEvents:UIControlEventTouchUpInside];
        UILongPressGestureRecognizer *longPressGesture = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(longPressGesture:)];
        [cell addGestureRecognizer:longPressGesture];
    }
    
    ModelMode *mode = _arrMode[indexPath.row];
    
    cell.btnRadio.tag = indexPath.row;
    cell.tag = indexPath.row;
    cell.labelTitle.text = mode.name;
    
    [cell updateBtnRadioImageWithSelect:indexPath.row==_currIndex];
    
    return cell;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    return 61;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    ModelMode *mode = _arrMode[indexPath.row];
    
    [_delegateMode tableViewMode:self showDetailMode:mode];
}

#pragma mark - private methods
- (void)onTouchRadio:(UIButton *)btnRadio
{
    [(UICellFMMode *)[self cellForRowAtIndexPath:[NSIndexPath indexPathForRow:_currIndex inSection:0]] updateBtnRadioImageWithSelect:NO];
    _currIndex = btnRadio.tag;
    [(UICellFMMode *)[self cellForRowAtIndexPath:[NSIndexPath indexPathForRow:_currIndex inSection:0]] updateBtnRadioImageWithSelect:YES];
}

- (void)longPressGesture:(UILongPressGestureRecognizer *)longPressGesture
{
    if (UIGestureRecognizerStateBegan!=longPressGesture.state) {
        return;
    }
    
    NSIndexPath *indexPath = [self indexPathForCell:(UICellFMMode *)longPressGesture.view];
    
    NSInteger index = indexPath.row;
    ModelMode *mode = _arrMode[index];
    if (mode.sysRecommend) {
        return;
    }
    
    UIActionSheet *actionSheet = [[UIActionSheet alloc] initWithTitle:nil delegate:nil cancelButtonTitle:LocalizedString(@"quxiao") destructiveButtonTitle:LocalizedString(@"shanchu") otherButtonTitles:LocalizedString(@"chongmingming"), nil];
    [actionSheet showInView:self.window.rootViewController.view withCompletionHandler:^(NSInteger buttonIndex) {
        if (buttonIndex==actionSheet.cancelButtonIndex) {
            return;
        }
        
        NSIndexPath *indexPath = [NSIndexPath indexPathForRow:index inSection:0];
        
        if (0==buttonIndex) {
            // 删除
            if ([ADOMode deleteWithPkid:mode.pkid]) {
                [ADOModeProgram deleteWithModePkid:mode.pkid];
                [_arrMode removeObjectAtIndex:index];
                [self deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
            }
        }
        else if (1==buttonIndex) {
            // 重命名
            _modeEditing = mode;
            [_delegateMode tableViewMode:self willRenameName:_modeEditing.name];
        }
    }];
}

- (void)reqDefaultMode
{
    [_afReqDefaultMode cancel];
    _afReqDefaultMode = nil;
    
    BOOL (^resolve)(NSDictionary *) = ^(NSDictionary *dicResult) {
        [_arrMode removeAllObjects];
        
        BOOL retVal = NO;
        do {
            if (![dicResult isKindOfClass:[NSDictionary class]]) break;
            NSArray *arrModeDict = dicResult[@"data"];
            if (![arrModeDict isKindOfClass:[NSArray class]]||arrModeDict.count<=0) break;
            
            for (NSDictionary *dictMode in arrModeDict) {
                ModelMode *mode = [ModelMode modelWithDict:dictMode];
                ModelMode *modeLocal = [ADOMode queryWithPkidServer:mode.pkid_server];
                if (modeLocal) {
                    // 如果本地存在则
                    if ([ADOMode updateName:mode.name withPkidServer:mode.pkid_server]) {
                        modeLocal.name = mode.name;
                    }
                    [_arrMode addObject:modeLocal];
                }
                else {
                    NSInteger modePkid = [ADOMode addModel:mode];
                    if (modePkid>0) {
                        for (ModelModeProgram *modeProgram in mode.arrModeProgram) {
                            modeProgram.modePkid = modePkid;
                            NSInteger modeProgramPKid = [ADOModeProgram addModel:modeProgram];
                            if (modeProgramPKid>0) {
                                modeProgram.pkid = modeProgramPKid;
                            }
                        }
                        [_arrMode addObject:mode];
                    }
                }
            }
            
            retVal  = YES;
        } while (NO);
        return retVal;
    };
    
    AFHTTPClient *client = [AFHTTPClient clientWithBaseURL:[NSURL URLWithString:@""]];
    NSMutableURLRequest *req = [client requestWithMethod:@"GET" path:GetApiWithName(API_ModeProgramRecommend) parameters:nil];
    NSString *filepath = [GetCacheDataDir()  stringByAppendingPathComponent:[req.URL.absoluteString fileNameMD5WithExtension:@"json"]];
    _afReqDefaultMode = [AFJSONRequestOperation JSONRequestOperationWithRequest:req success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {
        if (resolve(JSON)) {
            [_afReqDefaultMode.responseData writeToFile:filepath atomically:NO];
        }
        
        [self loadCustomMode];
        
        [self reloadData];
    } failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError *error, id JSON) {
        NSData *data = [NSData dataWithContentsOfFile:filepath];
        if (data) {
            resolve([NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:nil]);
        }
        
        [self loadCustomMode];
        
        [self reloadData];
    }];
    [_afReqDefaultMode start];
}

- (void)reqProgramList:(void(^)())completion
{
    [_afReqProgram cancel];
    _afReqProgram = nil;
    
    BOOL (^resolve)(NSDictionary *) = ^(NSDictionary *dicResult) {
        BOOL retVal = NO;
        do {
            if (![dicResult isKindOfClass:[NSDictionary class]]) break;
            NSArray *arrDicCate = dicResult[@"data"];
            if (![arrDicCate isKindOfClass:[NSArray class]]||arrDicCate.count<=0) break;
            
            for (NSInteger i=0; i<arrDicCate.count; i++) {
                NSDictionary *dicCate = arrDicCate[i];
                NSArray *arrProgramDict = dicCate[@"list"];
                for (NSInteger j=0; j<arrProgramDict.count; j++) {
                    NSDictionary *dicProgram = arrProgramDict[j];
                    ModelProgram *model = [ModelProgram modelWithDict:dicProgram];
                    if (0==i) {
                        if (model.arrSubProgram.count>0) {
                            ModelProgram *modelLocal = [ADOProgram queryWithPkidServer:model.pkid_server];
                            if (modelLocal) {
                                // 如果存在，是否需要修改数据
                                [ADOProgram updateParentPkidServer:model.parent_pkid_server withPkidServer:model.pkid_server];
                                // 检查子项数据是否有增加
                                for (ModelProgram *subProgram in model.arrSubProgram) {
                                    modelLocal = [ADOProgram queryWithPkidServer:subProgram.pkid_server];
                                    if (modelLocal) {
                                        [ADOProgram updateParentPkidServer:subProgram.parent_pkid_server withPkidServer:subProgram.pkid_server];
                                    }
                                    else {
                                        NSInteger subPkid = [ADOProgram addModel:subProgram];
                                        if (subPkid>0) {
                                            subProgram.pkid = subPkid;
                                        }
                                    }
                                }
                            }
                            else {
                                [ADOProgram addModel:model];
                            }
                        }
                    }
                    else {
                        ModelProgram *modelLocal = [ADOProgram queryWithPkidServer:model.pkid_server];
                        if (modelLocal) {
                            // 如果存在，是否需要修改数据
                            [ADOProgram updateParentPkidServer:model.parent_pkid_server withPkidServer:model.pkid_server];
                            // 检查子项数据是否有增加
                            for (ModelProgram *subProgram in model.arrSubProgram) {
                                modelLocal = [ADOProgram queryWithPkidServer:subProgram.pkid_server];
                                if (modelLocal) {
                                    [ADOProgram updateParentPkidServer:subProgram.parent_pkid_server withPkidServer:subProgram.pkid_server];
                                }
                                else {
                                    NSInteger subPkid = [ADOProgram addModel:subProgram];
                                    if (subPkid>0) {
                                        subProgram.pkid = subPkid;
                                    }
                                }
                            }
                        }
                        else {
                            [ADOProgram addModel:model];
                        }
                    }
                }
            }
            
            retVal  = YES;
        } while (NO);
        return retVal;
    };
    
    AFHTTPClient *client = [AFHTTPClient clientWithBaseURL:[NSURL URLWithString:@""]];
    NSMutableURLRequest *req = [client requestWithMethod:@"GET" path:GetApiWithName(API_ProgramList) parameters:nil];
    NSString *filepath = [GetCacheDataDir()  stringByAppendingPathComponent:[req.URL.absoluteString fileNameMD5WithExtension:@"json"]];
    _afReqProgram = [AFJSONRequestOperation JSONRequestOperationWithRequest:req success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {
        if (resolve(JSON)) {
            [_afReqProgram.responseData writeToFile:filepath atomically:NO];
        }
        
        if (completion) completion();
    } failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError *error, id JSON) {
        if (completion) completion();
    }];
    [_afReqProgram start];
}

- (void)loadCustomMode
{
    NSArray *arrModeCustom = [ADOMode queryWithUserId:[UserManager shareUserManager].currUser.uid];
    [_arrMode addObjectsFromArray:arrModeCustom];
}

#pragma mark - public method
/**
 *  添加模式
 *
 *  @param model ModelMode
 */
- (void)addMode:(ModelMode *)model
{
    [_arrMode addObject:model];
    [self reloadData];
}

/**
 *  重命名正在编辑的模型
 *
 *  @param name 新名字
 */
- (void)setEditingModeName:(NSString *)name
{
    if ([ADOMode updateName:name withPkid:_modeEditing.pkid]) {
        _modeEditing.name = name;
        [self reloadData];
    }
    
    _modeEditing = nil;
}

#pragma mark - AppLanguageProtocol
- (void)updateByLanguage
{
    [_arrMode removeAllObjects];
    [self reloadData];
    
    [self reqProgramList:^{
        [self reqDefaultMode];
    }];
}

@end
