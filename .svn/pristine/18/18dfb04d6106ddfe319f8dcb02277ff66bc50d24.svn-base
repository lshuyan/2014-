//
//  UIControllerRegister.m
//  login
//
//  Created by HHY on 14-10-24.
//  Copyright (c) 2014年 koto. All rights reserved.
//

#import "UIControllerRegister.h"

#import "UIControllerLogin.h"
#import "UIControllerUserInfo.h"

@interface UIControllerRegister ()<UITextFieldDelegate,UIAlertViewDelegate>
{
    AFJSONRequestOperation *_reqRegister;
}
@end

@implementation UIControllerRegister

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
   
    
    [self updateByLanguage];
    
    [_scrollView setSubViewBgColor];
    //    _btnAgree.selected = YES;
    
    _textFieldInfo.delegate = self;
    _textFieldPassword.delegate = self;
    _textFieldNick.delegate=self;
    
    
    //按label.text 字符串宽度 设置 label 的size
    CGRect rect = _labelAgree.frame;
    CGSize size = [_labelAgree.text sizeWithFont:_labelAgree.font constrainedToSize:CGSizeMake(_labelAgree.frame.size.width+100, _labelAgree.frame.size.height) lineBreakMode:NSLineBreakByWordWrapping];
    rect.size=size;
    _labelAgree.frame=rect;
    
    rect = _btnDelegate.frame;
    rect.origin.x = _labelAgree.frame.origin.x + size.width + 5;
    _btnDelegate.frame=rect;
    
    //添加手势 收键盘
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(myResignFirstResponder)];
    [_scrollView addGestureRecognizer:tap];
    
    [self registerForKeyboardNotifications];
}


/**
 *  注册键盘通知
 */
- (void)registerForKeyboardNotifications
{
    //使用NSNotificationCenter 鍵盤出現時
    [[NSNotificationCenter defaultCenter] addObserver:self
     
                                             selector:@selector(keyboardWasShown:)
     
                                                 name:UIKeyboardDidShowNotification object:nil];
    
    //使用NSNotificationCenter 鍵盤隐藏時
    [[NSNotificationCenter defaultCenter] addObserver:self
     
                                             selector:@selector(keyboardWillBeHidden:)
     
                                                 name:UIKeyboardWillHideNotification object:nil];
}

//实现当键盘出现的时候计算键盘的高度大小。用于设置scrollView的contentSize;
- (void)keyboardWasShown:(NSNotification*)aNotification
{
    NSDictionary* info = [aNotification userInfo];
    float kbheight;
    //kbSize即為鍵盤尺寸 (有width, height)
    if (UIInterfaceOrientationIsPortrait([[UIApplication sharedApplication] statusBarOrientation])) {
        kbheight = [[info objectForKey:UIKeyboardFrameEndUserInfoKey] CGRectValue].size.height;
    }
    else
    {
        kbheight = [[info objectForKey:UIKeyboardFrameEndUserInfoKey] CGRectValue].size.width;
    }
    
    //得到鍵盤的高度
    CGRect rect = _scrollView.frame;
    
    rect.size.height = self.view.bounds.size.height-rect.origin.y-kbheight;
    _scrollView.frame = rect;
    
    rect.size.height = _btnRegister.frame.origin.y+_btnRegister.frame.size.height+10;
    _scrollView.contentSize = rect.size;
    
}

//当键盘隐藏的时候
- (void)keyboardWillBeHidden:(NSNotification*)aNotification
{
    CGRect rect = _scrollView.frame;
    rect.size.height = self.view.bounds.size.height-rect.origin.y;
    _scrollView.frame = rect;
    rect.size.height = _btnRegister.frame.origin.y+_btnRegister.frame.size.height+10;
    _scrollView.contentSize = _scrollView.frame.size;
}

/**
 *  屏幕旋转
 *
 *  @param toInterfaceOrientation
 *  @param duration
 */
-(void)layoutSubViewsWithInterfaceOrientation:(UIInterfaceOrientation)orientation
{
    if (UIUserInterfaceIdiomPad == UI_USER_INTERFACE_IDIOM()) return;
    
    CGRect rc = _navBar.frame;
    rc.size.height = UIInterfaceOrientationIsLandscape(orientation)?32:44;
    _navBar.frame = rc;
    rc = _scrollView.frame;
    rc.origin.y = _navBar.bottom;
    rc.size.height = self.view.height-rc.origin.y;
    _scrollView.frame = rc;
}

//按下return建的代理方法
- (BOOL)textFieldShouldReturn:(UITextField *)textField
{
    if (textField.tag == 1)
    {
        //        [self getOffsetPoint:[_textFieldPassword superview]];
        
        [_textFieldNick becomeFirstResponder];
    }
    else if(textField.tag==2)
    {
        [_textFieldPassword becomeFirstResponder];
    }
    else
    {
        //调用注册
        [self onTouchBtnResiter:nil ];
    }
    return NO;
}

//当点击View时  放弃输入框
-(void)myResignFirstResponder
{
    [_textFieldNick resignFirstResponder];
    [_textFieldInfo resignFirstResponder];
    [_textFieldPassword resignFirstResponder];
    
}

/**
 *  密文转换
 *
 *  @param sender
 */
- (IBAction)onTouchToPasswordsecurTextEntryBut:(UIButton *)sender {
    if (sender.selected) {
        _textFieldPassword.secureTextEntry = YES;
        sender.selected = NO;
        
    }
    else
    {
        _textFieldPassword.secureTextEntry = NO;
        sender.selected = YES;
    }
}

//注册方法
- (IBAction)onTouchBtnResiter:(id)sender
{
//    UIAlertView *alert = [[UIAlertView alloc]initWithTitle:LocalizedString(@"jinggao") message:LocalizedString(@"yonghuminghuomimabunengkong") delegate:self cancelButtonTitle:LocalizedString(@"queding") otherButtonTitles:nil, nil];

    //alert.tag = 1;
    
    //账号密码不能为空
    if ([_textFieldInfo.text length]==0 || [_textFieldPassword.text length]==0 ) {
        //[alert show];
        [SVProgressHUD showErrorWithStatus:LocalizedString(@"yonghuminghuomimabunengkong")];
    }
    else if(!(IsValidEmail(_textFieldInfo.text, YES) || IsValidMobilePhoneNum(_textFieldInfo.text)))
    {
        //用户名密码格式错误
        [SVProgressHUD showErrorWithStatus:LocalizedString(@"yonghuminggeshicuowu")];
//        alert.message = LocalizedString(@"yonghuminggeshicuowu");
//        [alert show];
    }
    else
    {
        [self reqRegisterFoInfo:_textFieldInfo.text passwd:_textFieldPassword.text nick:_textFieldNick.text controller:self];

    }
}

//paran:
//m: member
//a:register
//device: 设备类型(android, iphone,ipad)
//username:邮箱/手机号
//nickname:昵称
//￼
///passwd:密码
//return:
//error: msg: data:
//id: 会员id username:邮箱/手机号 img: 会员图片地址 nickname: 昵称 a_collect:收藏

//申请注册
-(void)reqRegisterFoInfo:(NSString *)info passwd:(NSString *)passwd nick:(NSString *)nick controller:(UIControllerBase *)controller
{
    [_reqRegister cancel];
    _reqRegister = nil;
    
    NSDictionary *dicParam = @{@"passwd":passwd,
                               @"username":info,
                               @"nickname":nick,
                               @"device":IsiPad?@"ipad":@"iphone"};
    
    AFHTTPClient *client = [AFHTTPClient clientWithBaseURL:[NSURL URLWithString:@""]];
    NSMutableURLRequest *req = [client requestWithMethod:@"POST" path:GetApiWithName(API_UserRegister) parameters:dicParam];
    
    
    _reqRegister = [AFJSONRequestOperation JSONRequestOperationWithRequest:req success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {
        NSDictionary *dic = (NSDictionary *)JSON;
        _DEBUG_LOG(@"%@",dic);
        if ([dic isKindOfClass:[NSDictionary class]])
        {
            NSDictionary *dicData = dic[@"data"];
            //如果放回结果里账户名跟输入账户名一致则登陆成功  否则弹出错误信息
            if ([dicData isKindOfClass:[NSDictionary class]] && [_textFieldInfo.text isEqualToString:dicData[@"username"]])
            {
                [SVProgressHUD showWithStatus:@"zhucechenggong!zhengzaijinrugerenzhongxin"];
                
                [UserManager shareUserManager].currUser = [ModelUser modelWithDict:dicData];
                
                UINavigationController *navController = self.navigationController;
                UIControllerUserInfo *vc=[[UIControllerUserInfo alloc]initWithNibName:@"UIControllerUserInfo" bundle:nil];
                vc.fromController = _fromController;
                [navController pushViewController:vc animated:YES];
                
                [[NSNotificationCenter defaultCenter] postNotificationName:KNotificationDidLogin object:nil];
            }
            else
            {
                NSString *temp =[NSString stringWithFormat:@"denglushibai!%@",dic[@"msg"]];
                [SVProgressHUD showErrorWithStatus:LocalizedString(temp)];
            }
        }
    } failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError *error, id JSON) {
        NSLog(@"failure__%@",(NSDictionary*)JSON);
        [SVProgressHUD showErrorWithStatus:LocalizedString(@"lianjieshibai")];
        
    }];
    [_reqRegister start];
    
}

-(void)updateByLanguage
{
    [_btnDelegate setTitle:LocalizedString(@"zhonghualiulanqiyonghufuwuxieyi") forState:UIControlStateNormal];
    _labelAgree.text = LocalizedString(@"tongyi");
    
    _navBar.topItem.title = LocalizedString(@"zhanghudenglu");
    _navBar.topItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:LocalizedString(@"fanhui") style:UIBarButtonItemStyleBordered target:self action:@selector(onTouchBtnback)];
//    _navBar.topItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:LocalizedString(@"baocun") style:UIBarButtonItemStyleBordered target:self action:nil];
    
    _textFieldInfo.placeholder = LocalizedString(@"youxiang/shoujihao");
    _textFieldPassword.placeholder = LocalizedString(@"mima");
    
}


- (void)onTouchBtnback
{
    [self.navigationController popViewControllerAnimated:YES];
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

@end
