//
//  SyncHelper.m
//  ChinaBrowser
//
//  Created by David on 14/12/19.
//  Copyright (c) 2014年 KOTO Inc. All rights reserved.
//

#import "SyncHelper.h"

#import "ModelHistory.h"
#import "ModelBookmark.h"
#import "ModelMode.h"
#import "ModelModeProgram.h"
#import "ModelUserSettings.h"
#import "ModelSyncDelete.h"

#import "ADOUserSettings.h"
#import "ADOBookmark.h"
#import "ADOHistory.h"
#import "ADOMode.h"
#import "ADOModeProgram.h"
#import "ADOSyncDelete.h"

static SyncHelper *_syncHelper;

@interface SyncHelper ()

@property (nonatomic, assign) NSInteger userId;
@property (nonatomic, strong) NSString *token;

@end

@implementation SyncHelper
{
    AFHTTPClient *_afClient;
}

+ (instancetype)shareSync
{
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _syncHelper = [[SyncHelper alloc] init];
    });
    return _syncHelper;
}

- (NSInteger)userId
{
    return [UserManager shareUserManager].currUser.uid;
}

- (NSString *)token
{
    return [UserManager shareUserManager].currUser.token;
}

- (instancetype)init
{
    self = [super init];
    if (self) {
        _afClient = [[AFHTTPClient alloc] initWithBaseURL:[NSURL URLWithString:GetApiBaseUrl()]];

    }
    return self;
}

// --------------------- 批处理 delete=>get=>merge=>add/update
/**
 *  根据用户设置同步所有能同步的数据
 *
 *  @param completion completion description
 *  @param fail       fail description
 */
- (void)syncAllIfNeededWithCompletion:(SyncCompletion)completion fail:(SyncFail)fail
{
    if ([self isSyncing]) return;
    
    [self syncUserSettingsWithCompletion:^{
        if ([UserManager shareUserManager].currUser.settings.syncBookmark) {
            // 书签
            [self syncBookmarkWithCompletion:^{
                if ([UserManager shareUserManager].currUser.settings.syncLastVisit) {
                    // 最近访问
                    [self syncHistoryWithCompletion:^{
                        if ([UserManager shareUserManager].currUser.settings.syncReminder) {
                            // 个性化定制
                            [self syncReminderWithCompletion:^{
                                if (completion) completion();
                            } fail:^(NSError *error) {
                                if (fail) fail(error);
                            }];
                        }
                    } fail:^(NSError *error) {
                        if (fail) fail(error);
                    }];
                }
                else if ([UserManager shareUserManager].currUser.settings.syncReminder) {
                    // 个性化定制
                    [self syncReminderWithCompletion:^{
                        if (completion) completion();
                    } fail:^(NSError *error) {
                        if (fail) fail(error);
                    }];
                }
            } fail:^(NSError *error) {
                if (fail) fail(error);
            }];
        }
        else if ([UserManager shareUserManager].currUser.settings.syncLastVisit) {
            // 最近访问
            [self syncHistoryWithCompletion:^{
                if ([UserManager shareUserManager].currUser.settings.syncReminder) {
                    // 个性化定制
                    [self syncReminderWithCompletion:^{
                        if (completion) completion();
                    } fail:^(NSError *error) {
                        if (fail) fail(error);
                    }];
                }
            } fail:^(NSError *error) {
                if (fail) fail(error);
            }];
        }
        else if ([UserManager shareUserManager].currUser.settings.syncReminder) {
            // 个性化定制
            [self syncReminderWithCompletion:^{
                if (completion) completion();
            } fail:^(NSError *error) {
                if (fail) fail(error);
            }];
        }
        else if (completion) {
            completion();
        }
    } fail:^(NSError *error) {
        if (fail) fail(error);
    }];
    
    
}

// --------------------- 批处理 delete=>get=>merge=>add/update
/**
 *  同步用户设置
 *
 *  @param completion completion description
 *  @param fail       fail description
 */
- (void)syncUserSettingsWithCompletion:(SyncCompletion)completion fail:(SyncFail)fail
{
    if ([self isSyncing]) return;
    
    [self syncGetUserSettingsWithCompletion:^(ModelUserSettings *modelUserSettings) {
        if (completion) completion();
    } fail:^(NSError *error) {
        if (fail) fail(error);
    }];
}

/**
 *  同步最近浏览
    1、向服务器提交删除操作 delete
    2、从服务器上下载最新数据，添加到本地 get
    3、提交数据到服务器，按访问时间倒序查询最新的20条数据
        1）从20条数据中筛选出pkid_server>0 && update_time>update_time_server 的数据提交到服务器修改 update
        2）从20条数据中筛选出pkid_server=0的数据 提交到服务器 add
 *
 *  @param completion completion description
 *  @param fail       fail description
 */
- (void)syncHistoryWithCompletion:(SyncCompletion)completion fail:(SyncFail)fail
{
    // 1、向服务器提交删除操作 delete
    NSArray *arrPkidServer = [ADOSyncDelete queryPkidServerWithSyncDataType:SyncDataTypeHistory userId:[self userId]];
    [self syncDeleteHistoryWithArrPkidServer:arrPkidServer completion:^{
        // 2、从服务器上下载最新数据，添加到本地 get
        [self syncGetHistoryWithCompletion:^(NSArray *arrModel) {
            // 3、提交数据到服务器，按访问时间倒序查询最新的20条数据
            NSArray *arrAllLastHistory = [ADOHistory queryLastNumber:20 withUserId:[self userId]];
            NSPredicate *predicateToAdd = [NSPredicate predicateWithFormat:@"self.pkid_server==0"];
            NSPredicate *predicateToUpdate = [NSPredicate predicateWithFormat:@"self.pkid_server>0 and self.updateTime>self.updateTimeServer"];
            NSArray *arrHistoryToAdd = [arrAllLastHistory filteredArrayUsingPredicate:predicateToAdd];
            NSArray *arrHistoryToUpdate = [arrAllLastHistory filteredArrayUsingPredicate:predicateToUpdate];
            
            // Update，将服务器器最后的更新时间，修改为本地最后更新的时间
            if (arrHistoryToUpdate.count>0) {
                for (ModelHistory *modelHistory in arrHistoryToUpdate) {
                    modelHistory.updateTimeServer = modelHistory.updateTime;
                }
                [self syncUpdateArrHistory:arrHistoryToUpdate completion:^{
                    
                } fail:^(NSError *error) {
                    if (fail) fail(error);
                }];
            }
            
            // Add，将服务器最后的更新时间，设置为本地最后更新的时间
            if (arrHistoryToAdd.count>0) {
                for (ModelHistory *modelHistory in arrHistoryToAdd) {
                    modelHistory.updateTimeServer = modelHistory.updateTime;
                }
                [self syncAddArrHistory:arrHistoryToAdd completion:^(NSArray *arrPkidServer) {
                    
                } fail:^(NSError *error) {
                    if (fail) fail(error);
                }];
            }
            
        } fail:^(NSError *error) {
            if (fail) fail(error);
        }];
    } fail:^(NSError *error) {
        if (fail) fail(error);
    }];
}

/**
 *  同步书签
 *
 *  @param completion completion description
 *  @param fail       fail description
 */
- (void)syncBookmarkWithCompletion:(SyncCompletion)completion fail:(SyncFail)fail
{
    NSArray *arrPkidServer = [ADOSyncDelete queryPkidServerWithSyncDataType:SyncDataTypeBookmark userId:[self userId]];
    [self syncDeleteBookmarkWithArrPkidServer:arrPkidServer completion:^{
        [self syncGetBookmarkWithCompletion:^(NSArray *arrModel) {
            NSArray *arrBookmarkToAdd = nil;
            NSArray *arrBookmarkToUpdate = nil;
            
            if (arrBookmarkToAdd.count>0) {
                [self syncAddArrBookmark:arrBookmarkToAdd completion:^(NSArray *arrPkidServer) {
                    
                } fail:^(NSError *error) {
                    if (fail) fail(error);
                }];
            }
            
            if (arrBookmarkToUpdate.count>0) {
                [self syncUpdateArrBookmark:arrBookmarkToUpdate completion:^{
                    
                } fail:^(NSError *error) {
                    if (fail) fail(fail);
                }];
            }
        } fail:^(NSError *error) {
            if (fail) fail(error);
        }];
    } fail:^(NSError *error) {
        if (fail) fail(error);
    }];
}

/**
 *  同步定制提醒(个性化定制)
 *
 *  @param completion completion description
 *  @param fail       fail description
 */
- (void)syncReminderWithCompletion:(SyncCompletion)completion fail:(SyncFail)fail
{
    [self syncModeWithCompletion:^{
        [self syncModeProgramWithCompletion:^{
            
        } fail:^(NSError *error) {
            if (fail) fail(error);
        }];
    } fail:^(NSError *error) {
        if (fail) fail(error);
    }];
}

- (void)syncModeWithCompletion:(SyncCompletion)completion fail:(SyncFail)fail
{
    NSArray *arrPkidServer = [ADOSyncDelete queryPkidServerWithSyncDataType:SyncDataTypeMode userId:[self userId]];
    [self syncDeleteModeWithArrPkidServer:arrPkidServer completion:^{
        [self syncGetModeWithCompletion:^(NSArray *arrModel) {
            NSArray *arrModeToAdd = nil;
            NSArray *arrModeToUpdate = nil;
            
            if (arrModeToAdd.count>0) {
                [self syncAddArrMode:arrModeToAdd completion:^(NSArray *arrPkidServer) {
                    
                } fail:^(NSError *error) {
                    if (fail) fail(error);
                }];
            }
            
            if (arrModeToUpdate.count>0) {
                [self syncUpdateArrMode:arrModeToUpdate completion:^{
                    
                } fail:^(NSError *error) {
                    if (fail) fail(error);
                }];
            }
        } fail:^(NSError *error) {
            if (fail) fail(error);
        }];
    } fail:^(NSError *error) {
        if (fail) fail(error);
    }];
}

- (void)syncModeProgramWithCompletion:(SyncCompletion)completion fail:(SyncFail)fail
{
    NSArray *arrPkidServer = [ADOSyncDelete queryPkidServerWithSyncDataType:SyncDataTypeModeProgram userId:[self userId]];
    [self syncDeleteModeProgramWithArrPkidServer:arrPkidServer completion:^{
        [self syncGetModeProgramWithCompletion:^(NSArray *arrModel) {
            NSArray *arrModeToAdd = nil;
            NSArray *arrModeToUpdate = nil;
            
            if (arrModeToAdd.count>0) {
                [self syncAddArrModeProgram:arrModeToAdd completion:^(NSArray *arrPkidServer) {
                    
                } fail:^(NSError *error) {
                    if (fail) fail(error);
                }];
            }
            
            if (arrModeToUpdate.count>0) {
                [self syncUpdateArrModeProgram:arrModeToUpdate completion:^{
                    
                } fail:^(NSError *error) {
                    if (fail) fail(error);
                }];
            }
        } fail:^(NSError *error) {
            if (fail) fail(error);
        }];
    } fail:^(NSError *error) {
        if (fail) fail(error);
    }];
}

// --------------------- 批处理同步 add【成功之后再修改本地数据库中的update_time_server,pkid_server和相关的外键pkid_server **** 很重要】
/**
 *  往服务器添加最近浏览的历史记录，添加成功后更新本地的pkid_server
 *
 *  @param arrHistory   历史记录实体 数组
 *  @param completion   completion description
 *  @param fail         fail description
 */
- (void)syncAddArrHistory:(NSArray *)arrHistory completion:(SyncAddCompletion)completion fail:(SyncFail)fail
{
    NSMutableArray *arrDictHistory = [NSMutableArray arrayWithCapacity:arrHistory.count];
    for (ModelHistory *modelHistory in arrHistory) {
        NSDictionary *dictHistory = @{@"title":modelHistory.title,
                                      @"link":modelHistory.link,
                                      @"icon":modelHistory.icon,
                                      @"time":@(modelHistory.time),
                                      @"times":@(modelHistory.times),
                                      @"update_time":@(modelHistory.updateTimeServer),
                                      @"user_id":@(modelHistory.userid)};
        [arrDictHistory addObject:dictHistory];
    }
    NSString *jsonArrModel = [[NSString alloc] initWithData:[NSJSONSerialization dataWithJSONObject:arrDictHistory
                                                                                            options:NSJSONWritingPrettyPrinted
                                                                                              error:nil]
                                                   encoding:NSUTF8StringEncoding];
    
    NSDictionary *dictParam = @{@"uid":@([self userId]),
                                @"token":[self token],
                                @"history":jsonArrModel};
    NSMutableURLRequest *req = [_afClient requestWithMethod:@"POST" path:API_AddUserHistory parameters:dictParam];
    AFJSONRequestOperation *afReq = [AFJSONRequestOperation JSONRequestOperationWithRequest:req success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {
        NSDictionary *dictResult = [self resovleJSON:JSON];
        if (dictResult) {
            NSArray *arrDictPkidServer = dictResult[@"data"];
            for (NSInteger index=0; index<arrDictPkidServer.count; index++) {
                NSDictionary *dictPkidServer = arrDictPkidServer[index];
                if (!dictPkidServer[@"pkid"]) {
                    break;
                }
                NSInteger pkidServer = [dictPkidServer[@"pkid"] integerValue];
                ModelHistory *modelHistory = arrHistory[index];
                [ADOHistory updatePkidServer:pkidServer updateTimeServer:modelHistory.updateTimeServer withPkid:modelHistory.pkid];
            }
            
            if (completion) {
                completion(nil);
            }
        }
        else {
            fail(nil);
        }
    } failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError *error, id JSON) {
        if (fail) fail(error);
    }];
    [afReq start];
}

/**
 *  往服务器添加书签(文件件)，添加成功后，更新本地相关的pkid_server和parent_pkid_server
 *
 *  @param arrBookmark  书签实体 数据
 *  @param completion    完成block
 *  @param fail          失败block
 */
- (void)syncAddArrBookmark:(NSArray *)arrBookmark completion:(SyncAddCompletion)completion fail:(SyncFail)fail
{
    
}

/**
 *  往服务器添加 定制 模式，添加成功后，更新本地的相关的pkid_server和 ModelModeProgram 中的 mode_pkid_server
 *
 *  @param arrMode      模式实体数组
 *  @param completion   完成block
 *  @param fail         失败block
 */
- (void)syncAddArrMode:(NSArray *)arrMode completion:(SyncAddCompletion)completion fail:(SyncFail)fail
{
    
}

/**
 *  往服务器添加 模式-节目，添加成功后，更新本地相关的pkid_server
 *
 *  @param arrModeProgram   模式-节目实体 数组
 *  @param completion       completion description
 *  @param fail             fail description
 */
- (void)syncAddArrModeProgram:(NSArray *)arrModeProgram completion:(SyncAddCompletion)completion fail:(SyncFail)fail
{
    
}

// --------------------- 批处理同步 delete【成功之后再删除本地数据库 **** 很重要】
/**
 *  删除服务器上的 历史记录（最近浏览）
 *
 *  @param arrPkidServer    arrPkidServer 需要删除的pkid_server数组
 *  @param completion       completion description
 *  @param fail             fail description
 */
- (void)syncDeleteHistoryWithArrPkidServer:(NSArray *)arrPkidServer completion:(SyncCompletion)completion fail:(SyncFail)fail
{
    if (0==arrPkidServer.count) {
        completion();
        return;
    }
    NSMutableArray *arrDictPKidServer = [NSMutableArray arrayWithCapacity:arrPkidServer.count];
    for (id pkidServer in arrPkidServer) {
        [arrDictPKidServer addObject:@{@"pkid":pkidServer}];
    }
    NSString *jsonPkidServer = [[NSString alloc] initWithData:[NSJSONSerialization dataWithJSONObject:arrDictPKidServer options:NSJSONWritingPrettyPrinted error:nil] encoding:NSUTF8StringEncoding];
    NSDictionary *dictParam = @{@"uid":@([self userId]),
                                @"token":[self token],
                                @"history":jsonPkidServer};
    NSMutableURLRequest *req = [_afClient requestWithMethod:@"POST" path:API_DeleteUserHistory parameters:dictParam];
    AFJSONRequestOperation *afReq = [AFJSONRequestOperation JSONRequestOperationWithRequest:req success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {
        NSDictionary *dictResult = [self resovleJSON:JSON];
        if (dictResult) {
            
            if (completion) completion();
        }
        else {
            if (fail) fail(nil);
        }
    } failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError *error, id JSON) {
        if (fail) fail(error);
    }];
    [afReq start];
}

/**
 *  删除服务器上的 书签(文件夹)
 *
 *  @param arrPkidServer    arrPkidServer 需要删除的pkid_server数组
 *  @param completion       completion description
 *  @param fail             fail description
 */
- (void)syncDeleteBookmarkWithArrPkidServer:(NSArray *)arrPkidServer completion:(SyncCompletion)completion fail:(SyncFail)fail
{
    if (0==arrPkidServer.count) {
        completion();
        return;
    }
    NSMutableArray *arrDictPKidServer = [NSMutableArray arrayWithCapacity:arrPkidServer.count];
    for (id pkidServer in arrPkidServer) {
        [arrDictPKidServer addObject:@{@"pkid":pkidServer}];
    }
    NSString *jsonPkidServer = [[NSString alloc] initWithData:[NSJSONSerialization dataWithJSONObject:arrDictPKidServer options:NSJSONWritingPrettyPrinted error:nil] encoding:NSUTF8StringEncoding];
    NSDictionary *dictParam = @{@"uid":@([self userId]),
                                @"token":[self token],
                                @"bookmark":jsonPkidServer};
    NSMutableURLRequest *req = [_afClient requestWithMethod:@"POST" path:API_DeleteUserBookmark parameters:dictParam];
    AFJSONRequestOperation *afReq = [AFJSONRequestOperation JSONRequestOperationWithRequest:req success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {
        NSDictionary *dictResult = [self resovleJSON:JSON];
        if (dictResult) {
            
            if (completion) completion();
        }
        else {
            if (fail) fail(nil);
        }
    } failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError *error, id JSON) {
        if (fail) fail(error);
    }];
    [afReq start];
}

/**
 *  删除服务器上的定制 模式
 *
 *  @param arrPkidServer    arrPkidServer 需要删除的pkid_server数组
 *  @param completion       completion description
 *  @param fail             fail description
 */
- (void)syncDeleteModeWithArrPkidServer:(NSArray *)arrPkidServer completion:(SyncCompletion)completion fail:(SyncFail)fail
{
    
}

/**
 *  删除服务器上的 模式-节目
 *
 *  @param arrPkidServer    arrPkidServer 需要删除的pkid_server数组
 *  @param completion       completion description
 *  @param fail             fail description
 */
- (void)syncDeleteModeProgramWithArrPkidServer:(NSArray *)arrPkidServer completion:(SyncCompletion)completion fail:(SyncFail)fail
{
    
}

// --------------------- 单条同步 update【成功之后再修改本地数据库 **** 很重要】
/**
 *  向服务器修改用户设置
 *
 *  @param userSetting 用户设置实体
 *  @param completion  completion description
 *  @param fail        fail description
 */
- (void)syncUpdateUserSetting:(ModelUserSettings *)userSetting completion:(SyncCompletion)completion fail:(SyncFail)fail
{
    NSDictionary *dictParam = @{@"uid":@([self userId]),
                                @"token":[self token],
                                @"sync_bookmark":@(userSetting.syncBookmark),
                                @"sync_lastvisit":@(userSetting.syncLastVisit),
                                @"sync_reminder":@(userSetting.syncReminder),
                                @"sync_style":@(userSetting.syncStyle),
                                @"update_time":@(userSetting.updateTimeServer)};
    NSMutableURLRequest *req = [_afClient requestWithMethod:@"POST" path:GetApiWithName(API_UpdateUserSettings) parameters:dictParam];
    AFJSONRequestOperation *afReq = [AFJSONRequestOperation JSONRequestOperationWithRequest:req success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {
        NSDictionary *dictResult = [self resovleJSON:JSON];
        if (dictResult) {
            [ADOUserSettings updateModel:userSetting];
            if (completion) completion();
        }
        else {
            if (fail) fail(nil);
        }
            
    } failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError *error, id JSON) {
        if (fail) fail(error);
    }];
    [afReq start];
}

/**
 *  修改服务器 最近浏览(历史记录前20条)
 *
 *  @param arrHistory 历史记录实体 数组 ModelHistory
 *  @param completion completion description
 *  @param fail       fail description
 */
- (void)syncUpdateArrHistory:(NSArray *)arrHistory completion:(SyncCompletion)completion fail:(SyncFail)fail
{
    
}

/**
 *  修改服务器 书签
 *
 *  @param arrBookmark 书签实体 数组 ModelBookmark
 *  @param completion  completion description
 *  @param fail        fail description
 */
- (void)syncUpdateArrBookmark:(NSArray *)arrBookmark completion:(SyncCompletion)completion fail:(SyncFail)fail
{
    
}

/**
 *  修改服务器 个性化定制 模式
 *
 *  @param arrMode    模式实体 数组
 *  @param completion completion description
 *  @param fail       fail description
 */
- (void)syncUpdateArrMode:(NSArray *)arrMode completion:(SyncCompletion)completion fail:(SyncFail)fail
{
    
}

/**
 *  修改服务器 模式-节目
 *
 *  @param arrModeProgram 模式-节目 实体 数组
 *  @param completion     completion description
 *  @param fail           fail description
 */
- (void)syncUpdateArrModeProgram:(NSArray *)arrModeProgram completion:(SyncCompletion)completion fail:(SyncFail)fail
{
    
}

// --------------------- 同步 get
/**
 *  下载用户设置
 *
 *  @param completion completion description
 *  @param fail       fail description
 */
- (void)syncGetUserSettingsWithCompletion:(SyncGetUserSettingsCompletion)completion fail:(SyncFail)fail
{
    NSDictionary *dictParam = @{@"uid":@([self userId]),
                                @"token":[self token]};
    NSMutableURLRequest *req = [_afClient requestWithMethod:@"POST" path:API_GetUserSettings parameters:dictParam];
    AFJSONRequestOperation *afReq = [AFJSONRequestOperation JSONRequestOperationWithRequest:req success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {
        NSDictionary *dictResult = [self resovleJSON:JSON];
        if (dictResult) {
            ModelUserSettings *modelUserSettings= [ModelUserSettings modelWithDict:dictResult];
            // 比较更新时间，本地更新时间<服务器上的更新时间，则需要更新本地数据
            if ([UserManager shareUserManager].currUser.settings.updateTime<modelUserSettings.updateTimeServer) {
                modelUserSettings.updateTime = modelUserSettings.updateTimeServer;
                [UserManager shareUserManager].currUser.settings = modelUserSettings;
                [ADOUserSettings updateModel:modelUserSettings];
            }
            if (completion) completion([UserManager shareUserManager].currUser.settings);
        }
        else {
            if (fail) fail(nil);
        }
    } failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError *error, id JSON) {
        if (fail) fail(error);
    }];
    [afReq start];
}

/**
 *  下载 历史记录
 *
 *  @param completion completion description
 *  @param fail       fail description
 */
- (void)syncGetHistoryWithCompletion:(SyncGetCompletion)completion fail:(SyncFail)fail
{
    NSDictionary *dictParam = @{@"uid":@([self userId]),
                                @"token":[self token]};
    NSMutableURLRequest *req = [_afClient requestWithMethod:@"POST" path:API_GetUserHistory  parameters:dictParam];
    AFJSONRequestOperation *afReq = [AFJSONRequestOperation JSONRequestOperationWithRequest:req success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {
        NSArray *arrDictHistory = [self resovleJSON:JSON];
        if (arrDictHistory) {
            NSMutableArray *arrHistoryServer = [NSMutableArray arrayWithCapacity:arrDictHistory.count];
            //  最新的用户历史记录
            for (NSDictionary *dictHistory in arrDictHistory) {
                ModelHistory *modelHistoryServer = [ModelHistory modelWithDict:dictHistory];
                [arrHistoryServer addObject:modelHistoryServer];
                
                /**
                 *  查询本地是否存在该链接的记录
                 */
                ModelHistory *modelHistoryLocal = [ADOHistory queryWithLink:modelHistoryServer.link userId:[self userId]];
                if (modelHistoryLocal && modelHistoryLocal.updateTime<modelHistoryServer.updateTimeServer) {
                    // 本地存在，并且服务器时间大于本地操作时间，则更新成服务器上的数据(数据合并)
                    modelHistoryServer.pkid = modelHistoryLocal.pkid;
                    modelHistoryServer.updateTime = modelHistoryServer.updateTimeServer;
                    
                    [ADOHistory updateMode:modelHistoryServer];
                }
                else {
                    // 本地不存在，新增服务器数据，同步下来的新数据
                    modelHistoryServer.updateTime = modelHistoryServer.updateTimeServer;
                    modelHistoryServer.pkid = [ADOHistory addModel:modelHistoryServer];
                }
            }
            
            if (completion) completion(arrHistoryServer);
        }
        else {
            if (fail) fail(nil);
        }
    } failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError *error, id JSON) {
        if (fail) fail(error);
    }];
    [afReq start];
}

- (void)syncGetBookmarkWithCompletion:(SyncGetCompletion)completion fail:(SyncFail)fail
{
    NSDictionary *dictParam = @{@"uid":@([self userId]),
                                @"token":[self token]};
    NSMutableURLRequest *req = [_afClient requestWithMethod:@"POST" path:API_GetUserBookmark  parameters:dictParam];
    AFJSONRequestOperation *afReq = [AFJSONRequestOperation JSONRequestOperationWithRequest:req success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {
        NSArray *arrDictBookmark = [self resovleJSON:JSON];
        if (arrDictBookmark) {
            NSMutableArray *arrBookmarkServer = [NSMutableArray arrayWithCapacity:arrDictBookmark.count];
            for (NSDictionary *dictBookmark in arrDictBookmark) {
                ModelBookmark *modelBookmarkServer = [ModelBookmark modelWithDict:dictBookmark];
                [arrBookmarkServer addObject:modelBookmarkServer];
                
                if (modelBookmarkServer.isFolder) {
                    // 书签文件夹
                }
                else {
                    // 书签
                }
            }
            
#warning TODO:比较 书签 增删改本地
            
            if (completion) completion(arrBookmarkServer);
        }
        else {
            if (fail) fail(nil);
        }
    } failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError *error, id JSON) {
        if (fail) fail(error);
    }];
    [afReq start];
}

- (void)syncGetModeWithCompletion:(SyncGetCompletion)completion fail:(SyncFail)fail
{
    NSDictionary *dictParam = @{@"uid":@([self userId]),
                                @"token":[self token]};
    NSMutableURLRequest *req = [_afClient requestWithMethod:@"POST" path:API_GetUserMode  parameters:dictParam];
    AFJSONRequestOperation *afReq = [AFJSONRequestOperation JSONRequestOperationWithRequest:req success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {
        NSArray *arrDictMode = [self resovleJSON:JSON];
        if (arrDictMode) {
            NSMutableArray *arrModeServer = [NSMutableArray arrayWithCapacity:arrDictMode.count];
            for (NSDictionary *dictMode in arrDictMode) {
                ModelMode *modelMode = [ModelMode modelWithDict:dictMode];
                [arrModeServer addObject:modelMode];
            }
            
#warning TODO:比较 模式 增删改本地
            
            if (completion) completion(nil);
        }
        else {
            if (fail) fail(nil);
        }
    } failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError *error, id JSON) {
        if (fail) fail(error);
    }];
    [afReq start];
}

- (void)syncGetModeProgramWithCompletion:(SyncGetCompletion)completion fail:(SyncFail)fail
{
    NSDictionary *dictParam = @{@"uid":@([self userId]),
                                @"token":[self token]};
    NSMutableURLRequest *req = [_afClient requestWithMethod:@"POST" path:API_GetUserModeProgram  parameters:dictParam];
    AFJSONRequestOperation *afReq = [AFJSONRequestOperation JSONRequestOperationWithRequest:req success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) {
        NSArray *arrDictModeProgram = [self resovleJSON:JSON];
        if (arrDictModeProgram) {
            NSMutableArray *arrModeProgramServer = [NSMutableArray arrayWithCapacity:arrDictModeProgram.count];
            for (NSDictionary *dictModeProgram in arrDictModeProgram) {
                ModelModeProgram *modelModeProgram = [ModelModeProgram modelWithDict:dictModeProgram];
                [arrModeProgramServer addObject:modelModeProgram];
            }
            
#warning TODO:比较 模式-节目 增删改本地
            
            if (completion) completion(nil);
        }
        else {
            if (fail) fail(nil);
        }
        
    } failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError *error, id JSON) {
        if (fail) fail(error);
    }];
    [afReq start];
}

// ----------------------- private methods
- (id)resovleJSON:(id)JSON
{
    id data = nil;
    do {
        if (![JSON isKindOfClass:[NSDictionary class]]) break;
        id error = JSON[@"error"];
        NSString *msg = JSON[@"msg"];
        data = JSON[@"data"];
        
        if (!data) break;
        NSInteger errorCode = error?[error integerValue]:0;
        
    } while (NO);
    
    return data;
}

@end
