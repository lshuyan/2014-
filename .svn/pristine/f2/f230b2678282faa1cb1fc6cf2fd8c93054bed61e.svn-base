//
//  DBHelper.m
//  ChinaBrowser
//
//  Created by David on 14/11/24.
//  Copyright (c) 2014年 KOTO Inc. All rights reserved.
//

#import "DBHelper.h"

static DBHelper *dbhelper;

@interface DBHelper ()

@end

@implementation DBHelper

- (void)setup
{
    _db = [[FMDatabase alloc] initWithPath:GetDBPathWithName(@"updatetime.sqlite")];
    [_db open];
    
    [self createTable];
}

- (void)createTable
{
    // 新闻阅读状态
    NSString *sql_news_status = @"create table if not exists tab_news_status ("
    "pkid integer not null primary key autoincrement default 1,"
    "newsid integer,"
    "status integer default 0,"
    "lan text);";
    
    // 搜索历史记录
    NSString *sql_search_history = @"create table if not exists tab_search_history ("
    "pkid integer not null primary key autoincrement default 1,"
    "keyword text);";
    
    // 应用
    NSString *sql_app = @"create table if not exists tab_app ("
    "pkid integer not null primary key autoincrement default 1,"
    "user_id integer default 0,"
    "lan text,"
    
    "app_type integer,"
    "name text,"
    "icon text,"
    "link text,"
    "url_schemes text,"
    "package text,"
    "download_link text,"
    "sort_index integer,"
    
    "pkid_server integer default 0,"
    "update_time integer default 0,"
    "update_time_server integer default 0);";
    
    // 用户设置
    NSString *sql_user_settings = @"create table if not exists tab_user_settings ("
    "pkid integer not null primary key autoincrement default 1,"
    "user_id integer default 0,"
    "lan text,"
    
    "sync_bookmark integer default 0,"
    "sync_lastvisit integer default 0,"
    "sync_reminder integer default 0,"
    "sync_style integer default 0,"
    
    "pkid_server integer default 0,"
    "update_time integer default 0,"
    "update_time_server integer default 0);";
    
    // 书签
    NSString *sql_bookmark = @"create table if not exists tab_bookmark ("
    "pkid integer not null primary key autoincrement default 1,"
    "user_id integer default 0,"
    "lan text,"
    
    "parent_pkid integer default 0,"
    "sort integer default 0,"
    "title text,"
    "link text,"
    "icon text,"
    "is_folder integer default 0,"
    "can_edit integer default 0,"
    
    "pkid_server integer default 0,"
    "update_time integer default 0,"
    "update_time_server integer default 0);";
    
    // 历史
    NSString *sql_history = @"create table if not exists tab_history ("
    "pkid integer not null primary key autoincrement default 1,"
    "user_id integer default 0,"
    "lan text,"
    
    "title text,"
    "link text,"
    "icon text,"
    "time integer default 0,"
    "times integer default 0,"
    
    "pkid_server integer default 0,"
    "update_time integer default 0,"
    "update_time_server integer default 0);";
    
    // 模式表
    NSString *sql_mode = @"create table if not exists tab_mode ("
    "pkid integer not null primary key autoincrement default 1,"
    "user_id integer default 0,"
    "lan text,"
    
    "name text,"
    "sys_recommend integer,"
    
    "pkid_server integer default 0,"
    "update_time integer default 0,"
    "update_time_server integer default 0);";
    
    // 模式-节目表
    NSString *sql_mode_program = @"create table if not exists tab_mode_program ("
    "pkid integer not null primary key autoincrement default 1,"
    "lan text,"
    
    "mode_pkid integer default 0,"
    "mode_pkid_server integer default 0,"
    "program_pkid_server integer default 0,"
    "time integer default 0,"
    "repeat integer default 0,"
    "is_on integer default 0,"
    
    "pkid_server integer default 0,"
    "update_time integer default 0,"
    "update_time_server integer default 0);";
    
    // 节目表
    NSString *sql_program = @"create table if not exists tab_program ("
    "pkid integer not null primary key autoincrement default 1,"
    "lan text,"
    
    "parent_pkid_server integer default 0,"
    "type integer default 0,"
    "time integer default 0,"
    "title text,"
    "link text,"
    "fm text,"
    "recommend_catid integer default 0,"
    
    "pkid_server integer default 0);";
    
    // 电台播放记录
    NSString *sql_fm_history = @"create table if not exists tab_fm_history ("
    "pkid integer not null primary key autoincrement default 1,"
    "user_id integer default 0,"
    "lan text,"
    
    "mode_pkid integer,"
    "mode_program_pkid integer);";
    
    // 连接地址对应的网络icon地址
    NSString *sql_link_icon = @"create table if not exists tab_link_icon ("
    "pkid integer not null primary key autoincrement default 1,"
    "link text default \"\","
    "icon text default \"\";)";
    
    // 删除同步数据的记录
    /**
     *  pkid
     *  sync_data_type  同步的数据类型
     *  pkid_server     同步的数据的服务器id
     *  update_time     本地删除时间
     */
    NSString *sql_sync_delete = @"create table if not exists tab_sync_delete ("
    "pkid integer not null primary key autoincrement default 1,"
    "user_id integer default 0,"
    "lan text,"
    
    "sync_date_type integer default 0,"
    "pkid_server integer default 0,"
    "update_time integer default 0;)";
    
    //用户账户密码信息
    NSString *sql_user_password = @"create table if not exists tab_user_password ("
    "pkid integer not null primary key autoincrement default 1,"
    "user_name text,"
    "password text,"
    "lan text);";
    
    NSArray *arrSql = @[sql_app,
                        sql_search_history,
                        sql_history,
                        sql_bookmark,
                        sql_news_status,
                        sql_user_settings,
                        sql_mode,
                        sql_program,
                        sql_mode_program,
                        sql_fm_history,
                        sql_link_icon,
                        sql_sync_delete,
                        sql_user_password];
    for (NSString *sql in arrSql) {
        [_db executeUpdate:sql];
    }
}

- (instancetype)init
{
    self = [super init];
    if (self) {
        [self setup];
    }
    return self;
}

+ (instancetype)shareDBHelper
{
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        dbhelper = [[DBHelper alloc] init];
    });
    return dbhelper;
}

+ (FMDatabase *)db
{
    return [DBHelper shareDBHelper].db;
}

@end
